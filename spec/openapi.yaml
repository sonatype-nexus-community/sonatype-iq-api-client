components:
  schemas:
    Action:
      properties:
        actionTypeId:
          type: string
        target:
          type: string
        targetType:
          type: string
      type: object
    ApiApplicationBaseDTO:
      properties:
        contactUserName:
          type: string
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
        publicId:
          type: string
      type: object
    ApiApplicationCategoriesDTO:
      properties:
        categories:
          items:
            $ref: '#/components/schemas/ApiApplicationCategoryDTO'
          type: array
        contactUserName:
          type: string
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
        publicId:
          type: string
      type: object
    ApiApplicationCategoriesListDTO:
      properties:
        applications:
          items:
            $ref: '#/components/schemas/ApiApplicationCategoriesDTO'
          type: array
      type: object
    ApiApplicationCategoryDTO:
      properties:
        color:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
      type: object
    ApiApplicationDTO:
      properties:
        applicationTags:
          items:
            $ref: '#/components/schemas/ApiApplicationTagDTO'
          type: array
        contactUserName:
          type: string
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
        publicId:
          type: string
      type: object
    ApiApplicationEvaluationCommitDTO:
      properties:
        commitHash:
          type: string
        reportUrl:
          type: string
        scanId:
          type: string
        scanTime:
          format: date-time
          type: string
      type: object
    ApiApplicationEvaluationResultDTOV2:
      properties:
        embeddableReportHtmlUrl:
          type: string
        reason:
          type: string
        reportDataUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportPdfUrl:
          type: string
        status:
          type: string
      type: object
    ApiApplicationEvaluationStatusDTOV2:
      properties:
        statusUrl:
          type: string
      type: object
    ApiApplicationListDTO:
      properties:
        applications:
          items:
            $ref: '#/components/schemas/ApiApplicationDTO'
          type: array
      type: object
    ApiApplicationReportDTOV2:
      properties:
        applicationId:
          type: string
        embeddableReportHtmlUrl:
          type: string
        evaluationDate:
          format: date-time
          type: string
        latestReportHtmlUrl:
          type: string
        reportDataUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportPdfUrl:
          type: string
        stage:
          type: string
      type: object
    ApiApplicationTagDTO:
      properties:
        applicationId:
          type: string
        id:
          type: string
        tagId:
          type: string
      type: object
    ApiApplicationViolationDTOV2:
      properties:
        application:
          $ref: '#/components/schemas/ApiApplicationBaseDTO'
        policyViolations:
          items:
            $ref: '#/components/schemas/ApiEnhancedPolicyViolationDTOV2'
          type: array
      type: object
    ApiApplicationViolationListDTOV2:
      properties:
        applicationViolations:
          items:
            $ref: '#/components/schemas/ApiApplicationViolationDTOV2'
          type: array
      type: object
    ApiApplicationWaiverDTO:
      properties:
        application:
          $ref: '#/components/schemas/ApiApplicationBaseDTO'
        stages:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationStageDTO'
          type: array
      type: object
    ApiAppliedLicenseOverridesDTO:
      properties:
        licenseOverridesByOwner:
          items:
            $ref: '#/components/schemas/LicenseOverrideByOwner'
          type: array
      type: object
    ApiArtifactoryConnectionDTO:
      properties:
        artifactoryConnectionId:
          type: string
        baseUrl:
          type: string
        isAnonymous:
          type: boolean
        ownerId:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
        password:
          type: string
        username:
          type: string
      type: object
    ApiArtifactoryConnectionStatusRequestDTO:
      properties:
        allowOverride:
          type: boolean
        enabled:
          type: boolean
      type: object
    ApiArtifactoryConnectionStatusResponseDTO:
      properties:
        allowChange:
          type: boolean
        allowOverride:
          type: boolean
        enabled:
          type: boolean
        inheritedFromOrgEnabled:
          type: boolean
        inheritedFromOrganizationId:
          type: string
        inheritedFromOrganizationName:
          type: string
      type: object
    ApiAutoPolicyWaiverDTO:
      properties:
        autoPolicyWaiverId:
          type: string
        createTime:
          format: date-time
          type: string
        creatorId:
          type: string
        creatorName:
          type: string
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          type: string
        pathForward:
          type: boolean
        publicId:
          type: string
        reachability:
          type: boolean
        scopesOperatorAny:
          type: boolean
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiAutoPolicyWaiverExclusionRequestDTO:
      properties:
        applicationPublicId:
          type: string
        autoPolicyWaiverId:
          type: string
        matchStrategy:
          enum:
          - EXACT_COMPONENT
          - ALL_VERSIONS
          - POLICY_VIOLATION
          type: string
        ownerId:
          type: string
        policyViolationId:
          type: string
        scanId:
          type: string
      type: object
    ApiAutoPolicyWaiverExclusionResponseDTO:
      properties:
        autoPolicyWaiverExclusionId:
          type: string
        autoPolicyWaiverId:
          type: string
        componentDisplayName:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ComponentIdentifier'
        componentMatchStrategy:
          enum:
          - EXACT_COMPONENT
          - ALL_VERSIONS
          - POLICY_VIOLATION
          type: string
        constraintFacts:
          items:
            $ref: '#/components/schemas/ConstraintFact'
          type: array
        createTime:
          format: date-time
          type: string
        creatorId:
          type: string
        creatorName:
          type: string
        hash:
          type: string
        ownerId:
          type: string
        ownerName:
          type: string
        ownerPublicId:
          type: string
        ownerType:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        scanId:
          type: string
        threatLevel:
          format: int32
          type: integer
        vulnerabilityIdentifiers:
          type: string
      type: object
    ApiAutoPolicyWaiverStatusDTO:
      properties:
        autoPolicyWaiverId:
          type: string
        autoPolicyWaiverOwnerId:
          type: string
        autoPolicyWaiverOwnerName:
          type: string
        autoPolicyWaiverOwnerType:
          type: string
        createTime:
          format: date-time
          type: string
        hasNoPathForward:
          type: boolean
        hasNotReachable:
          type: boolean
        isAutoWaiverEnabled:
          type: boolean
        isInherited:
          type: boolean
        scopesOperatorAny:
          type: boolean
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiBulkWaiversDTO:
      properties:
        apiWaiverOptionsDTO:
          $ref: '#/components/schemas/ApiWaiverOptionsDTO'
        violationIds:
          items:
            type: string
          type: array
      type: object
    ApiComponentChangeActionDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
      type: object
    ApiComponentDTOV2:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          nullable: true
          type: string
        packageUrl:
          type: string
        proprietary:
          type: boolean
        sha256:
          type: string
        thirdParty:
          type: boolean
      type: object
    ApiComponentDetailsDTOV2:
      properties:
        catalogDate:
          format: date-time
          type: string
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
        hygieneRating:
          nullable: true
          type: string
        integrityRating:
          nullable: true
          type: string
        licenseData:
          $ref: '#/components/schemas/ApiLicenseDataDTO'
        matchState:
          type: string
        policyData:
          $ref: '#/components/schemas/ApiComponentPolicyViolationListDTOV2'
        projectData:
          $ref: '#/components/schemas/ApiComponentProjectDataDTO'
        relativePopularity:
          format: int32
          nullable: true
          type: integer
        securityData:
          $ref: '#/components/schemas/ApiSecurityDataDTO'
      type: object
    ApiComponentDetailsRequestDTOV2:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiComponentDTOV2'
          type: array
      type: object
    ApiComponentDetailsResultDTOV2:
      properties:
        componentDetails:
          items:
            $ref: '#/components/schemas/ApiComponentDetailsDTOV2'
          type: array
      type: object
    ApiComponentEvaluationRequestDTOV2:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiComponentDTOV2'
          type: array
      type: object
    ApiComponentEvaluationResultDTOV2:
      properties:
        applicationId:
          type: string
        errorMessage:
          nullable: true
          type: string
        evaluationDate:
          format: date-time
          type: string
        isError:
          type: boolean
        results:
          items:
            $ref: '#/components/schemas/ApiComponentDetailsDTOV2'
          type: array
        submittedDate:
          format: date-time
          type: string
      type: object
    ApiComponentEvaluationTicketDTOV2:
      properties:
        applicationId:
          type: string
        resultId:
          type: string
        resultsUrl:
          type: string
        submittedDate:
          format: date-time
          type: string
      type: object
    ApiComponentIdentifierDTOV2:
      properties:
        coordinates:
          additionalProperties:
            type: string
          type: object
        format:
          type: string
      type: object
    ApiComponentOrPurlIdentifierDTOV2:
      properties:
        coordinates:
          additionalProperties:
            type: string
          type: object
        format:
          type: string
        packageUrl:
          type: string
      type: object
    ApiComponentPolicyViolationDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
        waivedPolicyViolations:
          items:
            $ref: '#/components/schemas/ApiWaivedPolicyViolationDTO'
          type: array
      type: object
    ApiComponentPolicyViolationListDTOV2:
      properties:
        policyViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationDTOV2'
          type: array
      type: object
    ApiComponentPolicyWaiversDTO:
      properties:
        componentPolicyWaivers:
          items:
            $ref: '#/components/schemas/ApiPolicyWaiverDTO'
          type: array
      type: object
    ApiComponentProjectDataDTO:
      properties:
        firstReleaseDate:
          format: date-time
          type: string
        lastReleaseDate:
          format: date-time
          type: string
        projectMetadata:
          $ref: '#/components/schemas/ApiComponentProjectMetadataDTO'
        sourceControlManagement:
          $ref: '#/components/schemas/ApiComponentProjectScmDTO'
      type: object
    ApiComponentProjectMetadataDTO:
      properties:
        description:
          type: string
        organization:
          type: string
      type: object
    ApiComponentProjectScmDTO:
      properties:
        scmDetails:
          $ref: '#/components/schemas/ApiComponentProjectScmDetailsDTO'
        scmMetadata:
          $ref: '#/components/schemas/ApiComponentProjectScmMetadataDTO'
        scmUrl:
          type: string
      type: object
    ApiComponentProjectScmDetailsDTO:
      properties:
        commitsPerMonth:
          format: int32
          type: integer
        uniqueDevsPerMonth:
          format: int32
          type: integer
      type: object
    ApiComponentProjectScmMetadataDTO:
      properties:
        forks:
          format: int32
          type: integer
        stars:
          format: int32
          type: integer
      type: object
    ApiComponentReleasedFromQuarantineDTO:
      properties:
        componentReleasedFromQuarantine:
          $ref: '#/components/schemas/ApiRepositoryComponentPolicyViolationDTO'
      type: object
    ApiComponentRemediationValueDTO:
      properties:
        suggestedVersionChange:
          $ref: '#/components/schemas/ApiSuggestedVersionChangeOptionDTO'
        versionChanges:
          items:
            $ref: '#/components/schemas/ApiVersionChangeOptionDTO'
          type: array
      type: object
    ApiComponentTransitivePolicyViolationsDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        isInnerSource:
          type: boolean
        packageUrl:
          type: string
        transitivePolicyViolations:
          items:
            $ref: '#/components/schemas/ApiStagePolicyViolationComponentDTO'
          type: array
      type: object
    ApiComponentWaiversDTO:
      properties:
        applicationWaivers:
          items:
            $ref: '#/components/schemas/ApiApplicationWaiverDTO'
          type: array
        repositoryWaivers:
          items:
            $ref: '#/components/schemas/ApiRepositoryWaiverDTO'
          type: array
      type: object
    ApiComponentsInQuarantineDTO:
      properties:
        componentsInQuarantine:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentsInQuarantineDTO'
          type: array
      type: object
    ApiCompositeSourceControlDTO:
      properties:
        baseBranch:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
        closePrAfterDays:
          $ref: '#/components/schemas/ApiCompositeValueDTOInteger'
        closePrAfterDaysOpenEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        closePrOnFailedChecksEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        commitStatusEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        id:
          type: string
        innerSourceAutomatedUpdatesEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        manualPullRequestsEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        ownerId:
          type: string
        provider:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
        pullRequestCommentingEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        remediationPullRequestsEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        repositoryUrl:
          type: string
        sourceControlEvaluationsEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        sourceControlScanTarget:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
        sshEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        statusChecksEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        token:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
        username:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
      type: object
    ApiCompositeValueDTOBoolean:
      properties:
        parentName:
          type: string
        parentValue:
          type: boolean
        value:
          type: boolean
      type: object
    ApiCompositeValueDTOInteger:
      properties:
        parentName:
          type: string
        parentValue:
          format: int32
          type: integer
        value:
          format: int32
          type: integer
      type: object
    ApiCompositeValueDTOString:
      properties:
        parentName:
          type: string
        parentValue:
          type: string
        value:
          type: string
      type: object
    ApiConditionFactReasonDTO:
      properties:
        reason:
          type: string
      type: object
    ApiConstraintFactDTO:
      properties:
        constraintId:
          type: string
        constraintName:
          type: string
        reasons:
          items:
            $ref: '#/components/schemas/ApiConditionFactReasonDTO'
          type: array
      type: object
    ApiConstraintViolationDTO:
      properties:
        constraintId:
          type: string
        constraintName:
          type: string
        reasons:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationReasonDTO'
          type: array
      type: object
    ApiConstraintViolationReasonDTO:
      properties:
        reason:
          type: string
        reference:
          $ref: '#/components/schemas/TriggerReference'
      type: object
    ApiContainerImageWaiverDTO:
      properties:
        comment:
          type: string
        expiryTime:
          format: date-time
          type: string
        waiverReasonId:
          type: string
      type: object
    ApiCrossStageViolationDTOV2:
      properties:
        applicationName:
          type: string
        applicationPublicId:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        displayName:
          $ref: '#/components/schemas/ComponentDisplayName'
        filename:
          type: string
        fixTime:
          format: date-time
          type: string
        hash:
          type: string
        legacyViolationTime:
          format: date-time
          type: string
        openTime:
          format: date-time
          type: string
        organizationName:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyOwner:
          $ref: '#/components/schemas/PolicyOwner'
        policyThreatCategory:
          type: string
        policyViolationId:
          type: string
        reachabilityStatus:
          enum:
          - REACHABLE
          - NON_REACHABLE
          - UNKNOWN
          type: string
        stageData:
          additionalProperties:
            $ref: '#/components/schemas/StageData'
          type: object
        threatLevel:
          format: int32
          type: integer
        waiveTime:
          format: date-time
          type: string
      type: object
    ApiCrowdConfigurationDTO:
      properties:
        applicationName:
          type: string
        applicationPassword:
          type: string
        serverUrl:
          type: string
      type: object
    ApiDataRetentionPoliciesDTO:
      properties:
        applicationReports:
          $ref: '#/components/schemas/ApiReportRetentionPoliciesDTO'
        successMetrics:
          $ref: '#/components/schemas/ApiSuccessMetricsRetentionPolicyDTO'
      type: object
    ApiDependencyDataDTO:
      properties:
        directDependency:
          type: boolean
        innerSource:
          type: boolean
        innerSourceData:
          items:
            $ref: '#/components/schemas/InnerSourceData'
          type: array
          uniqueItems: true
        parentComponentPurls:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ApiDependencyTreeNodeDTO:
      properties:
        children:
          items:
            $ref: '#/components/schemas/ApiDependencyTreeNodeDTO'
          type: array
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        direct:
          type: boolean
        packageUrl:
          type: string
      type: object
    ApiDependencyTreeResponseDTO:
      properties:
        dependencyTree:
          $ref: '#/components/schemas/ApiDependencyTreeNodeDTO'
      type: object
    ApiEnhancedPolicyViolationDTOV2:
      properties:
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        fixTime:
          format: date-time
          type: string
        isLegacy:
          type: boolean
        isWaived:
          type: boolean
        legacyViolationTime:
          format: date-time
          type: string
        openTime:
          format: date-time
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        reportId:
          type: string
        reportUrl:
          type: string
        stageId:
          type: string
        threatLevel:
          format: int32
          type: integer
        waiveTime:
          format: date-time
          type: string
      type: object
    ApiEvaluationResultCounterDTO:
      properties:
        critical:
          format: int32
          type: integer
        moderate:
          format: int32
          type: integer
        severe:
          format: int32
          type: integer
      type: object
    ApiFirewallComponentDTO:
      description: List of items for the current page
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ComponentIdentifier'
        dateCleared:
          format: date-time
          type: string
        displayName:
          type: string
        hash:
          type: string
        matchState:
          type: string
        pathname:
          type: string
        quarantineDate:
          format: date-time
          type: string
        quarantinePolicyViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationDTOV2'
          type: array
        quarantined:
          type: boolean
        repository:
          type: string
        repositoryId:
          type: string
      type: object
    ApiFirewallComponentDTOResult:
      properties:
        page:
          description: Current page number
          format: int32
          type: integer
        pageCount:
          description: Total number of pages
          format: int64
          type: integer
        pageSize:
          description: Number of items per page
          format: int32
          type: integer
        results:
          description: List of items for the current page
          items:
            $ref: '#/components/schemas/ApiFirewallComponentDTO'
          type: array
        total:
          description: Total number of items
          format: int64
          type: integer
      type: object
    ApiFirewallMetricsResultDTO:
      properties:
        firewallMetricsValue:
          format: int32
          type: integer
        latestUpdatedTime:
          format: date-time
          type: string
      type: object
    ApiFirewallQuarantineSummaryDTO:
      properties:
        quarantineEnabled:
          type: boolean
        quarantineEnabledRepositoryCount:
          format: int64
          type: integer
        quarantinedComponentCount:
          format: int64
          type: integer
        repositoryCount:
          format: int64
          type: integer
        totalComponentCount:
          format: int64
          type: integer
      type: object
    ApiFirewallQuarantinedComponentDto:
      description: List of items for the current page
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ComponentIdentifier'
        displayName:
          type: string
        hash:
          type: string
        matchState:
          type: string
        pathname:
          type: string
        policyName:
          type: string
        quarantineDate:
          type: string
        quarantined:
          type: boolean
        repositoryId:
          type: string
        repositoryName:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiFirewallQuarantinedComponentDtoResult:
      properties:
        page:
          description: Current page number
          format: int32
          type: integer
        pageCount:
          description: Total number of pages
          format: int64
          type: integer
        pageSize:
          description: Number of items per page
          format: int32
          type: integer
        results:
          description: List of items for the current page
          items:
            $ref: '#/components/schemas/ApiFirewallQuarantinedComponentDto'
          type: array
        total:
          description: Total number of items
          format: int64
          type: integer
      type: object
    ApiFirewallReleaseQuarantineConfigDTO:
      properties:
        autoReleaseQuarantineEnabled:
          type: boolean
        id:
          type: string
        name:
          type: string
      type: object
    ApiFirewallReleaseQuarantineSummaryDTO:
      properties:
        autoReleaseQuarantineCountMTD:
          format: int64
          type: integer
        autoReleaseQuarantineCountYTD:
          format: int64
          type: integer
      type: object
    ApiGlobalInformationDTOV2:
      properties:
        dataVersionDate:
          type: string
      type: object
    ApiHashComponentIdentifierDTO:
      properties:
        claimerId:
          type: string
        claimerName:
          type: string
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        createTime:
          format: date-time
          type: string
        hash:
          type: string
        packageUrl:
          type: string
      type: object
    ApiHashComponentIdentifiersDTO:
      properties:
        componentClaims:
          items:
            $ref: '#/components/schemas/ApiHashComponentIdentifierDTO'
          type: array
      type: object
    ApiJiraConfigurationDTO:
      properties:
        customFields:
          additionalProperties:
            type: object
          type: object
        password:
          type: string
        url:
          type: string
        username:
          type: string
      type: object
    ApiLabelDTO:
      properties:
        color:
          type: string
        description:
          type: string
        id:
          type: string
        label:
          type: string
        ownerId:
          type: string
        ownerType:
          type: string
      type: object
    ApiLicenseDTO:
      properties:
        licenseId:
          type: string
        licenseName:
          type: string
      type: object
    ApiLicenseDataDTO:
      properties:
        declaredLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        effectiveLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        observedLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        overriddenLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        status:
          type: string
      type: object
    ApiLicenseDataDTOV2:
      properties:
        declaredLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        effectiveLicenseThreats:
          items:
            $ref: '#/components/schemas/ApiLicenseThreatDTOV2'
          type: array
        effectiveLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        observedLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        overriddenLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        status:
          type: string
      type: object
    ApiLicenseLegalApplicationReportDTO:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalComponentDTO'
          type: array
        licenseLegalMetadata:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalMetadataDTO'
          type: array
          uniqueItems: true
      type: object
    ApiLicenseLegalComponentDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        licenseLegalData:
          $ref: '#/components/schemas/ApiLicenseLegalDataDTO'
        packageUrl:
          type: string
        stageScans:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalStageScanDTO'
          type: array
      type: object
    ApiLicenseLegalComponentReportDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiLicenseLegalComponentDTO'
        licenseLegalMetadata:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalMetadataDTO'
          type: array
          uniqueItems: true
      type: object
    ApiLicenseLegalCopyrightDTO:
      properties:
        content:
          type: string
        id:
          type: string
        originalContentHash:
          type: string
        status:
          enum:
          - enabled
          - disabled
          type: string
      type: object
    ApiLicenseLegalDataDTO:
      properties:
        attributions:
          items:
            $ref: '#/components/schemas/ComponentObligationAttributionDTO'
          type: array
        componentCopyrightId:
          type: string
        componentCopyrightLastUpdatedAt:
          format: date-time
          type: string
        componentCopyrightLastUpdatedByUsername:
          type: string
        componentCopyrightScopeOwnerId:
          type: string
        componentLicensesId:
          type: string
        componentLicensesLastUpdatedAt:
          format: date-time
          type: string
        componentLicensesLastUpdatedByUsername:
          type: string
        componentLicensesScopeOwnerId:
          type: string
        componentNoticesId:
          type: string
        componentNoticesLastUpdatedAt:
          format: date-time
          type: string
        componentNoticesLastUpdatedByUsername:
          type: string
        componentNoticesScopeOwnerId:
          type: string
        copyrights:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalCopyrightDTO'
          type: array
        declaredLicenses:
          items:
            type: string
          type: array
        effectiveLicenseStatus:
          type: string
        effectiveLicenses:
          items:
            type: string
          type: array
        highestEffectiveLicenseThreatGroup:
          $ref: '#/components/schemas/ApiLicenseThreatDTOV2'
        licenseFiles:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalFileDTO'
          type: array
        noticeFiles:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalFileDTO'
          type: array
        obligations:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalObligationDTO'
          type: array
        observedLicenses:
          items:
            type: string
          type: array
        sourceLinks:
          items:
            $ref: '#/components/schemas/LegalSourceLinkDTO'
          type: array
          uniqueItems: true
      type: object
    ApiLicenseLegalFileDTO:
      properties:
        content:
          type: string
        id:
          type: string
        originalContentHash:
          type: string
        relPath:
          type: string
        status:
          enum:
          - enabled
          - disabled
          type: string
      type: object
    ApiLicenseLegalMetadataDTO:
      properties:
        isMulti:
          type: boolean
        licenseId:
          type: string
        licenseName:
          type: string
        licenseText:
          type: string
        obligations:
          items:
            $ref: '#/components/schemas/LicenseObligationDTO'
          type: array
          uniqueItems: true
        singleLicenseIds:
          items:
            type: string
          type: array
          uniqueItems: true
        threatGroup:
          $ref: '#/components/schemas/LicenseThreatGroupDTO'
      type: object
    ApiLicenseLegalObligationDTO:
      properties:
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        lastUpdatedByUsername:
          type: string
        name:
          type: string
        ownerId:
          type: string
        packageUrl:
          type: string
        status:
          enum:
          - OPEN
          - IGNORED
          - FLAGGED
          - FULFILLED
          type: string
      type: object
    ApiLicenseLegalStageScanDTO:
      properties:
        scanDate:
          format: date-time
          type: string
        scanId:
          type: string
        stageName:
          type: string
      type: object
    ApiLicenseOverrideDTO:
      properties:
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        id:
          type: string
        licenseIds:
          items:
            type: string
          type: array
          uniqueItems: true
        ownerId:
          type: string
        status:
          enum:
          - OPEN
          - ACKNOWLEDGED
          - OVERRIDDEN
          - SELECTED
          - CONFIRMED
          type: string
      type: object
    ApiLicenseThreatDTOV2:
      properties:
        licenseThreatGroupCategory:
          type: string
        licenseThreatGroupLevel:
          format: int32
          type: integer
        licenseThreatGroupName:
          type: string
      type: object
    ApiLicensedSolutionDTO:
      properties:
        id:
          type: string
        url:
          type: string
      type: object
    ApiMailConfigurationDTO:
      properties:
        hostname:
          type: string
        password:
          type: string
        passwordIsIncluded:
          type: boolean
        port:
          format: int32
          type: integer
        sslEnabled:
          type: boolean
        startTlsEnabled:
          type: boolean
        systemEmail:
          type: string
        username:
          type: string
      type: object
    ApiMalwareComponentEvaluationRequest:
      properties:
        hash:
          type: string
        packageUrl:
          type: string
      type: object
    ApiMalwareComponentEvaluationRequestList:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiMalwareComponentEvaluationRequest'
          type: array
        format:
          type: string
      type: object
    ApiMatchStateSummaryDTOV2:
      properties:
        knownComponentCount:
          format: int32
          type: integer
        totalComponentCount:
          format: int32
          type: integer
      type: object
    ApiMemberDTO:
      properties:
        ownerId:
          type: string
        ownerType:
          type: string
        type:
          enum:
          - USER
          - GROUP
          type: string
        userOrGroupName:
          type: string
      type: object
    ApiMetricsReportingAggregationDTOV2:
      properties:
        discoveredCounts:
          additionalProperties:
            additionalProperties:
              format: int32
              type: integer
            type: object
          type: object
        evaluationCount:
          format: int32
          type: integer
        fixedCounts:
          additionalProperties:
            additionalProperties:
              format: int32
              type: integer
            type: object
          type: object
        mttrCriticalThreat:
          format: int64
          type: integer
        mttrLowThreat:
          format: int64
          type: integer
        mttrModerateThreat:
          format: int64
          type: integer
        mttrSevereThreat:
          format: int64
          type: integer
        openCountsAtTimePeriodEnd:
          additionalProperties:
            additionalProperties:
              format: int32
              type: integer
            type: object
          type: object
        timePeriodStart:
          type: string
        waivedCounts:
          additionalProperties:
            additionalProperties:
              format: int32
              type: integer
            type: object
          type: object
      type: object
    ApiMetricsReportingDTOV2:
      properties:
        aggregations:
          items:
            $ref: '#/components/schemas/ApiMetricsReportingAggregationDTOV2'
          type: array
        applicationId:
          type: string
        applicationName:
          type: string
        applicationPublicId:
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
      type: object
    ApiMetricsReportingQueryDTOV2:
      properties:
        applicationIds:
          items:
            type: string
          type: array
          uniqueItems: true
        firstTimePeriod:
          type: string
        lastTimePeriod:
          type: string
        organizationIds:
          items:
            type: string
          type: array
          uniqueItems: true
        timePeriod:
          enum:
          - WEEK
          - MONTH
          type: string
      type: object
    ApiMoveApplicationResponseDTOV2:
      properties:
        errors:
          items:
            type: string
          type: array
        warnings:
          items:
            type: string
          type: array
      type: object
    ApiOrganizationDTO:
      properties:
        id:
          type: string
        name:
          type: string
        parentOrganizationId:
          type: string
        tags:
          items:
            $ref: '#/components/schemas/ApiTagDTO'
          type: array
      type: object
    ApiOrganizationListDTO:
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/ApiOrganizationDTO'
          type: array
      type: object
    ApiOwnerArtifactoryConnectionDTO:
      properties:
        artifactoryConnection:
          $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
        artifactoryConnectionStatus:
          $ref: '#/components/schemas/ApiArtifactoryConnectionStatusResponseDTO'
        ownerDTO:
          $ref: '#/components/schemas/ApiOwnerDTO'
      type: object
    ApiOwnerDTO:
      properties:
        ownerId:
          type: string
        ownerName:
          type: string
        ownerPublicId:
          type: string
        ownerType:
          type: string
      type: object
    ApiPageResultPrioritizedComponent:
      description: Paginated response wrapper
      properties:
        page:
          description: Current page number
          format: int32
          type: integer
        pageCount:
          description: Total number of pages
          format: int64
          type: integer
        pageSize:
          description: Number of items per page
          format: int32
          type: integer
        results:
          description: List of items for the current page
          items:
            $ref: '#/components/schemas/PrioritizedComponent'
          type: array
        total:
          description: Total number of items
          format: int64
          type: integer
      type: object
    ApiPolicyDTO:
      properties:
        id:
          type: string
        name:
          type: string
        ownerId:
          type: string
        ownerType:
          enum:
          - APPLICATION
          - ORGANIZATION
          - REPOSITORY_CONTAINER
          - REPOSITORY_MANAGER
          - REPOSITORY
          type: string
        policyType:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiPolicyListDTO:
      properties:
        policies:
          items:
            $ref: '#/components/schemas/ApiPolicyDTO'
          type: array
      type: object
    ApiPolicyViolationDTOV2:
      properties:
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        fixTime:
          format: date-time
          type: string
        legacyViolationTime:
          format: date-time
          type: string
        openTime:
          format: date-time
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        threatLevel:
          format: int32
          type: integer
        waiveTime:
          format: date-time
          type: string
      type: object
    ApiPolicyViolationDiffDTO:
      properties:
        addedViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationForDiffDTO'
          type: array
          uniqueItems: true
        application:
          $ref: '#/components/schemas/ApiApplicationDTO'
        diffTime:
          format: date-time
          type: string
        fromCommit:
          $ref: '#/components/schemas/ApiApplicationEvaluationCommitDTO'
        removedViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationForDiffDTO'
          type: array
          uniqueItems: true
        sameViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationForDiffDTO'
          type: array
          uniqueItems: true
        toCommit:
          $ref: '#/components/schemas/ApiApplicationEvaluationCommitDTO'
      type: object
    ApiPolicyViolationForDiffDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        fixTime:
          format: date-time
          type: string
        legacyViolationTime:
          format: date-time
          type: string
        openTime:
          format: date-time
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        threatLevel:
          format: int32
          type: integer
        waiveTime:
          format: date-time
          type: string
      type: object
    ApiPolicyViolationStageDTO:
      properties:
        componentPolicyViolations:
          items:
            $ref: '#/components/schemas/ApiComponentPolicyViolationDTO'
          type: array
        stageId:
          type: string
      type: object
    ApiPolicyWaiverDTO:
      properties:
        associatedPackageUrl:
          type: string
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        componentName:
          type: string
        componentUpgradeAvailable:
          type: boolean
        constraintFacts:
          items:
            $ref: '#/components/schemas/ConstraintFact'
          type: array
        constraintFactsJson:
          type: string
        createTime:
          format: date-time
          type: string
        creatorId:
          type: string
        creatorName:
          type: string
        displayName:
          $ref: '#/components/schemas/ComponentDisplayName'
        expireWhenRemediationAvailable:
          type: boolean
        expiryTime:
          format: date-time
          type: string
        forContainerImage:
          type: boolean
        forContainerImageComponent:
          type: boolean
        hash:
          type: string
        isObsolete:
          type: boolean
        matcherStrategy:
          enum:
          - DEFAULT
          - EXACT_COMPONENT
          - ALL_COMPONENTS
          - ALL_VERSIONS
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        policyWaiverId:
          type: string
        policyWaiverReasonId:
          type: string
        reasonText:
          type: string
        scopeOwnerId:
          type: string
        scopeOwnerName:
          type: string
        scopeOwnerType:
          type: string
        threatLevel:
          format: int32
          type: integer
        vulnerabilityId:
          type: string
      type: object
    ApiPolicyWaiverReasonDTO:
      properties:
        id:
          type: string
        reasonText:
          type: string
        type:
          type: string
      type: object
    ApiPolicyWaiverRequestDTO:
      properties:
        associatedPackageUrl:
          type: string
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        componentName:
          type: string
        componentUpgradeAvailable:
          type: boolean
        constraintFacts:
          items:
            $ref: '#/components/schemas/ConstraintFact'
          type: array
        constraintFactsJson:
          type: string
        displayName:
          $ref: '#/components/schemas/ComponentDisplayName'
        expireWhenRemediationAvailable:
          type: boolean
        expiryTime:
          format: date-time
          type: string
        hash:
          type: string
        isObsolete:
          type: boolean
        matcherStrategy:
          enum:
          - DEFAULT
          - EXACT_COMPONENT
          - ALL_COMPONENTS
          - ALL_VERSIONS
          type: string
        noteToReviewer:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        policyWaiverReasonId:
          type: string
        policyWaiverRequestId:
          type: string
        reasonText:
          type: string
        rejectionReason:
          type: string
        requestTime:
          format: date-time
          type: string
        requesterId:
          type: string
        requesterName:
          type: string
        reviewerId:
          type: string
        reviewerName:
          type: string
        scopeOwnerId:
          type: string
        scopeOwnerName:
          type: string
        scopeOwnerType:
          type: string
        status:
          type: string
        threatLevel:
          format: int32
          type: integer
        vulnerabilityId:
          type: string
      type: object
    ApiPolicyWaiverRequestOptionsDTO:
      properties:
        comment:
          type: string
        expireWhenRemediationAvailable:
          type: boolean
        expiryTime:
          format: date-time
          type: string
        matcherStrategy:
          enum:
          - DEFAULT
          - EXACT_COMPONENT
          - ALL_COMPONENTS
          - ALL_VERSIONS
          type: string
        noteToReviewer:
          type: string
        waiverReasonId:
          type: string
      type: object
    ApiPolicyWaiverRequestReviewDTO:
      properties:
        comment:
          type: string
        expireWhenRemediationAvailable:
          type: boolean
        expiryTime:
          format: date-time
          type: string
        matcherStrategy:
          enum:
          - DEFAULT
          - EXACT_COMPONENT
          - ALL_COMPONENTS
          - ALL_VERSIONS
          type: string
        rejectionReason:
          type: string
        status:
          type: string
        waiverReasonId:
          type: string
      type: object
    ApiPolicyWaiverRequestsApplicableToViolationDTO:
      properties:
        activeWaiverRequests:
          items:
            $ref: '#/components/schemas/ApiPolicyWaiverRequestDTO'
          type: array
        expiredWaiverRequests:
          items:
            $ref: '#/components/schemas/ApiPolicyWaiverRequestDTO'
          type: array
      type: object
    ApiPolicyWaiversApplicableToViolationDTO:
      properties:
        activeWaivers:
          items:
            $ref: '#/components/schemas/ApiPolicyWaiverDTO'
          type: array
        expiredWaivers:
          items:
            $ref: '#/components/schemas/ApiPolicyWaiverDTO'
          type: array
      type: object
    ApiPromoteScanRequestDTOV2:
      properties:
        scanId:
          type: string
        sourceStageId:
          type: string
        targetStageId:
          type: string
      type: object
    ApiProxyServerConfigurationDTO:
      properties:
        excludeHosts:
          items:
            type: string
          type: array
        hostname:
          type: string
        password:
          type: string
        passwordIsIncluded:
          type: boolean
        port:
          format: int32
          type: integer
        username:
          type: string
      type: object
    ApiPullRequestResult:
      properties:
        exceptionThrown:
          type: boolean
        reasoning:
          type: string
        startTime:
          format: date-time
          type: string
        successful:
          type: boolean
        title:
          type: string
        totalTime:
          format: int64
          type: integer
      type: object
    ApiPullRequestResults:
      properties:
        results:
          items:
            $ref: '#/components/schemas/ApiPullRequestResult'
          type: array
      type: object
    ApiReportComponentDTOV2:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        cpe:
          type: string
        dependencyData:
          $ref: '#/components/schemas/ApiDependencyDataDTO'
        displayName:
          type: string
        filenames:
          items:
            type: string
          type: array
        hash:
          type: string
        identificationSource:
          type: string
        licenseData:
          $ref: '#/components/schemas/ApiLicenseDataDTOV2'
        matchState:
          type: string
        packageUrl:
          type: string
        pathnames:
          items:
            type: string
          type: array
        proprietary:
          type: boolean
        securityData:
          $ref: '#/components/schemas/ApiSecurityDataDTO'
        sha256:
          type: string
        swid:
          $ref: '#/components/schemas/Swid'
        thirdParty:
          type: boolean
      type: object
    ApiReportComponentPolicyViolationsDTOV2:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        dependencyData:
          $ref: '#/components/schemas/ApiDependencyDataDTO'
        displayName:
          type: string
        hash:
          type: string
        matchState:
          type: string
        packageUrl:
          type: string
        pathnames:
          items:
            type: string
          type: array
        proprietary:
          type: boolean
        sha256:
          type: string
        thirdParty:
          type: boolean
        violations:
          items:
            $ref: '#/components/schemas/ApiReportPolicyViolationDTOV2'
          type: array
      type: object
    ApiReportConstraintConditionDTOV2:
      properties:
        conditionReason:
          type: string
        conditionSummary:
          type: string
      type: object
    ApiReportConstraintViolationDTOV2:
      properties:
        conditions:
          items:
            $ref: '#/components/schemas/ApiReportConstraintConditionDTOV2'
          type: array
        constraintId:
          type: string
        constraintName:
          type: string
      type: object
    ApiReportHistoryDTO:
      properties:
        applicationId:
          type: string
        reports:
          items:
            $ref: '#/components/schemas/ApiReportResultsDTO'
          type: array
      type: object
    ApiReportPolicyDataDTOV2:
      properties:
        application:
          $ref: '#/components/schemas/ApiApplicationBaseDTO'
        commitHash:
          type: string
        components:
          items:
            $ref: '#/components/schemas/ApiReportComponentPolicyViolationsDTOV2'
          type: array
        counts:
          additionalProperties:
            format: int32
            type: integer
          type: object
        initiator:
          type: string
        reportTime:
          format: date-time
          type: string
        reportTitle:
          type: string
      type: object
    ApiReportPolicyViolationDTOV2:
      properties:
        constraints:
          items:
            $ref: '#/components/schemas/ApiReportConstraintViolationDTOV2'
          type: array
        fixTime:
          format: date-time
          type: string
        grandfathered:
          type: boolean
        legacyViolation:
          type: boolean
        legacyViolationTime:
          format: date-time
          type: string
        openTime:
          format: date-time
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyThreatCategory:
          type: string
        policyThreatLevel:
          format: int32
          type: integer
        policyViolationId:
          type: string
        waiveTime:
          format: date-time
          type: string
        waived:
          type: boolean
        waivedWithAutoWaiver:
          type: boolean
      type: object
    ApiReportRawDataDTOV2:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiReportComponentDTOV2'
          type: array
        globalInformation:
          $ref: '#/components/schemas/ApiGlobalInformationDTOV2'
        matchSummary:
          $ref: '#/components/schemas/ApiMatchStateSummaryDTOV2'
      type: object
    ApiReportResultsDTO:
      properties:
        applicationId:
          type: string
        commitHash:
          type: string
        embeddableReportHtmlUrl:
          type: string
        evaluationDate:
          format: date-time
          type: string
        isForMonitoring:
          type: boolean
        isReevaluation:
          type: boolean
        latestReportHtmlUrl:
          type: string
        policyEvaluationId:
          type: string
        policyEvaluationResult:
          $ref: '#/components/schemas/PolicyEvaluationResult'
        reportDataUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportPdfUrl:
          type: string
        scanId:
          type: string
        scanTriggerInternal:
          type: boolean
        scanTriggerType:
          type: string
        scanTriggerTypeDisplayName:
          type: string
        scannerVersion:
          type: string
        stage:
          type: string
      type: object
    ApiReportRetentionPoliciesDTO:
      properties:
        stages:
          additionalProperties:
            $ref: '#/components/schemas/ApiReportRetentionPolicyDTO'
          type: object
      type: object
    ApiReportRetentionPolicyDTO:
      properties:
        enablePurging:
          type: boolean
        inheritPolicy:
          type: boolean
        maxAge:
          type: string
        maxCount:
          format: int32
          type: integer
      type: object
    ApiRepositoryComponentDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        packageUrl:
          type: string
        quarantineId:
          type: string
        quarantineReleaseTime:
          format: date-time
          type: string
        quarantineTime:
          format: date-time
          type: string
        sha256:
          type: string
        thirdParty:
          type: boolean
      type: object
    ApiRepositoryComponentEvaluationRequest:
      properties:
        hash:
          type: string
        packageUrl:
          type: string
        pathname:
          type: string
      type: object
    ApiRepositoryComponentEvaluationRequestList:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentEvaluationRequest'
          type: array
        format:
          type: string
      type: object
    ApiRepositoryComponentEvaluationResult:
      properties:
        catalogDate:
          format: date-time
          type: string
        component:
          $ref: '#/components/schemas/ApiRepositoryComponentEvaluationRequest'
        policyViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationDTOV2'
          type: array
        quarantineDate:
          format: date-time
          type: string
        quarantined:
          type: boolean
      type: object
    ApiRepositoryComponentEvaluationResultList:
      properties:
        repositoryId:
          type: string
        repositoryManagerId:
          type: string
        repositoryPublicId:
          type: string
        repositoryType:
          type: string
        results:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentEvaluationResult'
          type: array
      type: object
    ApiRepositoryComponentPath:
      properties:
        pathname:
          type: string
        quarantine:
          type: boolean
      type: object
    ApiRepositoryComponentPolicyViolationDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiRepositoryComponentDTO'
        policyViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationDTOV2'
          type: array
        waivedPolicyViolations:
          items:
            $ref: '#/components/schemas/ApiWaivedPolicyViolationDTO'
          type: array
      type: object
    ApiRepositoryComponentsInQuarantineDTO:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentPolicyViolationDTO'
          type: array
        repository:
          $ref: '#/components/schemas/ApiRepositoryDTO'
      type: object
    ApiRepositoryContainerDTO:
      properties:
        id:
          type: string
        name:
          type: string
        relatedOrganizationId:
          type: string
      type: object
    ApiRepositoryDTO:
      properties:
        auditEnabled:
          type: boolean
        format:
          type: string
        namespaceConfusionProtectionEnabled:
          type: boolean
        policyCompliantComponentSelectionEnabled:
          type: boolean
        publicId:
          type: string
        quarantineEnabled:
          type: boolean
        repositoryId:
          type: string
        type:
          type: string
      type: object
    ApiRepositoryListDTO:
      properties:
        repositories:
          items:
            $ref: '#/components/schemas/ApiRepositoryDTO'
          type: array
      type: object
    ApiRepositoryManagerDTO:
      properties:
        id:
          type: string
        instanceId:
          type: string
        name:
          type: string
        productName:
          type: string
        productVersion:
          type: string
      type: object
    ApiRepositoryManagerListDTO:
      properties:
        repositoryManagers:
          items:
            $ref: '#/components/schemas/ApiRepositoryManagerDTO'
          type: array
      type: object
    ApiRepositoryPathResponseDTO:
      properties:
        pathVersions:
          items:
            $ref: '#/components/schemas/ApiRepositoryPathVersions'
          type: array
      type: object
    ApiRepositoryPathVersions:
      properties:
        repositoryComponentPaths:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentPath'
          type: array
        requestIndex:
          format: int32
          type: integer
      type: object
    ApiRepositoryWaiverDTO:
      properties:
        repository:
          $ref: '#/components/schemas/ApiRepositoryDTO'
        stages:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationStageDTO'
          type: array
      type: object
    ApiRequestPolicyWaiverDTO:
      properties:
        addWaiverLink:
          type: string
        comment:
          type: string
        policyViolationLink:
          type: string
        reasonId:
          type: string
      type: object
    ApiReverseProxyAuthenticationConfigurationDTO:
      properties:
        csrfProtectionDisabled:
          type: boolean
        enabled:
          type: boolean
        logoutUrl:
          type: string
        usernameHeader:
          type: string
      type: object
    ApiRoleDTO:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    ApiRoleListDTO:
      properties:
        roles:
          items:
            $ref: '#/components/schemas/ApiRoleDTO'
          type: array
      type: object
    ApiRoleMemberMappingDTO:
      properties:
        members:
          items:
            $ref: '#/components/schemas/ApiMemberDTO'
          type: array
        roleId:
          type: string
      type: object
    ApiRoleMemberMappingListDTO:
      properties:
        memberMappings:
          items:
            $ref: '#/components/schemas/ApiRoleMemberMappingDTO'
          type: array
      type: object
    ApiSamlConfigurationDTO:
      description: Enter the SAML configuration<ul><li>`identityProviderName` the
        name of the Identity Provider that is displayed on the login page when SAML
        is configured.</li><li>`entityId` is the URI that IQ Server uses to identify
        itself in requests to the SSOservice.</li><li>`firstNameAttribute` is the
        SAML attribute that IQ Server extracts from the login response of the identity
        provider and uses as the user's first name.</li><li>`lastNameAttribute` is
        the SAML attribute that IQ Server extracts from the login response of the
        identity provider and uses as the user's last name.</li><li>`emailAttributeName`
        is the SAML attribute that IQ Server extracts from the login response of the
        identity provider to determine the user's email address.</li><li>`usernameAttributeName`
        is the SAML attribute that IQ Server extracts from the login response of the
        identity provider to determine the username or id.</li><li>`groupAttributeName`
        is the SAML attribute that IQ Server extracts from the login response of the
        identity provider to determine the groups the user belongs to.</li><li>`validateResponseSignature`
        indicates whether the SAML responses from the identity provider  are cryptographically
        signed. A `null` value indicates that this setting is derived from the SAML
        metadata from the identity provider performing signature validation if a signing
        key (`KeyDescriptor`) is included.<li>`validateAssertionSignature` indicates
        whether the SAML assertions from the identity provider  are cryptographically
        signed. A `null` value indicates that this setting is derived from  the SAML
        metadata from the identity provider performing signature validation if a signing
        key (`KeyDescriptor`) is included.</li><li>`identityProviderMetadataXml` is
        the metadata of the identity provider.</li></ul>
      properties:
        emailAttributeName:
          type: string
        entityId:
          type: string
        firstNameAttributeName:
          type: string
        groupsAttributeName:
          type: string
        identityProviderName:
          type: string
        lastNameAttributeName:
          type: string
        usernameAttributeName:
          type: string
        validateAssertionSignature:
          type: boolean
        validateResponseSignature:
          type: boolean
      type: object
    ApiSamlConfigurationResponseDTO:
      properties:
        emailAttributeName:
          type: string
        entityId:
          type: string
        firstNameAttributeName:
          type: string
        groupsAttributeName:
          type: string
        identityProviderMetadataXml:
          type: string
        identityProviderName:
          type: string
        lastNameAttributeName:
          type: string
        usernameAttributeName:
          type: string
        validateAssertionSignature:
          type: boolean
        validateResponseSignature:
          type: boolean
      type: object
    ApiSearchCriteriaDTOV2:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        hash:
          type: string
        packageUrl:
          type: string
        stageId:
          type: string
      type: object
    ApiSearchResultDTOV2:
      properties:
        applicationId:
          type: string
        applicationName:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        dependencyData:
          $ref: '#/components/schemas/ApiDependencyDataDTO'
        hash:
          type: string
        packageUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportUrl:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiSearchResultsDTOV2:
      properties:
        criteria:
          $ref: '#/components/schemas/ApiSearchCriteriaDTOV2'
        results:
          items:
            $ref: '#/components/schemas/ApiSearchResultDTOV2'
          type: array
      type: object
    ApiSecurityDataDTO:
      properties:
        securityIssues:
          items:
            $ref: '#/components/schemas/ApiSecurityIssueDTO'
          type: array
      type: object
    ApiSecurityIssueAnalysisDTO:
      properties:
        detail:
          type: string
        justification:
          type: string
        response:
          type: string
        state:
          type: string
      type: object
    ApiSecurityIssueDTO:
      properties:
        analysis:
          $ref: '#/components/schemas/ApiSecurityIssueAnalysisDTO'
        cvssVector:
          type: string
        cvssVectorSource:
          type: string
        cwe:
          type: string
        reference:
          type: string
        severity:
          format: float
          type: number
        source:
          type: string
        status:
          type: string
        threatCategory:
          type: string
        url:
          type: string
      type: object
    ApiSecurityVulnerabilityOverrideDTOV2:
      properties:
        comment:
          type: string
        currentlyAffectedComponents:
          items:
            $ref: '#/components/schemas/ApiComponentDTOV2'
          type: array
        hash:
          type: string
        owner:
          $ref: '#/components/schemas/ApiOwnerDTO'
        referenceId:
          type: string
        securityOverrideId:
          type: string
        status:
          type: string
      type: object
    ApiSecurityVulnerabilityOverrideResponseDTOV2:
      properties:
        securityOverrides:
          items:
            $ref: '#/components/schemas/ApiSecurityVulnerabilityOverrideDTOV2'
          type: array
      type: object
    ApiSourceControlConfigurationDTO:
      properties:
        cloneDirectory:
          type: string
        commitEmail:
          type: string
        commitUsername:
          type: string
        defaultBranchMonitoringIntervalHours:
          format: int32
          type: integer
        defaultBranchMonitoringStartTime:
          type: string
        gitExecutable:
          type: string
        gitImplementation:
          enum:
          - native
          - java
          type: string
        gitTimeoutSeconds:
          format: int32
          type: integer
        prCommentPurgeWindow:
          format: int32
          type: integer
        prEventPurgeWindow:
          format: int32
          type: integer
        pullRequestMonitoringIntervalSeconds:
          format: int32
          type: integer
        useUsernameInRepositoryCloneUrl:
          type: boolean
      type: object
    ApiSourceControlDTO:
      properties:
        baseBranch:
          type: string
        closePrAfterDays:
          format: int32
          type: integer
        closePrAfterDaysOpenEnabled:
          type: boolean
        closePrOnFailedChecksEnabled:
          type: boolean
        commitStatusEnabled:
          type: boolean
        enablePullRequests:
          type: boolean
        enableStatusChecks:
          type: boolean
        id:
          type: string
        innerSourceAutomatedUpdatesEnabled:
          type: boolean
        manualPullRequestsEnabled:
          type: boolean
        ownerId:
          type: string
        provider:
          type: string
        pullRequestCommentingEnabled:
          type: boolean
        remediationPullRequestsEnabled:
          type: boolean
        repositoryUrl:
          type: string
        sourceControlEvaluationsEnabled:
          type: boolean
        sourceControlScanTarget:
          type: string
        sshEnabled:
          type: boolean
        statusChecksEnabled:
          type: boolean
        token:
          type: string
        username:
          type: string
      type: object
    ApiSourceControlEvaluationRequestDTO:
      properties:
        branchName:
          type: string
        scanTargets:
          items:
            type: string
          type: array
        stageId:
          type: string
      type: object
    ApiStagePolicyViolationComponentDTO:
      properties:
        action:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        packageUrl:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        threatCategory:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiStaleApplicationEvaluationDTO:
      properties:
        application:
          $ref: '#/components/schemas/ApiApplicationBaseDTO'
        stages:
          items:
            $ref: '#/components/schemas/ApiStaleEvaluationStageDTO'
          type: array
      type: object
    ApiStaleEvaluationStageDTO:
      properties:
        lastEvaluationDate:
          format: date-time
          type: string
        stageId:
          type: string
      type: object
    ApiStaleEvaluationsDTO:
      properties:
        applications:
          items:
            $ref: '#/components/schemas/ApiStaleApplicationEvaluationDTO'
          type: array
        repositories:
          items:
            $ref: '#/components/schemas/ApiStaleRepositoryEvaluationDTO'
          type: array
      type: object
    ApiStaleRepositoryEvaluationDTO:
      properties:
        repository:
          $ref: '#/components/schemas/ApiRepositoryDTO'
        stages:
          items:
            $ref: '#/components/schemas/ApiStaleEvaluationStageDTO'
          type: array
      type: object
    ApiStaleWaiverDTO:
      properties:
        comment:
          type: string
        constraintFacts:
          items:
            $ref: '#/components/schemas/ApiConstraintFactDTO'
          type: array
        createTime:
          format: date-time
          type: string
        creatorId:
          type: string
        creatorName:
          type: string
        expiryTime:
          format: date-time
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyWaiverReasonId:
          type: string
        reasonText:
          type: string
        scopeOwnerId:
          type: string
        scopeOwnerName:
          type: string
        scopeOwnerType:
          type: string
        staleEvaluations:
          $ref: '#/components/schemas/ApiStaleEvaluationsDTO'
        waiverId:
          type: string
      type: object
    ApiStaleWaiversResponseDTO:
      properties:
        staleWaivers:
          items:
            $ref: '#/components/schemas/ApiStaleWaiverDTO'
          type: array
      type: object
    ApiStatusDTO:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      type: object
    ApiSuccessMetricsRetentionPolicyDTO:
      properties:
        enablePurging:
          type: boolean
        inheritPolicy:
          type: boolean
        maxAge:
          type: string
      type: object
    ApiSuggestedVersionChangeOptionDTO:
      properties:
        data:
          $ref: '#/components/schemas/ApiComponentChangeActionDTO'
        directDependency:
          type: boolean
        directDependencyData:
          items:
            $ref: '#/components/schemas/ApiComponentChangeActionDTO'
          type: array
        isGolden:
          type: boolean
        type:
          enum:
          - next-no-violations
          - next-non-failing
          - next-no-violations-with-dependencies
          - next-non-failing-with-dependencies
          - inner-source-latest-non-breaking
          - inner-source-latest
          - recommended-non-breaking
          - recommended-non-breaking-with-dependencies
          type: string
      type: object
    ApiTagDTO:
      properties:
        color:
          enum:
          - white
          - grey
          - black
          - green
          - yellow
          - orange
          - red
          - blue
          - light-red
          - light-green
          - light-blue
          - light-purple
          - dark-red
          - dark-green
          - dark-blue
          - dark-purple
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    ApiThirdPartyScanResultDTO:
      properties:
        componentsAffected:
          $ref: '#/components/schemas/ApiEvaluationResultCounterDTO'
        embeddableReportHtmlUrl:
          type: string
        errorMessage:
          type: string
        grandfatheredPolicyViolations:
          format: int32
          type: integer
        isError:
          type: boolean
        legacyViolations:
          format: int32
          type: integer
        openPolicyViolations:
          $ref: '#/components/schemas/ApiEvaluationResultCounterDTO'
        policyAction:
          type: string
        reportDataUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportPdfUrl:
          type: string
      type: object
    ApiThirdPartyScanTicketDTO:
      properties:
        statusUrl:
          type: string
      type: object
    ApiUserDTO:
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        realm:
          type: string
        username:
          type: string
      type: object
    ApiUserListDTO:
      properties:
        users:
          items:
            $ref: '#/components/schemas/ApiUserDTO'
          type: array
      type: object
    ApiUserTokenDTO:
      properties:
        passCode:
          type: string
        realm:
          type: string
        userCode:
          type: string
        username:
          type: string
      type: object
    ApiUserTokenExistsDTO:
      properties:
        userTokenExists:
          type: boolean
      type: object
    ApiVersionChangeOptionDTO:
      properties:
        data:
          $ref: '#/components/schemas/ApiComponentChangeActionDTO'
        directDependency:
          type: boolean
        directDependencyData:
          items:
            $ref: '#/components/schemas/ApiComponentChangeActionDTO'
          type: array
        type:
          enum:
          - next-no-violations
          - next-non-failing
          - next-no-violations-with-dependencies
          - next-non-failing-with-dependencies
          - inner-source-latest-non-breaking
          - inner-source-latest
          - recommended-non-breaking
          - recommended-non-breaking-with-dependencies
          type: string
      type: object
    ApiWaivedPolicyViolationDTO:
      properties:
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        fixTime:
          format: date-time
          type: string
        legacyViolationTime:
          format: date-time
          type: string
        openTime:
          format: date-time
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        policyWaiver:
          $ref: '#/components/schemas/ApiPolicyWaiverDTO'
        threatLevel:
          format: int32
          type: integer
        waiveTime:
          format: date-time
          type: string
      type: object
    ApiWaiverOptionsDTO:
      properties:
        applyToAllComponents:
          type: boolean
        comment:
          type: string
        expireWhenRemediationAvailable:
          type: boolean
        expiryTime:
          format: date-time
          type: string
        matcherStrategy:
          enum:
          - DEFAULT
          - EXACT_COMPONENT
          - ALL_COMPONENTS
          - ALL_VERSIONS
          type: string
        waiverReasonId:
          type: string
      type: object
    ApiZScalerConfigurationDTO:
      properties:
        apiKey:
          type: string
        eulaAgreed:
          type: boolean
        hostname:
          type: string
        mavenFormatEnabled:
          type: boolean
        npmFormatEnabled:
          type: boolean
        nugetFormatEnabled:
          type: boolean
        password:
          type: string
        pypiFormatEnabled:
          type: boolean
        username:
          type: string
      type: object
    ApiZScalerQuotaDTO:
      properties:
        remainingUrls:
          format: int32
          type: integer
        status:
          type: string
        totalAllowedUrls:
          format: int32
          type: integer
      type: object
    ApplicableContext:
      properties:
        children:
          items:
            $ref: '#/components/schemas/ApplicableContext'
          type: array
        id:
          type: string
        name:
          type: string
        type:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    ApplicableLabels:
      properties:
        labelsByOwner:
          items:
            $ref: '#/components/schemas/LabelsByOwner'
          type: array
      type: object
    ApplicableTagsDTO:
      properties:
        applicationCategoriesByOwner:
          items:
            $ref: '#/components/schemas/TagsByOwnerDTO'
          type: array
      type: object
    ApplicationTag:
      properties:
        applicationId:
          type: string
        id:
          type: string
        tagId:
          type: string
      type: object
    ApplicationTagsByOwnerDTO:
      properties:
        applicationTags:
          items:
            $ref: '#/components/schemas/ApplicationTag'
          type: array
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    AppliedTagsDTO:
      properties:
        applicationTagsByOwner:
          items:
            $ref: '#/components/schemas/ApplicationTagsByOwnerDTO'
          type: array
      type: object
    AttachmentText:
      properties:
        content:
          type: string
        contentType:
          type: string
        encoding:
          type: string
      type: object
    AttributionReportTemplateDTO:
      properties:
        documentTitle:
          type: string
        footer:
          type: string
        header:
          type: string
        id:
          type: string
        includeAppendix:
          type: boolean
        includeInnerSource:
          type: boolean
        includeSonatypeSpecialLicenses:
          type: boolean
        includeStandardLicenseTexts:
          type: boolean
        includeTableOfContents:
          type: boolean
        lastUpdatedAt:
          format: date-time
          type: string
        templateName:
          type: string
      type: object
    BulkSecurityVulnerabilityDataDTO:
      properties:
        vulnerabilities:
          additionalProperties:
            $ref: '#/components/schemas/SecurityVulnerabilityData'
          type: object
      type: object
    ComponentDisplayName:
      properties:
        name:
          type: string
        parts:
          items:
            $ref: '#/components/schemas/ComponentDisplayNamePart'
          type: array
      type: object
    ComponentDisplayNamePart:
      properties:
        field:
          type: string
        value:
          type: string
      type: object
    ComponentFact:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ComponentIdentifier'
        constraintFacts:
          items:
            $ref: '#/components/schemas/ConstraintFact'
          type: array
        displayName:
          $ref: '#/components/schemas/ComponentDisplayName'
        hash:
          type: string
        pathnames:
          items:
            type: string
          type: array
      type: object
    ComponentIdentifier:
      properties:
        coordinates:
          additionalProperties:
            type: string
          type: object
        format:
          type: string
      type: object
    ComponentObligationAttributionDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        content:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        lastUpdatedByUsername:
          type: string
        obligationName:
          type: string
        ownerId:
          type: string
        packageUrl:
          type: string
      type: object
    ConditionFact:
      properties:
        conditionIndex:
          format: int32
          type: integer
        conditionTypeId:
          type: string
        reason:
          type: string
        reference:
          $ref: '#/components/schemas/TriggerReference'
        summary:
          type: string
        triggerJson:
          type: string
      type: object
    ConfigurationValidationResult:
      properties:
        configurationComplete:
          $ref: '#/components/schemas/ValidationResult'
        repoPrivate:
          $ref: '#/components/schemas/ValidationResult'
        repoPublic:
          $ref: '#/components/schemas/ValidationResult'
        sshConfiguration:
          $ref: '#/components/schemas/ValidationResult'
        tokenPermissions:
          $ref: '#/components/schemas/ValidationResult'
      type: object
    ConstraintFact:
      properties:
        conditionFacts:
          items:
            $ref: '#/components/schemas/ConditionFact'
          type: array
        constraintId:
          type: string
        constraintName:
          type: string
        operatorName:
          type: string
      type: object
    ContainerImageInQuarantineData:
      description: List of items for the current page
      properties:
        applicationId:
          type: string
        applicationName:
          type: string
        applicationPublicId:
          type: string
        openTime:
          format: date-time
          type: string
        policyViolationCount:
          format: int64
          type: integer
        repositoryId:
          type: string
        repositoryPublicId:
          type: string
        scanId:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ContainerImageInQuarantineDataResult:
      properties:
        page:
          description: Current page number
          format: int32
          type: integer
        pageCount:
          description: Total number of pages
          format: int64
          type: integer
        pageSize:
          description: Number of items per page
          format: int32
          type: integer
        results:
          description: List of items for the current page
          items:
            $ref: '#/components/schemas/ContainerImageInQuarantineData'
          type: array
        total:
          description: Total number of items
          format: int64
          type: integer
      type: object
    CpeMatchingConfigurationRequest:
      properties:
        allowOverride:
          type: boolean
        enabled:
          type: boolean
      type: object
    CweId:
      properties:
        id:
          type: string
        uri:
          format: uri
          type: string
      type: object
    CweIdDTO:
      properties:
        id:
          type: string
        uri:
          format: uri
          type: string
      type: object
    DevelopmentPrioritizationResults:
      properties:
        hasAutoWaiversConfigured:
          type: boolean
        priorities:
          $ref: '#/components/schemas/ApiPageResultPrioritizedComponent'
        scanIdFromLatestBuildStageEvaluation:
          type: string
      type: object
    EpssData:
      properties:
        currentScore:
          format: double
          type: number
    GroupingByDTO:
      properties:
        additionalInfo:
          type: string
        groupBy:
          type: string
        groupIdentifier:
          enum:
          - itemType
          - organizationId
          - organizationName
          - applicationId
          - applicationName
          - applicationPublicId
          - policyEvaluationStage
          - applicationVersion
          - reportId
          - componentHash
          - componentFormat
          - componentName
          - componentCoordinate
          - vulnerabilityId
          - vulnerabilitySeverity
          - vulnerabilityStatus
          - vulnerabilityDescription
          - applicationCategoryId
          - applicationCategoryName
          - applicationCategoryColor
          - applicationCategoryDescription
          - componentLabelId
          - componentLabelName
          - componentLabelColor
          - componentLabelDescription
          - policyId
          - policyName
          - policyThreatCategory
          - policyThreatLevel
          - parentOrganizationName
          - parentOrganizationId
          - sbomSpecification
          type: string
        searchResultItemDTOS:
          items:
            $ref: '#/components/schemas/SearchResultItemDTO'
          type: array
      type: object
    InnerSourceData:
      properties:
        innerSourceComponentPurl:
          type: string
        ownerApplicationId:
          type: string
        ownerApplicationName:
          type: string
      type: object
    KevData:
      properties:
        isKev:
          type: boolean
      type: object
    LabelsByOwner:
      properties:
        labels:
          items:
            $ref: '#/components/schemas/ApiLabelDTO'
          type: array
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    LegalSourceLinkDTO:
      properties:
        content:
          type: string
        id:
          type: string
        originalContent:
          type: string
        status:
          enum:
          - enabled
          - disabled
          type: string
      type: object
    LicenseObligationDTO:
      properties:
        name:
          type: string
        obligationTexts:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    LicenseOverride:
      properties:
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ComponentIdentifier'
        id:
          type: string
        licenseIds:
          items:
            type: string
          type: array
          uniqueItems: true
        ownerId:
          type: string
        status:
          enum:
          - OPEN
          - ACKNOWLEDGED
          - OVERRIDDEN
          - SELECTED
          - CONFIRMED
          type: string
      type: object
    LicenseOverrideByOwner:
      properties:
        licenseOverride:
          $ref: '#/components/schemas/LicenseOverride'
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    LicenseThreatGroupDTO:
      properties:
        name:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    MalwareCategory:
      properties:
        attackVector:
          type: string
        threatTypes:
          items:
            type: string
          type: array
      type: object
    MalwareDefenseData:
      properties:
        hash:
          type: string
        isMalicious:
          type: boolean
        malwareCategories:
          items:
            $ref: '#/components/schemas/MalwareCategory'
          type: array
        matchState:
          type: string
        packageUrl:
          type: string
      type: object
    MalwareDefenseResponseList:
      properties:
        componentList:
          items:
            $ref: '#/components/schemas/MalwareDefenseData'
          type: array
      type: object
    MoveOrganizationResponseDTO:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
        warnings:
          items:
            $ref: '#/components/schemas/ValidationWarning'
          type: array
      type: object
    PolicyAlert:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/Action'
          type: array
        trigger:
          $ref: '#/components/schemas/PolicyFact'
      type: object
    PolicyContainerWaiverData:
      description: List of items for the current page
      properties:
        applicationScope:
          type: string
        createTime:
          format: date-time
          type: string
        expiryTime:
          format: date-time
          type: string
        maxThreatLevel:
          format: int32
          type: integer
        ownerId:
          type: string
        policyWaiverId:
          type: string
        uniqueComponentCount:
          format: int64
          type: integer
        uniquePolicyCount:
          format: int64
          type: integer
      type: object
    PolicyContainerWaiverDataResult:
      properties:
        page:
          description: Current page number
          format: int32
          type: integer
        pageCount:
          description: Total number of pages
          format: int64
          type: integer
        pageSize:
          description: Number of items per page
          format: int32
          type: integer
        results:
          description: List of items for the current page
          items:
            $ref: '#/components/schemas/PolicyContainerWaiverData'
          type: array
        total:
          description: Total number of items
          format: int64
          type: integer
      type: object
    PolicyEvaluationResult:
      properties:
        affectedComponentCount:
          format: int32
          type: integer
        alerts:
          items:
            $ref: '#/components/schemas/PolicyAlert'
          type: array
        criticalComponentCount:
          format: int32
          type: integer
        criticalPolicyViolationCount:
          format: int32
          type: integer
        criticalSastPolicyViolationCount:
          format: int32
          type: integer
        grandfatheredPolicyViolationCount:
          format: int32
          type: integer
        legacyViolationCount:
          format: int32
          type: integer
        moderateComponentCount:
          format: int32
          type: integer
        moderatePolicyViolationCount:
          format: int32
          type: integer
        moderateSastPolicyViolationCount:
          format: int32
          type: integer
        sastAlerts:
          items:
            $ref: '#/components/schemas/PolicyAlert'
          type: array
        severeComponentCount:
          format: int32
          type: integer
        severePolicyViolationCount:
          format: int32
          type: integer
        severeSastPolicyViolationCount:
          format: int32
          type: integer
        totalComponentCount:
          format: int32
          type: integer
        totalSastFindingCount:
          format: int32
          type: integer
      type: object
    PolicyFact:
      properties:
        componentFacts:
          items:
            $ref: '#/components/schemas/ComponentFact'
          type: array
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    PolicyOwner:
      properties:
        ownerId:
          type: string
        ownerName:
          type: string
        ownerPublicId:
          type: string
        ownerType:
          type: string
      type: object
    PolicyTag:
      properties:
        id:
          type: string
        policyId:
          type: string
        tagId:
          type: string
      type: object
    PrioritizedComponent:
      description: List of items for the current page
      properties:
        action:
          type: string
        componentHash:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ComponentIdentifier'
        dependencyType:
          type: string
        displayName:
          type: string
        hasAutoWaiver:
          type: boolean
        hasExpiredWaiver:
          type: boolean
        hasFailActionOnComponent:
          type: boolean
        hasSameViolationsOnMain:
          type: boolean
        hasSoonToExpireWaiver:
          type: boolean
        highestReachableThreat:
          format: int32
          type: integer
        highestThreat:
          format: int32
          type: integer
        highestThreatPolicyConstraintName:
          type: string
        highestThreatPolicyName:
          type: string
        isAllViolationsWaived:
          type: boolean
        priority:
          format: int32
          type: integer
        remediationType:
          enum:
          - next-no-violations
          - next-non-failing
          - next-no-violations-with-dependencies
          - next-non-failing-with-dependencies
          - inner-source-latest-non-breaking
          - inner-source-latest
          - recommended-non-breaking
          - recommended-non-breaking-with-dependencies
          type: string
        remediationVersion:
          type: string
        securityReachable:
          type: boolean
        waivedViolationsCount:
          format: int32
          type: integer
        waiverExpirationDetails:
          type: string
      type: object
    ReferenceLink:
      properties:
        referenceType:
          type: string
        url:
          type: string
      type: object
    ReferenceLinkDTO:
      properties:
        referenceType:
          type: string
        url:
          type: string
      type: object
    RootCause:
      properties:
        listOfPaths:
          items:
            type: string
          type: array
        versionRange:
          type: string
      type: object
    RootCauseDTO:
      properties:
        listOfPaths:
          items:
            type: string
          type: array
        versionRange:
          type: string
      type: object
    SCMUserMappingsDTO:
      properties:
        mappings:
          items:
            $ref: '#/components/schemas/UserMapping'
          type: array
        role:
          type: string
      type: object
    SCMUserMappingsResponseDTO:
      properties:
        inherited:
          type: boolean
        ownerInternalId:
          type: string
        userMapping:
          $ref: '#/components/schemas/SCMUserMappingsDTO'
      type: object
    SCMUserMatchingResultDTO:
      properties:
        matchedUsers:
          items:
            type: string
          type: array
          uniqueItems: true
        successfulMapping:
          $ref: '#/components/schemas/UserMapping'
      type: object
    SearchResultDTO:
      properties:
        groupingByDTOS:
          items:
            $ref: '#/components/schemas/GroupingByDTO'
          type: array
        isExactTotalNumberOfHits:
          type: boolean
        page:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        searchAfter:
          items:
            type: string
          type: array
        searchQuery:
          type: string
        totalNumberOfHits:
          format: int64
          type: integer
      type: object
    SearchResultItemDTO:
      properties:
        applicationCategoryColor:
          type: string
        applicationCategoryDescription:
          type: string
        applicationCategoryId:
          type: string
        applicationCategoryName:
          type: string
        applicationId:
          type: string
        applicationName:
          type: string
        applicationPublicId:
          type: string
        applicationVersion:
          type: string
        componentHash:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        componentLabelColor:
          type: string
        componentLabelDescription:
          type: string
        componentLabelId:
          type: string
        componentLabelName:
          type: string
        componentName:
          type: string
        itemType:
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
        policyEvaluationStage:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyThreatCategory:
          type: string
        policyThreatLevel:
          format: int32
          type: integer
        reportId:
          type: string
        resultIndex:
          format: int32
          type: integer
        sbomSpecification:
          type: string
        vulnerabilityDescription:
          type: string
        vulnerabilityId:
          type: string
        vulnerabilityStatus:
          type: string
      type: object
    SecurityVulnerabilityCustomData:
      properties:
        cvssSeverity:
          format: float
          type: number
        cvssVector:
          type: string
        cweId:
          type: string
        remediation:
          type: string
      type: object
    SecurityVulnerabilityCustomDataDTO:
      properties:
        cvssSeverity:
          format: float
          type: number
        cvssVector:
          type: string
        cweId:
          type: string
        remediation:
          type: string
      type: object
    SecurityVulnerabilityData:
      properties:
        advisories:
          items:
            $ref: '#/components/schemas/ReferenceLink'
          type: array
        categories:
          items:
            type: string
          type: array
        componentDetectionMarkdown:
          type: string
        componentExplanationMarkdown:
          type: string
        componentRecommendationMarkdown:
          type: string
        customData:
          $ref: '#/components/schemas/SecurityVulnerabilityCustomData'
        description:
          type: string
        detectionMarkdown:
          type: string
        detectionType:
          type: string
        epssData:
          $ref: '#/components/schemas/EpssData'
        explanationMarkdown:
          type: string
        identificationSource:
          type: string
        identifier:
          type: string
        isAdvancedVulnerabilityDetection:
          type: boolean
        kevData:
          $ref: '#/components/schemas/KevData'
        mainSeverity:
          $ref: '#/components/schemas/SecurityVulnerabilitySeverity'
        recommendationMarkdown:
          type: string
        researchType:
          enum:
          - FAST_TRACK
          - DEEP_DIVE
          - PUBLIC_RESEARCH
          - VENDOR_RESEARCH
          type: string
        rootCauses:
          items:
            $ref: '#/components/schemas/RootCause'
          type: array
        severityScores:
          items:
            $ref: '#/components/schemas/SecurityVulnerabilitySeverity'
          type: array
        source:
          $ref: '#/components/schemas/VulnerabilitySource'
        vulnIds:
          items:
            type: string
          type: array
        vulnerabilityLink:
          format: uri
          type: string
        vulnerableVersionRanges:
          items:
            type: string
          type: array
        weakness:
          $ref: '#/components/schemas/SecurityVulnerabilityWeakness'
      type: object
    SecurityVulnerabilityDataDTO:
      properties:
        advisories:
          items:
            $ref: '#/components/schemas/ReferenceLinkDTO'
          type: array
        categories:
          items:
            type: string
          type: array
        componentDetectionMarkdown:
          type: string
        componentExplanationMarkdown:
          type: string
        componentRecommendationMarkdown:
          type: string
        customData:
          $ref: '#/components/schemas/SecurityVulnerabilityCustomDataDTO'
        description:
          type: string
        detectionMarkdown:
          type: string
        detectionType:
          type: string
        epssData:
          $ref: '#/components/schemas/EpssData'
        explanationMarkdown:
          type: string
        identificationSource:
          type: string
        identifier:
          type: string
        isAdvancedVulnerabilityDetection:
          type: boolean
        kevData:
          $ref: '#/components/schemas/KevData'
        mainSeverity:
          $ref: '#/components/schemas/SecurityVulnerabilitySeverityDTO'
        recommendationMarkdown:
          type: string
        researchType:
          enum:
          - FAST_TRACK
          - DEEP_DIVE
          - PUBLIC_RESEARCH
          - VENDOR_RESEARCH
          type: string
        rootCauses:
          items:
            $ref: '#/components/schemas/RootCauseDTO'
          type: array
        severityScores:
          items:
            $ref: '#/components/schemas/SecurityVulnerabilitySeverityDTO'
          type: array
        source:
          $ref: '#/components/schemas/VulnerabilitySourceDTO'
        vulnIds:
          items:
            type: string
          type: array
        vulnerabilityLink:
          format: uri
          type: string
        vulnerableVersionRanges:
          items:
            type: string
          type: array
        weakness:
          $ref: '#/components/schemas/SecurityVulnerabilityWeaknessDTO'
      type: object
    SecurityVulnerabilitySeverity:
      properties:
        score:
          format: float
          type: number
        source:
          type: string
        sourceLabel:
          type: string
        vector:
          type: string
      type: object
    SecurityVulnerabilitySeverityDTO:
      properties:
        score:
          format: float
          type: number
        source:
          type: string
        sourceLabel:
          type: string
        vector:
          type: string
      type: object
    SecurityVulnerabilityWeakness:
      properties:
        cweIds:
          items:
            $ref: '#/components/schemas/CweId'
          type: array
        cweSource:
          type: string
      type: object
    SecurityVulnerabilityWeaknessDTO:
      properties:
        cweIds:
          items:
            $ref: '#/components/schemas/CweIdDTO'
          type: array
        cweSource:
          type: string
      type: object
    StageData:
      properties:
        actionTypeId:
          type: string
        mostRecentEvaluationTime:
          format: date-time
          type: string
        mostRecentScanId:
          type: string
      type: object
    Swid:
      properties:
        name:
          type: string
        patch:
          type: boolean
        tagId:
          type: string
        tagVersion:
          format: int32
          type: integer
        text:
          $ref: '#/components/schemas/AttachmentText'
        version:
          type: string
      type: object
    SystemConfig:
      properties:
        baseUrl:
          nullable: true
          type: string
        forceBaseUrl:
          nullable: true
          type: boolean
    SystemConfigProperty:
      enum:
      - baseUrl
      - forceBaseUrl
      type: string
    TagsByOwnerDTO:
      properties:
        applicationCategories:
          items:
            $ref: '#/components/schemas/ApiApplicationCategoryDTO'
          type: array
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    TriggerReference:
      properties:
        type:
          enum:
          - SECURITY_VULNERABILITY_REFID
          - SAST_FINDING_ID
          type: string
        value:
          type: string
      type: object
    UserMapping:
      properties:
        from:
          enum:
          - SCM_USERNAME
          - SCM_EMAIL
          - SCM_FULLNAME
          - GITLOG_EMAIL
          - GITLOG_FULLNAME
          type: string
        to:
          enum:
          - IQ_USERNAME
          - IQ_EMAIL
          - IQ_FULLNAME
          type: string
      type: object
    ValidationError:
      properties:
        message:
          type: string
        type:
          enum:
          - TAG
          - POLICY
          - LICENSE_THREAT_GROUP
          - LABEL
          - PARENT_HIERARCHY
          type: string
      type: object
    ValidationResult:
      properties:
        message:
          type: string
        valid:
          type: boolean
      type: object
    ValidationWarning:
      properties:
        message:
          type: string
        type:
          enum:
          - LICENSE_OVERRIDE
          - POLICY_MONITORING
          - POLICY_WAIVER
          type: string
      type: object
    VulnerabilitySource:
      properties:
        longName:
          type: string
        shortName:
          type: string
      type: object
    VulnerabilitySourceDTO:
      properties:
        longName:
          type: string
        shortName:
          type: string
      type: object
    componentLocator:
      description: Component details about the vulnerable component. Either hash or
        package URL must be provided
      properties:
        hash:
          description: Component hash
          type: string
        packageUrl:
          description: Component package URL
          type: string
      type: object
    sbomVulnerabilityAnalysisRequest:
      properties:
        componentLocator:
          $ref: '#/components/schemas/componentLocator'
        vulnerabilityAnalysis:
          $ref: '#/components/schemas/vulnerabilityAnalysis'
      required:
      - componentLocator
      - vulnerabilityAnalysis
      type: object
    vulnerabilityAnalysis:
      description: Vulnerability analysis details.
      properties:
        createdOn:
          format: date-time
          readOnly: true
          type: string
        detail:
          description: Detailed description of the impact including methods used during
            assessment
          type: string
        justification:
          description: The rationale of why the impact analysis state was asserted
          enum:
          - code_not_present
          - code_not_reachable
          - requires_configuration
          - requires_dependency
          - requires_environment
          - protected_by_compiler
          - protected_at_runtime
          - protected_at_perimeter
          - protected_by_mitigating_control
          type: string
        lastUpdatedBy:
          readOnly: true
          type: string
        lastUpdatedOn:
          format: date-time
          readOnly: true
          type: string
        response:
          description: Vulnerability analysis response by an author, supplier or manufacturer
            for the affected component.
          enum:
          - can_not_fix
          - will_not_fix
          - update
          - rollback
          - workaround_available
          type: string
        state:
          description: Vulnerability analysis state.
          enum:
          - resolved
          - resolved_with_pedigree
          - exploitable
          - in_triage
          - false_positive
          - not_affected
          type: string
      required:
      - detail
      - justification
      - response
      - state
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
info:
  title: Sonatype Lifecycle Public REST API
  version: 1.196.0-01
openapi: 3.0.1
paths:
  /api/v2/applicationCategories/application:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories.
      operationId: getTagsUsedByApplications
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationCategoryDTO'
                type: array
          description: A list of application categories or tags applied to applications.
            Each application category or tag consists of an id, name, description
            and color.
      tags:
      - Application Categories
  /api/v2/applicationCategories/application/{applicationPublicId}:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories available to applications in this organization.
      operationId: getApplicationApplicableTags
      parameters:
      - description: 'The application public ID '
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicableTagsDTO'
          description: 'A list of application categories that can be applied to the
            specified application. Each application category or tag consists of an
            id, name, description and color. '
      tags:
      - Application Categories
  /api/v2/applicationCategories/application/{applicationPublicId}/applicable:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories that can be applied to applications in this organization.
      operationId: getApplicableTagsByApplicationPublicId
      parameters:
      - description: Provide the application public ID assigned by IQ Server.
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationCategoryDTO'
                type: array
          description: Returns all application categories or tags that can be applied
            to this application,  by providing the application public ID.
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories in use by applications in this organization.
      operationId: getTags
      parameters:
      - description: The organizationId assigned by IQ Server.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationCategoryDTO'
                type: array
          description: 'A list of application categories or tags that can be used
            by applications in this organization. Each application category consists
            of an id, name, description and color. '
      tags:
      - Application Categories
    post:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to add a new application category
        or tag.
      operationId: addTag
      parameters:
      - description: The organizationId assigned by IQ Server, for which you want
          to create the application category.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiApplicationCategoryDTO'
        description: Specify the the name, description and color for the new application
          category to be  created. The application category id is not required to
          create a new application category  and should not be included.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationCategoryDTO'
          description: Successful creation of the new application category and its
            details.
      tags:
      - Application Categories
    put:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to update an existing application
        category.
      operationId: updateTag
      parameters:
      - description: The organizationId assigned by IQ Server.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiApplicationCategoryDTO'
        description: Specify the id (application category id) and id of the organization
          that owns this  application category, to update the name, description and
          color.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationCategoryDTO'
          description: Successful update echoing the updated application category
            details.
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}/applicable:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories that can be applied to applications in this organization.
      operationId: getApplicableTags
      parameters:
      - description: The organizationId assigned by IQ Server, for which you want
          to retrieve the applicable tags or application categories.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicableTagsDTO'
          description: 'A list of application categories or tags that can be applied
            to applications in this organization. Each application category or tag
            consists of an id, name, description and color. '
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}/applied:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories that can be applied to applications in this organization.
      operationId: getAppliedTags
      parameters:
      - description: The organizationId assigned by IQ Server.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedTagsDTO'
          description: Get all application categories or tags that can be applied
            to an application, belonging to the organization specified by the organization
            id.
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}/policy:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories that are applied to applications in this organization.
      operationId: getAppliedPolicyTags
      parameters:
      - description: The organizationId assigned by IQ Server.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PolicyTag'
                type: array
          description: Get all policy application categories or tags that are applied
            to applications  in this organization.
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}/{tagId}:
    delete:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to update an existing application
        category.Use this method to delete an existing application category.
      operationId: deleteTag
      parameters:
      - description: The organizationId assigned by IQ Server, corresponding to the
          application category tag you want to delete.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The application category ID assigned by IQ Server, to be deleted.
        in: path
        name: tagId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful deletion of the application category.
      tags:
      - Application Categories
  /api/v2/applications:
    get:
      description: 'Use this method to retrieve the application details for the applicationId(s)
        provided.


        Permissions required: View IQ Elements'
      operationId: getApplications
      parameters:
      - description: Enter the applicationId.
        in: query
        name: publicId
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - description: Set this parameter to `true` to obtain the application tags (application
          categories) in the response.
        in: query
        name: includeCategories
        schema:
          default: false
          type: boolean
      responses:
        '200': &id001
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationListDTO'
          description: default response
        default: *id001
      tags:
      - Applications
    post:
      description: 'Use this method to create an application under an organization.
        Use the Organization REST API to obtain organizationId.


        Permissions required: Add Application (on parent organization)'
      operationId: addApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiApplicationDTO'
        description: Specify the applicationId, application name and the organizationId
          under which the application should be created. `contactUserName` corresponds
          to the 'contact' field in the UI and represents the user name. If LDAP is
          used for authentication, you can use LDAP usernames.`tagId` is the internal
          identifier for the Application Category that you want to apply to the application.
          Use the Application Categories REST API for the available categories and
          the corresponding tagIds.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationDTO'
          description: The response contains application details for the application
            created using this method.
      tags:
      - Applications
  /api/v2/applications/organization/{organizationId}:
    get:
      description: 'Use this method to retrieve application details for all applications
        under the organizationId provided.


        Permissions required: View IQ Elements'
      operationId: getApplicationsByOrganizationId
      parameters:
      - description: Enter the organizationId.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationListDTO'
          description: The response contains the details of all applications found
            under the organizationId provided.
      tags:
      - Applications
  /api/v2/applications/{applicationId}:
    delete:
      description: 'Use this method to permanently delete an existing application
        and all data associated with it. This action cannot be un-done. Before deleting,
        confirm that the application being deleted does not impact any integrations
        that could depend on it.


        Permissions required: Edit IQ Elements'
      operationId: deleteApplication
      parameters:
      - description: Enter the applicationId to be deleted.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Application deleted successfully
      tags:
      - Applications
    get:
      description: 'Use this method to retrieve the application details, by providing
        the applicationId.


        Permissions required: View IQ Elements'
      operationId: getApplication
      parameters:
      - description: Enter the applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationDTO'
          description: The response contains the details of the application corresponding
            to the applicationId.
      tags:
      - Applications
    put:
      description: "Use this method to update the application name, application tags\
        \ or the contact user name for an existing application by providing the applicationId.\
        \ \n\nNOTE: This method cannot be used to change the organizationId of an\
        \ application.\n\nPermissions required: Edit IQ Elements"
      operationId: updateApplication
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiApplicationDTO'
        description: Specify the applicationId, application name and the organizationId
          under which  the application exists. `contactUserName` corresponds to the
          'contact' field in the UI and represents the user name. If LDAP is used
          for authentication, you can use LDAP usernames.`tagId` is the internal identifier
          for the Application Category that you want to apply to the application.
          . Use the Application Categories REST API for the available categories and
          the corresponding tagIds.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationDTO'
          description: The response contains the updated application name, contact
            user name and application tags,  for the applicationId provided
      tags:
      - Applications
  /api/v2/applications/{applicationId}/move/organization/{organizationId}:
    post:
      description: 'Use this method to move an application from one organization to
        another.


        Permissions required: Edit IQ Elements'
      operationId: moveApplication
      parameters:
      - description: Enter the applicationId of the application to be moved.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the organizationId of the destination organization.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMoveApplicationResponseDTOV2'
          description: Application moved successfully, with/without warnings. Warnings,
            if any, will appear in the response body.
        '404':
          description: Moving the application failed because either an application
            with the provided applicationId or the organizationId for the organization
            where it is to be moved is not found.
        '409':
          description: Moving the application failed due to conflicts between the
            organizations.
      tags:
      - Applications
  /api/v2/applications/{applicationPublicId}/reports/policyViolations/diff:
    get:
      description: 'By configuring Lifecycle with SCM, policy evaluations can be linked
        to the Git commit hash. Use this method to compare the violations between
        policy evaluations for 2 commits, by providing the linked commit hashes.


        Permissions required: View IQ Elements'
      operationId: getPolicyViolationDiff
      parameters:
      - description: Enter the applicationPublicId, created at the time of creating
          the application
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: Enter the commit hash linked to the earlier policy evaluation.
        in: query
        name: fromCommit
        required: true
        schema:
          type: string
      - description: Enter the commit hash linked to the other (later) policy evaluation
          to compare.
        in: query
        name: toCommit
        required: true
        schema:
          type: string
      - description: Enter the policy evaluation Id linked to the earlier policy evaluation
          to compare
        in: query
        name: fromPolicyEvaluationId
        schema:
          type: string
      - description: Enter the policy evaluation Id linked to the other (later) policy
          evaluation to compare
        in: query
        name: toPolicyEvaluationId
        schema:
          type: string
      - description: Set to true to include policy violation times (open, legacy,
          waived, fixed) in the response if set.
        in: query
        name: includeViolationTimes
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyViolationDiffDTO'
          description: The response contains the violation details grouped under addedViolations,
            sameViolations and removedViolations for the two policy evaluations being
            compared.
        '400':
          description: Missing or invalid parameter. Check if the policy evaluations
            are still available, based on the Data Retention Policies.
        '404':
          description: Policy violation diff could not be determined for the given
            request.
      tags:
      - Application Report Data
  /api/v2/applications/{applicationPublicId}/reports/{scanId}:
    get:
      description: This is an older version of the endpoint. This call will now be
        redirected to /api/v2/applications/{applicationPublicId}/reports/{scanId}/raw.
      operationId: getData
      parameters:
      - description: Enter the applicationPublicId for the evaluated application.
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: 'Enter the scanId (reportId) of the application report created
          after the evaluation. '
        in: path
        name: scanId
        required: true
        schema:
          type: string
      responses:
        '307':
          description: Temporary redirect to the new endpoint.
      tags:
      - Application Report Data
  /api/v2/applications/{applicationPublicId}/reports/{scanId}/dependencyTree:
    get:
      description: 'Use this method to retrieve the dependencies related to the component
        identified at the time of application evaluation. This is currently available
        only for Java (Maven) and NPM applications.


        Permissions required: View IQ Elements'
      operationId: getDependencyTree
      parameters:
      - description: Enter the applicationPublicId created at the time of creating
          the application.
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: ' Enter the reportId (scanId) created at the time of evaluating
          the application.'
        in: path
        name: scanId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDependencyTreeResponseDTO'
          description: The response fields contain the 'Dependency Tree' data  under
            the 'children' section. The 'children' section may contain more tree nodes.
            Every direct dependency can have zero or more transitive dependencies.
            Each tree node contains the packageUrl, component identifier and a dependency
            tree node (if it exists.) The component identifier section contains the
            format and coordinates for the component.
        '400':
          description: Missing or invalid parameter.
        '404':
          description: The requested dependency tree was not found.
      tags:
      - Application Report Data
  /api/v2/applications/{applicationPublicId}/reports/{scanId}/policy:
    get:
      description: 'Use this method to retrieve the policy violation data generated
        as a result of an application evaluation, for each component identified in
        the application evaluation./n/nPermissions required: View IQ Elements'
      operationId: getPolicyViolations_1
      parameters:
      - description: Enter the applicationPublicId created at the time of creating
          the application.
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: Enter the reportId (scanId) created at the time of evaluating
          the application.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Set to true to include policy violation times (open, legacy,
          waived, fixed) in the response if set.
        in: query
        name: includeViolationTimes
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportPolicyDataDTOV2'
          description: The response fields contain the policy violation data for the
            reportId (scanId) specified in the method call. The fields corresponding
            to 'violations' include the violation details for each policy, for the
            component.
      tags:
      - Application Report Data
  /api/v2/applications/{applicationPublicId}/reports/{scanId}/raw:
    get:
      description: 'Use this method to retrieve the ''raw'' data generated as a result
        of an application evaluation. ''raw'' data includes: the components identified
        in the application, and the licenses and vulnerabilities associated with the
        identified components./n/nPermissions required: View IQ Elements'
      operationId: getRawData
      parameters:
      - description: 'Enter the applicationPublicId (assigned at the time of creating
          a new application.) '
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: Enter the reportId (scanId) created at the time of evaluating
          the application. application.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportRawDataDTOV2'
          description: The response fields contain the 'raw' data for the reportId
            (scanId) specified in the method call. The fields corresponding to 'dependencyData'
            will indicate if the component is a direct dependency (true/false), an
            InnerSource component(true/false), the associated parentComponentPurls
            (package URLs of the parent component ownerApplicationName (name of the
            owner application), ownerApplicatonId (internal ID of the owner application,
            innerSourceComponentPurl (the package URL of the InnerSourceComponent.)
      tags:
      - Application Report Data
  /api/v2/applications/{sourceApplicationId}/clone:
    post:
      description: 'Use this method to clone an existing application.


        Permissions required: Add Application (on the parent organization)'
      operationId: cloneApplication
      parameters:
      - description: Enter the applicationId for the application to be cloned.
        in: path
        name: sourceApplicationId
        required: true
        schema:
          type: string
      - description: Enter the application name for the new cloned application.
        in: query
        name: clonedApplicationName
        schema:
          type: string
      - description: Enter the applicationPublicId for the cloned application.
        in: query
        name: clonedApplicationPublicId
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationDTO'
          description: The response contains application details of the cloned application.
      tags:
      - Applications
  /api/v2/auditLogs:
    get:
      description: 'Use this method to retrieve the audit events for the specified
        time period.


        Permissions required: Access Audit Log'
      operationId: getAuditLogs
      parameters:
      - description: Enter the start UTC date in the format (yyyy-mm-dd).
        in: query
        name: startUtcDate
        schema:
          type: string
      - description: Enter the end UTC date in the format (yyyy-mm-dd).
        in: query
        name: endUtcDate
        schema:
          type: string
      responses:
        '200':
          content:
            text/plain: {}
          description: The response text contains lines of audit events in chronologically
            ascending order.
      tags:
      - Audit Logs
  /api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}:
    post:
      description: 'Use this method to create an auto policy waiver exclusion for
        a specified auto policy waiver.


        Permissions required: Waive Policy Violations'
      operationId: addAutoPolicyWaiveExclusion
      parameters:
      - description: Enter the ownerType to specify which resource type owns the auto
          waiver you want to apply a exclusion to. Possible values are application,
          organization.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutoPolicyWaiverExclusionRequestDTO'
        description: The request JSON can include the fields<ol><li>applicationPublicId</li><li>ownerId
          - ID of the application or organization which will own the auto waiver exclusion</li><li>policyViolationId
          - ID of the policy violation which the exclusion will apply to</li><li>autoPolicyWaiverId
          - ID of the auto waiver you want to apply a exclusion to</li><li>scanId
          - ID of the scan which the violation being waived appeared in</li><li>matchStrategy
          (enumeration, required) can have values EXACT_COMPONENT, ALL_VERSIONS, POLICY_VIOLATION.
          </li></ol>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAutoPolicyWaiverExclusionResponseDTO'
          description: Auto policy waiver exclusion has been created successfully.
      tags:
      - Auto Policy Waiver Exclusions
  /api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}/{autoPolicyWaiverId}:
    get:
      description: 'Use this method to retrieve auto policy waiver exclusions for
        the given owner and policy waiver.


        Permissions required: View IQ Elements'
      operationId: getAutoPolicyWaiverExclusions
      parameters:
      - description: Enter the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the owner id.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the id of the automatic policy waiver.
        in: path
        name: autoPolicyWaiverId
        required: true
        schema:
          type: string
      - description: Enter the page.
        in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - description: Enter the page size.
        in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiAutoPolicyWaiverExclusionResponseDTO'
                type: array
          description: Successfully retrieved the auto policy waiver exclusions.
      tags:
      - Auto Policy Waiver Exclusions
  /api/v2/autoPolicyWaiverExclusions/{ownerType}/{ownerId}/{autoPolicyWaiverId}/{autoPolicyWaiverExclusionId}:
    delete:
      description: 'Use this method to delete an auto policy waiver exclusion, specified
        by the autoPolicyWaiverExclusionId.


        Permissions required: Waive Policy Violations'
      operationId: deleteAutoPolicyWaiverExclusion
      parameters:
      - description: Enter the ownerType to specify the scope. A waiver exclusion
          corresponding to the autoPolicyWaiverExclusionId provided and within the
          scope specified will be deleted.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the relevant Auto Policy Waiver ID.
        in: path
        name: autoPolicyWaiverId
        required: true
        schema:
          type: string
      - description: Enter the autoPolicyWaiverId to be deleted
        in: path
        name: autoPolicyWaiverExclusionId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Auto policy waiver exclusion has been deleted successfully.
      tags:
      - Auto Policy Waiver Exclusions
  /api/v2/autoPolicyWaivers/v2/{ownerType}/{ownerId}:
    post:
      description: 'Use this method to create an auto policy waiver configuration.
        Only three configurations can  exist at a time for a given application or
        organization. With different combinations for reachable/pathForward


        Permissions required: Waive Policy Violations'
      operationId: addAutoPolicyWaivers
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          the details for waivers within the scope.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
              type: array
        description: The request JSON can be an array that include the fields<ol><li>threatLevel</li><li>pathForward</li><li>reachable</li></ol>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
                type: array
          description: Auto waiver has been created successfully.
      tags:
      - Auto Policy Waivers
  /api/v2/autoPolicyWaivers/v2/{ownerType}/{ownerId}/applicableAutoWaivers:
    get:
      description: 'Use this method to retrieve all applicable auto waivers for the
        scope specified. You can specify the scope by using the parameters ownerType
        and ownerId.


        Permissions required: View IQ Elements'
      operationId: getApplicableAutoWaivers
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          applicable auto policy waivers, if any, that are within the scope specified.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiAutoPolicyWaiverStatusDTO'
                type: array
          description: The response contains applicable auto policy waivers for the
            specified ownerType and the corresponding ownerId.
      tags:
      - Auto Policy Waivers
  /api/v2/autoPolicyWaivers/{ownerType}/{ownerId}:
    get:
      description: 'Use this method to retrieve waiver details for all auto policy
        waivers for the scope specified. You can specify the scope by using the parameters
        ownerType and ownerId.


        Permissions required: View IQ Elements'
      operationId: getAutoPolicyWaivers
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          waivers that are within the scope specified.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
                type: array
          description: The response contains waiver details for the specified ownerType
            and the corresponding ownerId, grouped by the autoPolicyWaiverId.
      tags:
      - Auto Policy Waivers
    post:
      description: 'Use this method to create an auto policy waiver configuration.
        Only one configuration can exist at a time for a given application or organization.


        Permissions required: Waive Policy Violations'
      operationId: addAutoPolicyWaiver
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          the details for waivers within the scope.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
        description: The request JSON can include the fields<ol><li>threatLevel</li><li>pathForward</li><li>reachable</li></ol>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
          description: Auto waiver has been created successfully.
      tags:
      - Auto Policy Waivers
  /api/v2/autoPolicyWaivers/{ownerType}/{ownerId}/status:
    get:
      description: 'Use this method to retrieve status details for any auto policy
        waiver enabled for the scope specified. You can specify the scope by using
        the parameters ownerType and ownerId.


        Permissions required: View IQ Elements'
      operationId: getAutoPolicyWaiverStatus
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          status details for the active auto policy waiver, if any, that is within
          the scope specified.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAutoPolicyWaiverStatusDTO'
          description: The response contains auto policy waiver status details for
            the specified ownerType and the corresponding ownerId.
      tags:
      - Auto Policy Waivers
  /api/v2/autoPolicyWaivers/{ownerType}/{ownerId}/{autoPolicyWaiverId}:
    delete:
      description: 'Use this method to delete an auto policy waiver, specified by
        the autoPolicyWaiverId.


        Permissions required: Waive Policy Violations'
      operationId: deleteAutoPolicyWaiver
      parameters:
      - description: Enter the ownerType to specify the scope. A waiver corresponding
          to the autoPolicyWaiverId provided and within the scope specified will be
          deleted.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the autoPolicyWaiverId to be deleted
        in: path
        name: autoPolicyWaiverId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Auto Policy Waiver has been deleted successfully.
      tags:
      - Auto Policy Waivers
    get:
      description: 'Use this method to retrieve auto policy waiver details for the
        autoPolicyWaiverId specified.


        Permissions required: View IQ Elements'
      operationId: getAutoPolicyWaiver
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          the details for waivers within the scope.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the autoPolicyWaiverId for which you want to retrieve the
          auto policy waiver details.
        in: path
        name: autoPolicyWaiverId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
          description: The response contains waiver details corresponding to the auto
            policy waiver id specified.
      tags:
      - Auto Policy Waivers
    put:
      description: 'Use this method to update an auto policy waiver, specified by
        the autoPolicyWaiverId.


        Permissions required: Write IQ Elements'
      operationId: updateAutoPolicyWaiver
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          the details for waivers within the scope.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the autoPolicyWaiverId to be updated.
        in: path
        name: autoPolicyWaiverId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
        description: The request JSON can include the fields<ol><li>autoPolicyWaiverId</li><li>threatLevel</li><li>pathForward</li><li>reachable</li></ol>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
          description: Auto Policy Waiver has been updated successfully.
      tags:
      - Auto Policy Waivers
  /api/v2/claim/components:
    get:
      description: 'Use this method to retrieve details of all claimed components.


        Permissions required: Claim components'
      operationId: getAll
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiHashComponentIdentifiersDTO'
          description: The response contains the truncated SHA1 hash of each component,
            the datetime when the component was published (not the time it was claimed),
            the format and coordinates of the claimed component (componentIdentifier)
            and the package URL of the claimed component.
      tags:
      - Claim Components
    post:
      description: 'Use this method to claim a component, or update the component
        details for a previously claimed component.


        Permissions required: Claim components'
      operationId: set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiHashComponentIdentifierDTO'
        description: Specify the hash (required), comment (optional), createTime (optional),
          and the component identifier/package URL (required) with non-null/non-empty
          format and coordinates,  for the component to be claimed.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiHashComponentIdentifierDTO'
          description: The response shows the new/updated details for the claimed
            component.
      tags:
      - Claim Components
  /api/v2/claim/components/{hash}:
    delete:
      description: 'Use this method to delete a claim on a previously claimed component
        by providing its hash.


        Permissions required: Claim components'
      operationId: delete
      parameters:
      - description: Enter the SHA1 hash for the component.
        in: path
        name: hash
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Component Claim for this hash was deleted.
        '404':
          description: Component Claim for this hash does not exist.
      tags:
      - Claim Components
    get:
      description: 'Use this method to retrieve details of a claimed component by
        specifying its hash.


        Permissions required: Claim components'
      operationId: get
      parameters:
      - description: The hash of the claimed component.
        in: path
        name: hash
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiHashComponentIdentifierDTO'
          description: The response contains the truncated SHA1 hash of the component,
            the datetime when the component was published (not the time it was claimed),
            the format and coordinates of the claimed component (componentIdentifier)
            and the package URL of the claimed component.
        '404':
          description: Component Claim for this hash does not exist.
      tags:
      - Claim Components
  /api/v2/components/details:
    post:
      description: Use this method to retrieve data related to a component.
      operationId: getComponentDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiComponentDetailsRequestDTOV2'
        description: 'You can retrieve component data in any one of the 3 ways via:

          1. Component identifier

          2. Package URL

          3. Hash'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentDetailsResultDTOV2'
          description: The response contains a detailed description of the component.
            The hash value returned here is truncated and not intended to be used
            as a checksum. It can be used as an identifier to pass to other REST API
            calls.
      tags:
      - Components
  /api/v2/components/remediation/{ownerType}/{ownerId}:
    post:
      description: Use this method to obtain remediation suggestions for policy violations
        on a component basis. Remediations obtained from this method are same as those
        appearing on the Component Details Page in the UI.
      operationId: getSuggestedRemediationForComponent
      parameters:
      - description: 'Possible values: application, organization, repository. '
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository
          pattern: application|organization|repository
          type: string
      - description: 'Possible values: applicationId, organizationId or repositoryId.'
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the stageId to obtain next-non-failing and next-non-failing-with-dependencies
          remediation types in the response. Possible values are develop, build, stage-release,
          release and operate.
        in: query
        name: stageId
        schema:
          type: string
      - description: Enter the identification source if you want the remediation result
          based on third-party scan information (non-Sonatype). The identification
          source can be obtained from the Component Details Page in the UI.
        in: query
        name: identificationSource
        schema:
          type: string
      - description: Enter the scanId (reportId) if you want the remediation result
          based on third-party scan information (non-Sonatype).
        in: query
        name: scanId
        schema:
          type: string
      - description: Enter true if you want to include parent remediation for transitive
          dependency in the response based on your application policy scan.
        in: query
        name: includeParentRemediation
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiComponentDTOV2'
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  remediation:
                    $ref: '#/components/schemas/ApiComponentRemediationValueDTO'
                required:
                - remediation
                type: object
          description: Use this method to obtain remediation suggestions for policy
            violations on a component basis. Remediations obtained from this method
            are same as those appearing on the Component Details Page in the UI.
      tags:
      - Components
  /api/v2/components/versions:
    post:
      description: Use this method to retrieve all known versions of a component.
      operationId: getComponentVersions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiComponentOrPurlIdentifierDTOV2'
        description: 'Possible values: Component identifier or packageURL (pURL) identifier
          in the correct format. Use a-name for JavaScript components.'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Known versions of the component are returned in a string array
            of ascending order.
      tags:
      - Components
  /api/v2/components/{componentHash}/labels/{labelName}/{ownerType}s/{internalOwnerId}:
    delete:
      description: Use this method to un-assign a label from a component.
      operationId: deleteComponentLabel
      parameters:
      - description: 'Possible values: application or organization'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: 'Possible values : applicationId or organizationId'
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the SHA1 hash of the component.
        in: path
        name: componentHash
        required: true
        schema:
          type: string
      - description: Enter the label name to un-assign from this component.
        in: path
        name: labelName
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Label un-assigned from component successfully.
      tags:
      - Components
    post:
      description: Use this method to assign an existing label to a component.
      operationId: setComponentLabel
      parameters:
      - description: 'Possible values: application or organization'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: 'Possible values : applicationId or organizationId'
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the SHA1 hash of the component.
        in: path
        name: componentHash
        required: true
        schema:
          type: string
      - description: Enter the label name to assign to this component.
        in: path
        name: labelName
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Component label assigned successfully.
      tags:
      - Components
  /api/v2/compositeSourceControl/{ownerType}/{internalOwnerId}:
    get:
      description: 'Use this method to retrieve the composite source control management
        (SCM) configuration settings.


        Permissions required: View IQ Elements'
      operationId: getCompositeSourceControlByOwner
      parameters:
      - description: Select the ownerType of the entity (organization or application)
          for which you want to retrieve the composite source control configuration
          settings.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the id of the application or organization for which you
          want to retrieve the composite source control configuration settings
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCompositeSourceControlDTO'
          description: The response contains values for the SCM configuration. For
            each value, the corresponding parent value will be shown, if applicable.<ul><li><code>id</code>
            is the internal identifier for the SCM configuration.</li><li><code>ownerId</code>
            is the identifier for the ownerType specified.</li><li><code>repositoryUrl</code>
            indicates the URL of application/organization. Will indicate 'null' for
            organizations.</li><li><code>provider</code> is the name of the source
            code host for the parent. Values can be Azure, GitHub, GitLab and Bitbucket.</li><li><code>username</code>
            is returned if found for the specific provider. Currently, the values
            are available for Bitbucket Server and Bitbucket Cloud.</li><li><code>token</code>
            is obfuscated and indicates the composite configuration for the source
            control host.<li><code>baseBranch</code> shows the base branch name.<li><code>remediationPullRequestsEnabled</code>
            indicates if the Automated Pull Request feature is enabled.</li><li><code>statusChecksEnabled</code>
            indicates if the status checks for the source code are enabled.</li><li><code>pullRequestCommentingEnabled</code>
            indicates if PR commenting is enabled for this application/organization.</li><li><code>sourceControlEvaluationsEnabled</code>
            indicates if the evaluations triggered by the IQ Server are enabled, for
            the Continuous Risk Profile feature.</li><li><code>sshEnabled</code> indicates
            if ssh settings are enabled.</li><li><code>commitStatusEnabled</code>
            indicates if commit status check is enabled.</li>
      tags:
      - Composite Source Control
  /api/v2/compositeSourceControlConfigValidator/application/{applicationId}:
    get:
      description: 'Use this method to validate the composite source control configuration.


        Permissions required: View IQ Elements'
      operationId: validateSourceControlConfig
      parameters:
      - description: Enter the applicationId for which you want to validate the composite
          source control configuration.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationValidationResult'
          description: The response shows if the composite source control configuration
            for the application is valid.
      tags:
      - Composite Source Control Validator
  /api/v2/config:
    delete:
      description: 'Use this method to disable one or more IQ Server system properties.
        The property names are case-sensitive.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteConfiguration
      parameters:
      - description: Enter the names of the system properties. Values provided for
          name are case-sensitive.
        in: query
        name: property
        schema:
          items:
            $ref: '#/components/schemas/SystemConfigProperty'
          type: array
          uniqueItems: true
      responses:
        204:
          content: {}
          description: System Configuration removed
      tags:
      - Configuration
    get:
      description: 'Use this method to retrieve the configured value for an IQ Server
        system property.


        Permissions required: Edit System Configuration and Users or system property
        dependent'
      operationId: getConfiguration
      parameters:
      - description: Enter the names of the system properties. Values provided for
          name are case-sensitive.
        in: query
        name: property
        schema:
          items:
            $ref: '#/components/schemas/SystemConfigProperty'
          type: array
          uniqueItems: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfig'
          description: System Configuration retrieved
      tags:
      - Configuration
    put:
      description: 'Use this method to configure one or more IQ Server system properties.
        The property names are case-sensitive.


        Permissions required: Edit System Configuration and Users'
      operationId: setConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfig'
      responses:
        204:
          content: {}
          description: System Configuration updated
      tags:
      - Configuration
  /api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}:
    get:
      description: 'Use this method to retrieve Artifactory connection details by
        specifying the owner Id.


        Permissions required: View IQ Elements'
      operationId: getOwnerArtifactoryConnection
      parameters:
      - description: Select the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ID of the owner.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Specify whether to include details from an inherited Artifactory
          connection.
        in: query
        name: inherit
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiOwnerArtifactoryConnectionDTO'
          description: The response contains the details of the Artifactory connection.
      tags:
      - Configure Artifactory Connection
    post:
      description: 'Use this method to add a new Artifactory connection.


        Permissions required: Edit IQ Elements'
      operationId: addArtifactoryConnection
      parameters:
      - description: Select the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ID of the owner.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
        description: Enter values for the new Artifactory connection.<ul><li>`isAnonymous`
          indicates if the connection is anonymous.</li><li>`baseUrl` is the baseURL
          of the Artifactory instance.</li><li>`username` and `password` to authenticate
          the Artifactory connection.</li></ul>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
          description: The response contains the details of the added Artifactory
            connection.
      tags:
      - Configure Artifactory Connection
    put:
      description: 'Use this method to enable/disable an existing Artifactory connection
        for the specified owner.


        Permissions required: Edit IQ Elements'
      operationId: updateOwnerArtifactoryConnectionStatus
      parameters:
      - description: Select the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ID of the owner.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiArtifactoryConnectionStatusRequestDTO'
        description: Set values for the connection properties `enabled` and `allowOverride`.
        required: true
      responses:
        '204':
          description: Artifactory connection status successfully updated.
      tags:
      - Configure Artifactory Connection
  /api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/test:
    post:
      description: 'Use this method to test an Artifactory connection for the specified
        owner.


        Permissons required: View IQ Elements'
      operationId: testArtifactoryConnection
      parameters:
      - description: Select the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ID of the owner.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
        description: Enter values for the Artifactory connection.<ul><li>`baseUrl`
          is the baseURL of the Artifactory instance.</li><li>`username` and `password`
          to authenticate the Artifactory connection.</li></ul>
        required: true
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStatusDTO'
          description: The response contains the `code` and `message` indicating the
            status of the connection.
      tags:
      - Configure Artifactory Connection
  /api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/{artifactoryConnectionId}:
    delete:
      description: 'Use this method to delete an existing Artifactory connection.


        Permissions required: Edit IQ Elements'
      operationId: deleteArtifactoryConnection
      parameters:
      - description: Select the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ID of the owner.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the Artifactory connection ID.
        in: path
        name: artifactoryConnectionId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Artifactory connection deleted successfully.
      tags:
      - Configure Artifactory Connection
    get:
      description: 'Use this method to retrieve details for an Artifactory connection.


        Permissions required: View IQ Elements'
      operationId: getArtifactoryConnection
      parameters:
      - description: Select the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ID of the owner.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the Artifactory connection ID.
        in: path
        name: artifactoryConnectionId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
          description: The response contains the details of the requested Artifactory
            connection.
      tags:
      - Configure Artifactory Connection
    put:
      description: 'Use this method to update an existing Artifactory connection.


        Permissions required: Edit IQ Elements'
      operationId: updateArtifactoryConnection
      parameters:
      - description: Specify the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ID of the owner.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the Artifactory connection ID.
        in: path
        name: artifactoryConnectionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
        description: Enter values for the new Artifactory connection.<ul><li>`isAnonymous`
          indicates if the connection is anonymous.</li><li>`baseUrl` is the baseURL
          of the Artifactory instance.</li><li>`username` and `password` to authenticate
          the Artifactory connection.</li></ul>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
          description: The response contains the updated Artifactory connection details.
      tags:
      - Configure Artifactory Connection
  /api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/{artifactoryConnectionId}/test:
    post:
      description: Use this method to test an existing Artifactory connection using
        the connection ID.
      operationId: testArtifactoryConnection_1
      parameters:
      - description: Enter the owner type.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ID of the owner.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the Artifactory connection ID.
        in: path
        name: artifactoryConnectionId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStatusDTO'
          description: The response contains the `code` and `message` indicating the
            status of the connection.
      tags:
      - Configure Artifactory Connection
  /api/v2/config/crowd:
    delete:
      description: 'Use this method to remove an existing Atlassian Crowd Configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteCrowdConfiguration
      responses:
        '204':
          description: The Atlassian Crowd Server configuration has been deleted.
      tags:
      - Config Crowd
    get:
      description: 'Use this method to retrieve the configuration details for the
        Atlassian Crowd Server.


        Permissions required: Edit System Configuration and Users'
      operationId: getCrowdConfiguration
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCrowdConfigurationDTO'
          description: The response contains the `serverUrl` and `applicationName`
            provided at the time of setting up the Crowd Server.
      tags:
      - Config Crowd
    put:
      description: 'Use this method to create a new or update an existing Atlassian
        Crowd Server configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: insertOrUpdateCrowdConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCrowdConfigurationDTO'
        description: 'The request JSON should include the `serverUrl`, `applicationName`,
          and the `applicationPassword` which will be used for authentication against
          the Atlassian Crowd Server.


          If updating the `serverUrl`, the `applicationPassword` field is required.'
      responses:
        '204':
          description: Update or create successful
      tags:
      - Config Crowd
  /api/v2/config/crowd/test:
    post:
      description: Use this method to test a new or an existing Atlassian Crowd Server
        configuration.
      operationId: testCrowdConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCrowdConfigurationDTO'
        description: 'To test an existing configuration, the request body is not required.


          To test a new configuration, provide the `serverURl`, `applicationName`,
          and `applicationPassword` for the configuration.'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStatusDTO'
          description: Test performed, results will be in the response message string.
      tags:
      - Config Crowd
  /api/v2/config/features/{feature}:
    delete:
      description: 'Use this method to disable an IQ Server feature.


        Permissions required: Edit System Configuration and Users'
      operationId: disableFeature
      parameters:
      - description: Enter the name of the IQ Server feature to be disabled.
        in: path
        name: feature
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The IQ Server feature has been successfully disabled.
        '400':
          description: Bad request, check for invalid feature name.
      tags:
      - Feature Configuration
    post:
      description: 'Use this method to enable an IQ Server feature.


        Permissions required: Edit System Configuration and Users'
      operationId: enabledFeature
      parameters:
      - description: Enter the name of the feature to be enabled.
        in: path
        name: feature
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The specified feature has been enabled successfully.
        '400':
          description: Bad request, check for invalid feature name.
      tags:
      - Feature Configuration
  /api/v2/config/httpProxyServer:
    delete:
      description: 'Use this method to remove an existing HTTP proxy server configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteConfiguration_3
      responses:
        '204':
          description: HTTP proxy server configuration deleted successfully.
        '404':
          description: No HTTP server configuration was found.
      tags:
      - Config Proxy Server
    get:
      description: 'Use this method to inspect an existing HTTP proxy server configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: getConfiguration_3
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiProxyServerConfigurationDTO'
          description: The response contains:<ul><li>`hostname` is host name or IP
            address of the HTTP proxy server to use for outgoing HTTP connections.</li><li>`port`
            is the port number for the HTTP proxy server.</li><li>`username` is the
            username needed to authenticate with the HTTP proxy server.</li><li>`password`
            is always null, never included for security purposes.</li><li>`passwordIsIncluded`
            is always FALSE </li><li>`excludeHosts` is a list of host names that are
            to be excluded from using the HTTP proxy server.</li></ul>
        '404':
          description: No HTTP proxy server configuration exists.
      tags:
      - Config Proxy Server
    put:
      description: 'Use this method to create or update an existing HTTP proxy server
        configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: setConfiguration_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiProxyServerConfigurationDTO'
        description: 'The request JSON could include: <ul><li>`hostname` is host name
          or IP address of the HTTP proxy server to use for outgoing HTTP connections.</li><li>`port`
          is the port number for the HTTP proxy server.</li><li>`username` is the
          username used to authenticate with the HTTP proxy server.</li><li>`password`
          is the password used for authentication with the HTTP proxy server.</li><li>`passwordIsIncluded`
          should be `true` if password is included in the request.<ul><li>If `true`
          but the password is not included the password will be considered as `null`.</li><li>Can
          be `false` for update operations that do not a require password change.
          Note that updating the hostname and port requires a password to be provided.</li>
          </ul><li>`excludeHosts` is a list of host names that are to be excluded
          from using the HTTP proxy server.</li></ul>'
      responses:
        '204':
          description: HTTP proxy server configuration successful.
        '400':
          description: Missing or invalid values.
      tags:
      - Config Proxy Server
  /api/v2/config/jira:
    delete:
      description: 'Use this method to delete a Jira configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteConfiguration_1
      responses:
        '204':
          description: Jira configuration deleted.
      tags:
      - Config Jira
    get:
      description: 'Use this method to retrieve an existing configuration for Jira.


        Permissions required: Edit System Configuration and Users'
      operationId: getConfiguration_1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiJiraConfigurationDTO'
          description: The response contains:<ol><li>`url` is the Jira server address.</li><li>`username`
            is the username used to connect to the Jira server.</li><li>`password`
            is the password used to authenticate on the Jira server.</li><li>`customFields`
            are any project issue type required fields defined in Jira.</li></ol>
        '404':
          description: No saved Jira configuration exists.
      tags:
      - Config Jira
    put:
      description: 'Use this method to set a Jira configuration. If a Jira configuration
        already exists, the values will be updated with the ones provided here. If
        the server URL is being changed, then the password (if any) will be required.


        Permissions required: Edit System Configuration and Users'
      operationId: setConfiguration_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiJiraConfigurationDTO'
        description: Enter the Jira configuration details here.
      responses:
        '204':
          description: Set Jira configuration successfully.
      tags:
      - Config Jira
  /api/v2/config/mail:
    delete:
      description: 'Use this method to disable or remove an SMTP configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteConfiguration_2
      responses:
        '204':
          description: SMTP configuration was removed successfully.
        '404':
          description: SMTP server configuration does not exist.
      tags:
      - Config Mail
    get:
      description: 'Use this method to review the configuration for an SMTP server.


        Permissions required: Edit System Configuration and Users'
      operationId: getConfiguration_2
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMailConfigurationDTO'
          description: The response contains:<ul><li>`hostname` is the hostname or
            IP address of the SMTP server used for outgoing mail.</li><li>`port` is
            the port number on which the SMTP server accepts email requests.</li><li>`username`
            is the username to authenticate users on the SMTP server.</li><li>`password`
            is always null, never included for security purposes for this method.</Li><li>`passwordIsIncluded`
            is always FALSE for this method.</li><li>`sslEnabled` is a boolean flag
            indicating if the connection to the SMTP server should use SSL/TLS right
            from the start.</li><li>`startIsEnabled` is a boolean flag indicating
            if the connection to the SMTP server should attempt to upgrade to SSL/TLS
            using the STARTTLS command.</li><li>`systemEmail` is the email address
            used for the FROM header in emails sent by the IQ Server.</li></ul>
        '404':
          description: No SMTP server is currently configured with the IQ Server.
      tags:
      - Config Mail
    put:
      description: 'Use this method to configure or update an existing SMTP server
        configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: setConfiguration_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiMailConfigurationDTO'
        description: Provide one or more values for the following in the JSON payload:<ul><li>`hostname`
          - is the hostname or IP address of the SMTP server used for outgoing mail.</li><li>`port`
          - is the port number on which the SMTP server accepts email requests.</li><li>`password`
          - depends upon the value of `passwordIsIncluded`.</li><li>`passwordIsIncluded`
          - if set to true, value must be provided for `password`, null is allowed.If
          set to false, the previous value will remain unchanged, provided that `hostname`
          and `port` are not changed.<li>`sslEnabled` - is a boolean flag indicating
          if the connection to the SMTP server should use SSL/TLSright from the start.</li><li>`startIsEnabled`-
          is a boolean flag indicating if the connection to the SMTP server should
          attempt toupgrade to SSL/TLS using the STARTTLS command.<li>`systemEmail`
          - is the email address used for the FROM header in emails sent by the IQ
          Server.</li></ul>
      responses:
        '204':
          description: SMTP server configuration was updated successfully.
        '400':
          description: Missing or invalid values provided.
      tags:
      - Config Mail
  /api/v2/config/mail/test/{recipientEmail}:
    post:
      description: 'Use this method to test an SMTP configuration, without affecting
        the current configuration.


        Permissions required:Edit System Configuration and Users'
      operationId: testConfiguration
      parameters:
      - description: Enter the test recipient email address.
        in: path
        name: recipientEmail
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiMailConfigurationDTO'
        description: Provide one or more values for the following in the JSON payload:<ul><li>`hostname`
          - is the hostname or IP address of the SMTP server used for outgoing mail.</li><li>`port`
          - is the port number on which the SMTP server accepts email requests.</li><li>`password`
          - depends upon the value of `passwordIsIncluded`.</li><li>`passwordIsIncluded`
          - if set to true, value must be provided for `password`, null is allowed.If
          set to false, the previous value will remain unchanged, provided that `hostname`
          and `port` are not changed.<li>`sslEnabled` - is a boolean flag indicating
          if the connection to the SMTP server should use SSL/TLSright from the start.</li><li>`startIsEnabled`-
          is a boolean flag indicating if the connection to the SMTP server should
          attempt toupgrade to SSL/TLS using the STARTTLS command.<li>`systemEmail`
          - is the email address used for the FROM header in emails sent by the IQ
          Server.</li></ul>
      responses:
        '204':
          description: The test email was sent successfully.
        '400':
          description: Missing or invalid values provided.
      tags:
      - Config Mail
  /api/v2/config/reverseProxyAuthentication:
    delete:
      description: 'Use this method to remove an existing reverse proxy server configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteConfiguration_4
      responses:
        '204':
          description: Reverse proxy server configuration deleted successfully.
      tags:
      - Config Reverse Proxy Authentication
    get:
      description: 'Use this method to inspect an existing reverse proxy server configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: getConfiguration_4
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReverseProxyAuthenticationConfigurationDTO'
          description: The response contains:<ul><li>`enabled` indicates if the configuration
            is enabled.</li><li>`usernameHeader` is the name of the HTTP request header
            field that contains the username. The default value is `REMOTE_USER`.</li><li>`csrfProtectionDisabled`
            indicates if Cross-Site Request Forgery (CSRF) protection is disabled.
            Used for backward compatibility with old client plugins.</li><li>`logoutUrl`
            is the redirect URL when a user logs out. If set to `null` the user will
            not be redirected.</li></ul>
        '404':
          description: No reverse proxy server configuration exists.
      tags:
      - Config Reverse Proxy Authentication
    put:
      description: 'Use this method to configure the reverse proxy server.


        Permissions required: Edit System Configuration and Users'
      operationId: setConfiguration_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiReverseProxyAuthenticationConfigurationDTO'
        description: 'The request JSON could include: <ul><li>`enabled` indicates
          if the configuration is enabled.</li><li>`usernameHeader` is the name of
          the HTTP request header field that contains the username. The default value
          is `REMOTE_USER`.</li><li>`csrfProtectionDisabled` indicates if Cross-Site
          Request Forgery (CSRF) protection is disabled. Used for backward compatibility
          with old client plugins.</li><li>`logoutUrl` is the redirect URL when a
          user logs out. If set to `null` the user will not be redirected.</li></ul>'
      responses:
        '204':
          description: Reverse proxy server configuration successful.
        '400':
          description: Missing or invalid values.
      tags:
      - Config Reverse Proxy Authentication
  /api/v2/config/saml:
    delete:
      description: 'Use this method to delete the SAML configuration.


        Permissions required: Edit System Configuration and Users.'
      operationId: deleteSamlConfiguration
      responses:
        '204':
          description: Successfully deleted the SAML configuration.
        '404':
          description: No SAML configuration found.
      tags:
      - Config SAML
    get:
      description: 'Use this method to inspect the SAML configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: getSamlConfiguration
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSamlConfigurationResponseDTO'
          description: The response contains:<ul><li>`identityProviderName` the name
            of the Identity Provider that is displayed on the login page when SAML
            is configured.</li><li>`entityId` is the URI that IQ Server uses to identify
            itself in requests to the SSOservice.</li><li>`firstNameAttribute` is
            the SAML attribute that IQ Server extracts from the login response of
            the identity provider and uses as the user's first name.</li><li>`lastNameAttribute`
            is the SAML attribute that IQ Server extracts from the login response
            of the identity provider and uses as the user's last name.</li><li>`emailAttributeName`
            is the SAML attribute that IQ Server extracts from the login response
            of the identity provider to determine the user's email address.</li><li>`usernameAttributeName`
            is the SAML attribute that IQ Server extracts from the login response
            of the identity provider to determine the username or id.</li><li>`groupAttributeName`
            is the SAML attribute that IQ Server extracts from the login response
            of the identity provider to determine the groups the user belongs to.</li><li>`validateResponseSignature`
            indicates whether the SAML responses from the identity provider  are cryptographically
            signed. A `null` value indicates that this setting is derived from the
            SAML metadata from the identity provider performing signature validation
            if a signing key (`KeyDescriptor`) is included.<li>`validateAssertionSignature`
            indicates whether the SAML assertions from the identity provider  are
            cryptographically signed. A `null` value indicates that this setting is
            derived from  the SAML metadata from the identity provider performing
            signature validation if a signing key (`KeyDescriptor`) is included.</li><li>`identityProviderMetadataXml`
            is the metadata of the identity provider.</li></ul>
        '404':
          description: SAML is not configured.
      tags:
      - Config SAML
  /api/v2/config/saml/metadata:
    get:
      description: 'Use this method to retrieve IQ Server''s metadata service provider
        descriptor.


        Permissions required: Edit System Configuration and Users'
      operationId: getMetadata
      responses:
        '200':
          content:
            application/xml:
              schema:
                type: string
          description: The IQ Server's metadata service provider descriptor in XML
            format.
        '404':
          description: SAML is not configured.
      tags:
      - Config SAML
  /api/v2/config/sourceControl:
    delete:
      description: 'Use this method to delete an existing SCM configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteConfiguration_5
      responses:
        '204':
          description: SCM configuration deleted successfully.
      tags:
      - Config Source Control
    get:
      description: 'Use this method to retrieve an existing SCM configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: getConfiguration_5
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceControlConfigurationDTO'
          description: 'The response contains: <ul><li>`cloneDirectory` is the location
            of the cloned repository that will be used by the IQ server. If a relative
            path is provided, then that path will be created inside the  `sonatype-work`
            directory and your repository will be created within this. A return value
            `source-control` indicates that this setting is not configured.</li><li>`gitImplementation`
            will have the value `java` for JGit or `native` for a native git client.</li><li>`prCommentPurgeWindow`
            is the number of days until the comments of a Pull Request (PR) are allowed
            to be purged.</li><li>`prEventPurgeWindow` is the number of days until
            PR events are allowed to be purged.</li><li>`gitExecutable` is the absolute
            path to a native client. No value indicates the native git client is on
            the system path.</li>`gitTimeoutSeconds` is the number of seconds a git
            command can execute before timing out.</li>`commitUsername` is the username
            that will be used for the SCM features. The value `NexusIQ` indicates
            the default value.</li>`commitEmail` is the commit email that will be
            used for the SCM features.`useUsernameInRepositoryCloneUrl` indicates
            if the username will be added to the URL for the cloned repository. This
            can be used in conjunction with `commitEmail` to support the  ''Verified
            Committer'' feature of Bitbucket.</li>`defaultBranchMonitoringStartTime`
            has a default value between 00:00 and 00:10. It is the time at which the
            default branch monitoring will start for the first time.</li>`defaultBranchMonitoringIntervalHours`
            is the number of hours elapsed between the executions of default branch
            monitoring by the IQ Server. The default value is 24 hours.</li><li>`pullRequestMonitoringIntervalSeconds`
            is the time in seconds between consecutive execution of PR monitoring.
            The default value is 60 seconds.</li></ul> '
        '404':
          description: No SCM configuration found
      tags:
      - Config Source Control
    put:
      description: 'Use this method to set an SCM Configuration with the IQ Server.


        Permissions required: Edit System Configuration and Users'
      operationId: setConfiguration_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSourceControlConfigurationDTO'
        description: 'Provide the settings for the SCM configuration as below: <ul><li>`cloneDirectory`
          is the location of the cloned repository that will be used by the IQ server.
          If a relative path is provided, then that path will be created inside the  `sonatype-work`
          directory and your repository will be created within this. A return value
          `source-control` indicates that this setting is not configured.</li><li>`gitImplementation`
          will have the value `java` for JGit or `native` for a native git client.</li><li>`prCommentPurgeWindow`
          is the number of days until the comments of a Pull Request (PR) are allowed
          to be purged.</li><li>`prEventPurgeWindow` is the number of days until PR
          events are allowed to be purged.</li><li>`gitExecutable` is the absolute
          path to a native client. No value indicates the native git client is on
          the system path.</li>`gitTimeoutSeconds` is the number of seconds a git
          command can execute before timing out.</li>`commitUsername` is the username
          that will be used for the SCM features. The value `NexusIQ` indicates the
          default value.</li>`commitEmail` is the commit email that will be used for
          the SCM features.`useUsernameInRepositoryCloneUrl` indicates if the username
          will be added to the URL for the clonedrepository. This can be used in conjunction
          with `commitEmail` to support the ''Verified Committer'' feature of Bitbucket.</li>`defaultBranchMonitoringStartTime`
          has a default value between 00:00 and 00:10. It is the time at which the
          default branch monitoring will start for the first time.</li>`defaultBranchMonitoringIntervalHours`
          is the number of hours elapsed between the executions of default branch
          monitoring by the IQ Server. The default value is 24 hours.</li><li>`pullRequestMonitoringIntervalSeconds`
          is the time in seconds between consecutive execution of PR monitoring. The
          default value is 60 seconds.</li></ul>'
      responses:
        '204':
          description: SCM configuration successfully updated.
      tags:
      - Config Source Control
  /api/v2/config/zscaler:
    delete:
      description: 'Use this method to disable or remove the Zscaler configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteConfiguration_6
      responses:
        '204':
          description: Zscaler configuration was removed successfully.
        '404':
          description: Zscaler server configuration does not exist.
      tags:
      - Config Zscaler
    get:
      description: 'Use this method to review the configuration for a Zscaler server.


        Permissions required: Edit System Configuration and Users'
      operationId: getConfiguration_6
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiZScalerConfigurationDTO'
          description: The response contains:<ul><li>`username` is the username to
            authenticate with the Zscaler server.</li><li>`password` is always null,
            never included for security purposes for this method.</Li><li>`hostname`
            is the hostname or IP address of the Zscaler server.</li><li>`apiKey`
            is the apiKey used for communicating with the Zscaler service.</li></ul>
        '404':
          description: No Zscaler server is currently configured with the IQ Server.
      tags:
      - Config Zscaler
    put:
      description: 'Use this method to configure or update an existing Zscaler server
        configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: setConfiguration_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiZScalerConfigurationDTO'
        description: Provide one or more values for the following in the JSON payload:<ul><li>`username`
          - is the username for the Zscaler server.</li><li>`password` - is the password
          for the Zscaler server.</li><li>`hostname` - is the hostname or IP address
          of the Zscaler server.</li><li>`apiKey` - is the apiKey for the Zscaler
          Server.</li><li>`eulaAgreed` - is the agreement to the Sonatype's end user
          license agreement.</li><li>`mavenFormatEnabled` - is the flag to enable
          or disable the Maven format for Zscaler.</li><li>`npmFormatEnabled` - is
          the flag to enable or disable the Npm format for Zscaler.</li><li>`pypiFormatEnabled`
          - is the flag to enable or disable the Pypi format for Zscaler.</li><li>`nugetFormatEnabled`
          - is the flag to enable or disable the Nuget format for Zscaler.</li></ul>
      responses:
        '204':
          content:
            text/html:
              schema:
                type: string
          description: Zscaler server configuration was updated successfully.
        '400':
          description: Missing or invalid values provided.
      tags:
      - Config Zscaler
  /api/v2/config/zscaler/testConfig:
    post:
      description: 'Use this method to test Zscaler server configuration.


        Permissions required: Edit System Configuration and Users'
      operationId: testConfiguration_1
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ApiZScalerConfigurationDTO'
        description: Provide one or more values for the following in the JSON payload:<ul><li>`username`
          - is the username for the Zscaler server.</li><li>`password` - is the password
          for the Zscaler server.</li><li>`hostname` - is the hostname or IP address
          of the Zscaler server.</li><li>`apiKey` - is the apiKey for the Zscaler
          Server.</li></ul>
      responses:
        '204':
          description: Test Zscaler server configuration was successful.
        '400':
          description: Missing or invalid values provided.
      tags:
      - Config Zscaler
  /api/v2/config/zscaler/update:
    delete:
      description: 'Use this endpoint to delete all configured formats from your Zscaler
        instance


        Permissions required: Edit System Configuration and Users'
      operationId: deleteAllCategories
      responses:
        '204':
          description: Zscaler deleted custom urls.
        '404':
          description: Zscaler unable to remove custom urls
      tags:
      - Config Zscaler
    post:
      description: 'Use this endpoint to trigger an update of all configured formats
        to your Zscaler instance


        Permissions required: Edit System Configuration and Users'
      operationId: triggerUpdateAll
      responses:
        '204':
          description: Zscaler updated custom urls successfully.
        '404':
          description: Zscaler unable to update custom urls
      tags:
      - Config Zscaler
  /api/v2/config/zscaler/update/{format}:
    delete:
      description: 'Use this endpoint to delete a specific format from your Zscaler
        instance


        Permissions required: Edit System Configuration and Users'
      operationId: deleteCategory
      parameters:
      - in: path
        name: format
        required: true
        schema:
          enum:
          - MAVEN
          - NPM
          - PYPI
          - NUGET
          type: string
      responses:
        '204':
          description: Zscaler updating a format was successful.
        '404':
          description: Zscaler updating a format was not successful
      tags:
      - Config Zscaler
    post:
      description: 'Use this endpoint to trigger an update to your Zscaler instance


        Permissions required: Edit System Configuration and Users'
      operationId: triggerUpdate
      parameters:
      - in: path
        name: format
        required: true
        schema:
          enum:
          - MAVEN
          - NPM
          - PYPI
          - NUGET
          type: string
      responses:
        '204':
          description: Zscaler updated custom urls for format.
        '404':
          description: Zscaler unable to update custom urls for format.
      tags:
      - Config Zscaler
  /api/v2/config/zscaler/zscalerLimits:
    get:
      description: 'Returns the current Zscaler quota.


        Permissions required: None'
      operationId: getQuota
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiZScalerQuotaDTO'
          description: Successfully retrieved the Zscaler quota.
      tags:
      - Config Zscaler
  /api/v2/cycloneDx/{cdxVersion}/{applicationId}/reports/{reportId}:
    get:
      description: 'Use this method to generate a CycloneDX SBOM for an application.<p>Permissions
        Required: View IQ Elements'
      operationId: getByReportId
      parameters:
      - description: Enter the internal applicationId for the application you want
          to generate the SBOM. You can also retrieve the applicationId using the
          Application REST API.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the reportId to generate the SBOM for the application for
          a specific scan report.
        in: path
        name: reportId
        required: true
        schema:
          type: string
      - description: Possible values are 1.1|1.2|1.3|1.4|1.5|1.6.
        in: path
        name: cdxVersion
        required: true
        schema:
          pattern: 1.1|1.2|1.3|1.4|1.5|1.6
          type: string
      responses:
        '200':
          content:
            application/json: {}
            application/xml: {}
          description: A downloadable file will be generated.
      tags:
      - CycloneDX
  /api/v2/cycloneDx/{cdxVersion}/{applicationId}/stages/{stageId}:
    get:
      description: 'Use this method to generate a CycloneDX SBOM for an application.<p>Permissions
        Required: View IQ Elements'
      operationId: getLatest
      parameters:
      - description: Enter the internal applicationId for the application you want
          to generate the SBOM. You can also retrieve the applicationId using the
          Application REST API.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the stageId to generate the SBOM based on the latest application
          policy evaluation at that stage. Allowed values for stageId are 'develop',
          'source', 'build', 'stage-release', 'release', and, 'operate'.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      - description: Possible values are 1.1|1.2|1.3|1.4|1.5|1.6.
        in: path
        name: cdxVersion
        required: true
        schema:
          pattern: 1.1|1.2|1.3|1.4|1.5|1.6
          type: string
      responses:
        '200':
          content:
            application/json: {}
            application/xml: {}
          description: A downloadable file will be generated.
      tags:
      - CycloneDX
  /api/v2/dataRetentionPolicies/organizations/{organizationId}:
    get:
      description: 'Data retention policies help to limit the disk space consumption
        by removing obsolete data. Use this method to inspect the retention policies
        that are in effect for an organization. Application reports created by continuous
        monitoring are not affected by the stage retention policy. They appear separately
        under the key continuous-monitoring in the response JSON<p>Permissions required:
        View IQ Elements'
      operationId: getDataRetentionPolicies
      parameters:
      - description: The organizationId assigned by IQ Server. Use the organization
          REST API to retrieve the organizationId.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDataRetentionPoliciesDTO'
          description: The response JSON contains the policy settings for both applicationReports
            and successMetrics. Policy settings for application reports are shown
            for each stage of development. <ul><li>inheritPolicy IS a boolean flag
            indicating whether the policy is inherited from a parent organization.</li><li>enablePurging
            IS a boolean flag indicating if automatic purging is enabled or disabled.</li><li>maxCount
            IS the maximum no. of reports to retain.</li><li>maxAge IS the maximum
            age that a report is allowed to reach before it is purged. Possible values
            are days, weeks, months, years.</li></ul>The latest application report
            is always retained, regardless of its age.
      tags:
      - Data Retention Policies
    put:
      description: 'Data retention policies help to limit the disk space consumption
        by removing obsolete data. Use this method to set the retention policies for
        an organization. Application reports created by continuous monitoring are
        not affected by the stage retention policy. They appear separately under the
        key continuous-monitoring.<p>Permissions required: Edit IQ Elements'
      operationId: setDataRetentionPolicies
      parameters:
      - description: The organizationId for the organization you want to set the data
          retention policy. Use the organization REST API to retrieve the organizationId.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiDataRetentionPoliciesDTO'
        description: "The request JSON should include the retention policy settings\
          \ for both application reports and success metrics.\n\nPolicy settings for\
          \ application reports can be specified for each stage of development represented\
          \ in the example below by additionalProp1. \nExample values for additionalProp1\
          \ are develop, build, stage-release, release, operate & continuous monitoring.\
          \ For application reports created during continuous monitoring use the key\
          \ continuous-monitoring instead of the stage name. <ul><li>inheritPolicy\
          \ IS a boolean flag indicating whether the policy is inherited from a parent\
          \ organization.</li><li>enablePurging IS a boolean flag indicating enabled\
          \ or disabled status for automatic purging. </li><li>maxCount IS the maximum\
          \ no. of reports to retain.</li><li>maxAge IS the maximum age that a report\
          \ is allowed to reach before it is purged. Possible values are days, weeks,\
          \ months, years.</li></ul>"
        required: true
      responses:
        '200':
          description: The data retention policy has been set successfully.
      tags:
      - Data Retention Policies
  /api/v2/dataRetentionPolicies/organizations/{organizationId}/parent:
    get:
      description: 'Data retention policies help to limit the disk space consumption
        by removing obsolete data. Use this method to inspect the retention policies
        that are in effect for the parent organization of the given organization.
        Application reports created by continuous monitoring are not affected by the
        stage retention policy. They appear separately under the key continuous-monitoring.<p>Permissions
        required: View IQ Elements'
      operationId: getParentDataRetentionPolicies
      parameters:
      - description: The organizationId assigned by IQ Server. Use the organization
          REST API to retrieve the parent organizationId
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDataRetentionPoliciesDTO'
          description: The response JSON contains the policy settings for both applicationReports
            and successMetrics. Policy settings for application reports are shown
            for each stage of development. <ul><li>inheritPolicy IS a boolean flag
            indicating whether the policy is inherited from a parent organization.</li><li>enablePurging
            IS a boolean flag indicating if automatic purging is enabled or disabled.</li><li>maxCount
            IS the maximum no. of reports to retain.</li><li>maxAge IS the maximum
            age that a report is allowed to reach before it is purged. Possible values
            are days, weeks, months, years.</li></ul>The latest application report
            is always retained, regardless of its age.
      tags:
      - Data Retention Policies
  /api/v2/developer/priorities/{applicationId}/{scanId}:
    get:
      description: 'Use this method to retrieve all priorities by providing the application
        ID and scan ID.


        Permissions required: View IQ Elements'
      operationId: getPriorities
      parameters:
      - description: Enter the applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the scanId.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Whether to include remediation type and version for the component
          or not
        in: query
        name: includeRemediation
        schema:
          default: false
          type: boolean
      - description: Current page number.
        in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - description: Enter the no. of results that should be visible per page.
        in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - description: Component name to filter by
        in: query
        name: componentNameFilter
        schema:
          type: string
      - description: Whether to enable Fail/Warn policy action filter or not
        in: query
        name: filterOnPolicyActions
        schema:
          default: true
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevelopmentPrioritizationResults'
          description: 'The response field `priorities` returns prioritized components
            for the specified

            application ID and scan ID. Each result has relevant component information,
            reachability

            information, policy information, and a priority number, sorted by priority
            in descending order.

            Pagination is supported, and the default page size is 10.

            The parameter `includeRemediation` is required for the paginated result
            to

            include remediation information.'
      tags:
      - Developer Priorities
  /api/v2/developer/priorities/{applicationId}/{scanId}/export:
    get:
      description: 'Use this method to retrieve the priorities, by providing the applicationId
        and scanId.


        Permissions required: View IQ Elements'
      operationId: getPrioritiesExport
      parameters:
      - description: Enter the applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the scanId.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 'The response is a CSV that contains all the prioritized components
            for the specified

            applicationId and scanId. Each line has all relevant component information,
            reachability

            information, policy information, and the priority assigned to it.'
      tags:
      - Developer Priorities
  /api/v2/endpoints/{apiType}:
    get:
      description: Use this method to retrieve the OpenAPI documentation for the specified
        type of IQ Server REST API.
      operationId: getOpenAPI
      parameters:
      - description: Select the type of the API.<ul><li> `public` APIs are Generally
          Available and fully supported by Sonatype.</li><li> `experimental` APIs
          are not production ready, may change, and are not intended to be used in
          critical workloads.</li></ul>
        in: path
        name: apiType
        required: true
        schema:
          enum:
          - public
          - experimental
          pattern: public|experimental
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: The response contains the OpenAPI documentation.
      tags:
      - Endpoints
  /api/v2/evaluation/applications/{applicationId}:
    post:
      description: 'Use this method to request a component evaluation. This is step
        1 of the 2 step policy evaluation for components process.


        Permissions Required: Evaluate Components'
      operationId: evaluateComponents
      parameters:
      - description: Enter the internal applicationId. Use the Applications REST API
          to retrieve the internal applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiComponentEvaluationRequestDTOV2'
        description: The request JSON should contain component coordinates or the
          hash (SHA1) for each component. You can provide the packageURL instead of
          component information or hash.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentEvaluationTicketDTOV2'
          description: 'The JSON response contains resultId that will be assigned
            to the evaluation results, timestamp when the component evaluation was
            requested, the applicationId of the component and the results URL. The
            resultId obtained from here can be used to retrieve the evaluation result
            using the REST API or the result URL can be used in cURL. '
      tags:
      - Policy Evaluation
  /api/v2/evaluation/applications/{applicationId}/promoteScan:
    post:
      description: "Use this method to rescan older scans. This is done when the binaries\
        \ of a previous build are now moving to a new stage in the production pipeline.\
        \ Using this method, you can avoid rebuilding the application and reuse the\
        \ scan metadata at the newer stage. This new evaluation will evaluate the\
        \ most recent security and license data against your current policies. \n\n\
        Permissions Required: Evaluate Applications"
      operationId: promoteScan
      parameters:
      - description: Enter the internal applicationId. Use the Applications REST API
          to retrieve the internal applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPromoteScanRequestDTOV2'
        description: You can provide either the scanId (reportId) of the previous
          scan OR the source stageId (possible values are 'build', 'stage-release',
          'release' or 'operate'). When using the stageId, the latest scanId for the
          application will be used. Enter the targetStageId for the new stage you
          want your scan to be promoted to (possible values are 'build', 'stage-release',
          'release' or 'operate'). Using the same value for source and target stage
          will resubmit the latest scan report.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationEvaluationStatusDTOV2'
          description: The response will contain the statusUrl to view the evaluation
            result using the GET method (step 2)
      tags:
      - Policy Evaluation
  /api/v2/evaluation/applications/{applicationId}/results/{resultId}:
    get:
      description: "This is step 2 of the policy evaluation process for components.\
        \ Use the resultId obtained from the POST response for the corresponding applicationId.\
        \ \n\nPermissions Required: Evaluate Components "
      operationId: getComponentEvaluation
      parameters:
      - description: Enter the internal applicationId (same as that sent in the POST
          request (step 1))
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the resultId obtained from the POST response (step 1) used
          for component evaluation.
        in: path
        name: resultId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentEvaluationResultDTOV2'
          description: The response contains details for the policy evaluation request
            including submitted date, evaluation date, applicationId and the results
            of the evaluation for the component(s).
        '404':
          description: 'Response not ready '
      tags:
      - Policy Evaluation
  /api/v2/evaluation/applications/{applicationId}/sourceControlEvaluation:
    post:
      description: "Use this method to request a source control evaluation for a specific\
        \ application. This is step 1 of the 2 step source control evaluation process.\
        \ \n\nPermissions Required: Evaluate Applications"
      operationId: evaluateSourceControl
      parameters:
      - description: Enter the internal applicationId. Use the Applications REST API
          to retrieve the internal applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSourceControlEvaluationRequestDTO'
        description: The request JSON should include the 1. branch name (name of the
          target branch in the source control repository, 2. stageId (recommended
          values are 'develop' for feature branches, and 'source' for default branches.
          Other stageIds that can be used are 'build', 'stage-release', 'release',
          'operate' but are not recommended), 3. scanTargets (optional, specify one
          or more paths inside the repository. If not specified, the entire repository
          will be evaluated by default). Ensure that the repository paths are not
          relative and do not contain '../' or '..\'.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationEvaluationStatusDTOV2'
          description: 'The response contains statusUrl. Use this statusUrl to check
            the evaluation status using the GET method (step 2 of the evaluation process). '
      tags:
      - Policy Evaluation
  /api/v2/evaluation/applications/{applicationId}/status/{statusId}:
    get:
      description: "This is step 2 of the policy evaluation process. Use the statusUrl\
        \ obtained from the POST response for the corresponding applicationId. \n\n\
        Permissions Required: Evaluate Applications"
      operationId: getApplicationEvaluationStatus
      parameters:
      - description: Enter the applicationId, for the which policy evaluation was
          requested.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the statusId value obtained as response of the POST call
          in step 1.
        in: path
        name: statusId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationEvaluationResultDTOV2'
          description: 'The response will include one of the 3 possible status values:
            PENDING (indicates that the evaluation is still in progress), FAILED or
            COMPLETED. For completed evaluations, the response will contain the URLs
            for evaluation report to view the evaluation results.'
      tags:
      - Policy Evaluation
  /api/v2/firewall/components/autoReleasedFromQuarantine:
    get:
      description: 'Use this method to retrieve the details of components that are
        auto-released from quarantine.


        Permissions required: View IQ Elements'
      operationId: getUnquarantineList
      parameters:
      - description: Enter the page number.
        in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - description: Enter the number of results to be returned for a page.
        in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - description: Enter the `policyId`. When provided, the results will include
          the components that have a policy violation for the policyId.
        in: query
        name: policyId
        schema:
          type: string
      - description: Enter the component name. When provided, the results will include
          components with display names (case-insensitive) that match the given name.
        in: query
        name: componentName
        schema:
          type: string
      - description: Enter the sort criteria `releaseQuarantineTime` or `quarantineTime`.
        in: query
        name: sortBy
        schema:
          type: string
      - description: Select `true` to set the sort order to ascending.
        in: query
        name: asc
        schema:
          default: true
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFirewallComponentDTOResult'
          description: The response includes:<ul><li>`total` is the total number of
            records this request can return across all pages.</li><li>`page` is the
            page number specified in the request.</li><li>`pageSize` is the page size
            specified in the request.</li><li>`pageCount` is the total number of pages
            this request can return.</li></ul>The `results` section contains details
            of each component that has been auto-released. It includes:<ul><li>`displayName`
            is the name and version of the component.</li><li>`repository` indicates
            the repository name where the component is stored.</li><li>`quarantineDate`
            is the date and time when the component was quarantined.</li><li>`dateCleared`
            is the date and time when the component was auto-released from quarantine.</li><li>`quarantinePolicyViolations`
            will be empty for components that are auto-released.</li><li>`componentIdentifier`
            is the format and coordinates for the component.</li><li>`pathname` indicates
            the component path in the repository.</li><li>`hash` is the hash of the
            component.</li><li>`matchState` indicates the whether the component is
            an `EXACT` or `SIMILAR` match to the known  components or is `UNKNOWN`.</li><li>`repositoryId`
            is the ID of the repository where the component is stored.</li><li>`quarantined`
            indicates whether the component is quarantined.</li></ul>
          headers:
            Link:
              description: Pagination links (first, last, next, prev)
              schema:
                type: string
              style: simple
      tags:
      - Firewall
  /api/v2/firewall/components/quarantined:
    get:
      description: 'Use this method to request a list of quarantined components.


        Permissions required: View IQ Elements'
      operationId: getQuarantineList
      parameters:
      - description: Enter the starting page number for the response.
        in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - description: Enter the page size for the response.
        in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - description: Enter the list of policy IDs causing the quarantine.
        in: query
        name: policyId
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - description: Enter the component name.
        in: query
        name: componentName
        schema:
          type: string
      - description: Enter the repository public ID of the quarantined component.
        in: query
        name: repositoryPublicId
        schema:
          type: string
      - description: Enter the quarantine time of the component.
        in: query
        name: quarantineTime
        schema:
          format: int32
          type: integer
      - description: Enter `quarantineTime` to sort the results by quarantine time.
        in: query
        name: sortBy
        schema:
          type: string
      - description: Select the sort order.
        in: query
        name: asc
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFirewallQuarantinedComponentDtoResult'
          description: The response includes:<ul><li>`total` is the total number of
            records this request can return across all pages.</li><li>`page` is the
            page number specified in the request.</li><li>`pageSize` is the page size
            specified in the request.</li><li>`pageCount` is the total number of pages
            this request can return.</li></ul>The `results` section contains details
            of each component that has been auto-released. It includes:<ul><li>`threatLevel`
            is the threat level of the policy violation.</li><li>`policyName` is the
            name of the violated policy.</li><li>`quarantined` indicates whether the
            component is quarantined.</li><li>`quarantineDate` is the date and time
            when the component was quarantined.</li><li>`componentIdentifier` is the
            format and coordinates for the component.</li><li>`pathname` indicates
            the component path in the repository.</li><li>`displayName` is the name
            and version of the component.</li><li>`repositoryId` is the ID of the
            repository where the component is stored.</li><li>`repositoryName` indicates
            the repository name where the component is stored.</li><li>`hash` is the
            hash of the component.</li><li>`matchState` indicates the whether the
            component is an `EXACT` or `SIMILAR` match to the known components or
            is `UNKNOWN`.</li></ul>
          headers:
            Link:
              description: Pagination links (first, last, next, prev)
              schema:
                type: string
              style: simple
      tags:
      - Firewall
  /api/v2/firewall/components/{repositoryManagerId}/{repositoryId}/evaluate:
    post:
      description: 'Use this method to evaluate components (max. 100).


        Permissions required: Evaluate Individual Components'
      operationId: evaluateComponents_1
      parameters:
      - description: Enter the repository manager ID.
        in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      - description: Enter the repository ID.
        in: path
        name: repositoryId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRepositoryComponentEvaluationRequestList'
        description: Provide the array of the component identifiers to be evaluated,
          using the component hash and the (packageUrl or pathname). A maximum of
          100 components can be evaluated in one request.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryComponentEvaluationResultList'
          description: The response contains the evaluation results.
      tags:
      - Firewall
  /api/v2/firewall/container-image/policyViolations/quarantined:
    get:
      description: 'Use this method to find all container images currently in quarantine.


        Permissions required: Read'
      operationId: getContainerImagesInQuarantine
      parameters:
      - in: query
        name: page
        schema:
          format: int32
          minimum: 1
          type: integer
      - in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerImageInQuarantineDataResult'
          description: Container images in quarantine.
          headers:
            Link:
              description: Pagination links (first, last, next, prev)
              schema:
                type: string
              style: simple
      tags:
      - Firewall
  /api/v2/firewall/container-image/policyWaiver:
    get:
      description: "Use this method to get all policy waivers for container images.\
        \ \n\nPermissions required: Waive Policy Violations"
      operationId: getWaivers
      parameters:
      - in: query
        name: page
        schema:
          format: int32
          minimum: 1
          type: integer
      - in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyContainerWaiverDataResult'
          description: Policy waivers for container images.
          headers:
            Link:
              description: Pagination links (first, last, next, prev)
              schema:
                type: string
              style: simple
      tags:
      - Firewall
  /api/v2/firewall/container-image/{containerImageId}/policyWaiver:
    delete:
      description: 'Use this method to delete a container waiver, specified by the
        containerImageId.


        Permissions required: Waive Policy Violations'
      operationId: deleteContainerImagePolicyWaiver
      parameters:
      - description: Enter the container id.
        in: path
        name: containerImageId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Waiver has been deleted successfully.
      tags:
      - Firewall
    post:
      description: "Use this method to create a waiver for all policy violations of\
        \ a container Image. \n\nPermissions required: Waive Policy Violations"
      operationId: addWaiver
      parameters:
      - description: Enter the container image id.
        in: path
        name: containerImageId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiContainerImageWaiverDTO'
        description: 'The request JSON can include the fields<ol><li>expiryTime (default
          null): Sets the datetime when the waiver expires.</li><li>waiverReasonId
          (default null): Sets the specific reason chosen for the waiver.</li><li>comment
          (default null): Further explanation about the waiver.</li></ol>'
      responses:
        '204':
          description: Waiver has been created successfully.
      tags:
      - Firewall
  /api/v2/firewall/metrics/embedded:
    get:
      description: 'Use this method to retrieve firewall dashboard metrics.


        Permissions required: View IQ Elements'
      operationId: getFirewallMetrics
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/ApiFirewallMetricsResultDTO'
                type: object
          description: The response contains a map of firewall metric name to value
            including the last updated time.
      tags:
      - Firewall
  /api/v2/firewall/namespace_confusion/{format}:
    delete:
      description: 'Removes proprietary component namespaces for the specified format.


        Permissions required: Evaluate Individual Components'
      operationId: removeProprietaryComponentNames
      parameters:
      - description: Format for which the proprietary namespaces are being removed.
        example: maven
        in: path
        name: format
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Namespaces successfully removed.
      tags:
      - Firewall
    post:
      description: 'Adds a list of proprietary component namespaces for the specified
        format to prevent namespace confusion attacks.


        Permissions required: Evaluate Individual Components'
      operationId: addProprietaryComponentNames
      parameters:
      - description: Format for which the proprietary namespaces are being added.
        example: maven
        in: path
        name: format
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of namespaces to register as proprietary for this format.
        required: true
      responses:
        '204':
          description: Namespaces successfully added.
      tags:
      - Firewall
  /api/v2/firewall/quarantine/summary:
    get:
      description: 'Use this method to request a summary of quarantined components.


        Permissions required: View IQ Elements'
      operationId: getQuarantineSummary
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFirewallQuarantineSummaryDTO'
          description: The response contains:<ul><li>`repositoryCount` is the total
            number of repositories.</li><li>`quarantineEnabledRepositoryCount` is
            the total number of repositories with quarantine  capability enabled.</li><li>`quarantinedEnabled`
            indicates if any repository has the quarantine capability enabled.</li><li>`totalComponentCount`
            is the total number of components across all repositories.</li><li>`quarantinedComponentCount`
            is the total number of quarantined components.</li></ul>
      tags:
      - Firewall
  /api/v2/firewall/quarantinedComponentView/configuration/anonymousAccess:
    get:
      description: 'Use this method to determine if the quarantined component(s) details
        can be accessed anonymously.


        Permissions required: None'
      operationId: getQuarantinedComponentViewAnonymousAccess
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: boolean
          description: The response returns `true` if anonymous access to quarantined
            components is enabled.
      tags:
      - Firewall
  /api/v2/firewall/quarantinedComponentView/configuration/anonymousAccess/{enabled}:
    put:
      description: 'Use this method to enable/disable anonymous access to view the
        quarantined components.


        Permissions required: Edit IQ Elements'
      operationId: setQuarantinedComponentViewAnonymousAccess
      parameters:
      - description: Select `true` or `false` to enable or disable anonymous access.
        in: path
        name: enabled
        required: true
        schema:
          type: boolean
      responses:
        '204':
          description: Successfully updated anonymous access.
      tags:
      - Firewall
  /api/v2/firewall/releaseQuarantine/configuration:
    get:
      description: 'Use this method to retrieve the configuration settings for auto-release
        from quarantine for repositories.


        Permissions required: View IQ Elements'
      operationId: getFirewallAutoUnquarantineConfig
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiFirewallReleaseQuarantineConfigDTO'
                type: array
          description: The response contains a list of repositories and the corresponding
            configuration for auto-release from quarantine.
      tags:
      - Firewall
    put:
      description: 'Use this method to set the configurations for auto-release from
        quarantine for a list of repositories.


        Permissions required: Edit IQ Elements'
      operationId: setFirewallAutoUnquarantineConfig
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ApiFirewallReleaseQuarantineConfigDTO'
              type: array
        description: Enter value for each repository and the required status for auto-release
          as `true` or `false`.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiFirewallReleaseQuarantineConfigDTO'
                type: array
          description: The response contains each updated `autoReleaseQuarantineEnabled`
            status for the repositories requested.
      tags:
      - Firewall
  /api/v2/firewall/releaseQuarantine/summary:
    get:
      description: 'Use this method to track how many components have been automatically
        released from quarantine over different time periods.


        Permissions required: View IQ Elements'
      operationId: getFirewallUnquarantineSummary
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFirewallReleaseQuarantineSummaryDTO'
          description: The response contains:<ul><li>`autoReleaseQuarantineCountMTD`
            is the number of auto-released quarantine components from the start of
            the current month to the current date.</li><li>`autoReleaseQuarantineCountYTD`
            is the number of auto-released quarantine components from the start of
            the current year to the current date.</li></ul>
      tags:
      - Firewall
  /api/v2/firewall/repositories/configuration/{repositoryManagerId}:
    get:
      description: 'Use this method to retrieve the configuration details of an existing
        repository manager.


        Permissions required: View IQ Elements'
      operationId: getConfiguredRepositories
      parameters:
      - description: Enter the repository manager ID.
        in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      - description: Enter the epoch time in milliseconds when the repository was
          last updated.
        in: query
        name: sinceUtcTimestamp
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryListDTO'
          description: The response contains the configuration details of the requested
            repository manager.
      tags:
      - Firewall
    post:
      description: 'Use this method to update the repositories for an existing repository
        manager.


        Permissions required: Edit IQ Elements'
      operationId: configureRepositories
      parameters:
      - description: Enter the repository manager ID.
        in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRepositoryListDTO'
        description: Enter values for the repository configuration properties to be
          updated.
        required: true
      responses:
        '204':
          description: Repositories updated successfully.
      tags:
      - Firewall
  /api/v2/firewall/repositoryContainer:
    get:
      description: 'Use this method to retrieve the ID and name for the repository
        container.


        Permissions required: View IQ Elements'
      operationId: getRepositoryContainer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryContainerDTO'
          description: The response contains the ID and name for the repository container.
      tags:
      - Firewall
  /api/v2/firewall/repositoryManagers:
    get:
      description: 'Use this method to retrieve all configured repository managers.


        Permissions required: View IQ Elements'
      operationId: getRepositoryManagers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryManagerListDTO'
          description: The response contains details of configured repository managers.
      tags:
      - Firewall
    post:
      description: 'Use this method to add a new repository manager.


        Permissions required: Edit IQ Elements'
      operationId: addRepositoryManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRepositoryManagerDTO'
        description: Enter values for the new repository manager.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryManagerDTO'
          description: The response contains the details of the new repository manager.
      tags:
      - Firewall
  /api/v2/firewall/repositoryManagers/{repositoryManagerId}:
    delete:
      description: 'Use this method to delete an existing repository manager.


        Permissions required: Edit IQ Elements'
      operationId: deleteRepositoryManager
      parameters:
      - description: Enter the repository manager ID.
        in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The requested repository manager has been deleted.
      tags:
      - Firewall
    get:
      description: 'Use this method to retrieve details of an existing repository
        manager.


        Permissions required: View IQ Elements'
      operationId: getRepositoryManager
      parameters:
      - description: Enter the repository manager ID.
        in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryManagerDTO'
          description: The response contains the details of the repository manager
            requested.
      tags:
      - Firewall
  /api/v2/labels/{ownerType}/{ownerId}:
    get:
      description: 'Use this method to retrieve the details for component labels for
        an application, organization or a repository.


        Permissions required: View IQ Elements'
      operationId: getLabels
      parameters:
      - description: Select the `ownerType` for which you want to retrieve the component
          label information.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id of the application, organization or the repository.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Set to `true` to retrieve inherited component labels.
        in: query
        name: inherit
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiLabelDTO'
                type: array
          description: The response contains an array of component label descriptions
            for the application, organization or repository, as selected in the request.
            Each label description contains:<ul><li>`id` is the internal identifier
            assigned to the label.</li><li>`label` is the identifying name of the
            label, for e.g. 'Architecture-Deprecated'.</li><li>`description` is additional
            information describing the label.</li><li>`color` is the color assigned
            to the component label.</li><li>`ownerId` is the identifier for the ownerType
            selected in the request.</li><li>`ownerType` indicates if the label is
            for the application, organization or repository,  as selected in the request.</li></ul>If
            the request parameter `inherit` is set to `true` the response contains
            a description of component labels that are inherited from the parent.
            The inherited labels can be identified by the value of `ownerId` and `ownerType`.
      tags:
      - Component Labels
    post:
      description: 'Use this method to create and assign a component label to an application,
        organization or repository.


        Permissions required: Edit IQ Elements'
      operationId: addLabel
      parameters:
      - description: Select the ownerType to which the label will be assigned.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id for the selected ownerType.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiLabelDTO'
        description: Specify a label name, description and color for the label. Valid
          values for color are `light-red` , `light-green` , `light-blue` , `light-purple`,
          `dark-red` , `dark-green` , `dark-blue` , `dark-purple` , `orange` , `yellow`.
          Do not enter value for the `id` field.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLabelDTO'
          description: The response contains label details sent in the request and
            the `id` for the label created.
      tags:
      - Component Labels
    put:
      description: 'Use this method to update an existing component label for an application,
        organization or repository.


        Permissions required: Edit IQ Elements'
      operationId: updateLabel
      parameters:
      - description: Select the ownerType for which the label will be updated.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id for the selected ownerType.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiLabelDTO'
        description: Specify the new values for label name, description, color and
          the corresponding label id for the component label to be updated. Valid
          values for color are `light-red` , `light-green` , `light-blue` , `light--purple`,
          `dark-red` , `dark-green` ,`dark-blue` , `dark-purple` ,`orange` , `yellow`.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLabelDTO'
          description: The response contains the label details sent in the update
            request.
      tags:
      - Component Labels
  /api/v2/labels/{ownerType}/{ownerId}/applicable:
    get:
      description: 'Use this method to retrieve all component labels that are applicable
        to the specified application, organization or repository.


        Permissions required: View IQ Elements'
      operationId: getApplicableLabels
      parameters:
      - description: Select the ownerType to retrieve the component label information
          for.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id for the application, organization or repository
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicableLabels'
          description: The response contains descriptions for all component labels
            that are applicable to the specified owner. These include all component
            labels that are assigned and inherited. The response includes:<ul><li>`ownerId`
            is the identifier for the owner.</li><li>`ownerName` is the name for the
            owner.</li><li>`ownerType` indicates if the labels are for an application,
            organization or repository.</li> <li>`labels` is the component labels
            for this owner.</li></ul>Each label includes <ul><li>`id` is the internal
            identifier assigned to the label.</li><li>`label` is the identifying name
            of the label, for e.g. 'Architecture-Deprecated'.</li><li>`description`
            is additional information describing the label.</li><li>`color` is the
            color assigned to the component label.</li><li>`ownerId` is the identifier
            for the ownerType selected in the request.</li><li>`ownerType` indicates
            if the label is for the application, organization or repository, as selected
            in the request.</li></ul>
      tags:
      - Component Labels
  /api/v2/labels/{ownerType}/{ownerId}/applicable/context/{labelId}:
    get:
      description: 'Use this method to retrieve the hierarchy of owners (applications,
        organizations, repositories) in which the label can be applied.


        Permissions required: Edit IQ Elements'
      operationId: getApplicableContexts
      parameters:
      - description: Select the ownerType.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the ownerId
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the labelId
        in: path
        name: labelId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicableContext'
          description: The response contains:<ul><li>`id` is the id of the selected
            owner.</li><li>`name` is the name of the selected owner.</li><li>`type`
            is the type of the selected owner e.g. application, organization or repository.</li><li>`children`
            is an array of the child owners in the hierarchy.</li>
      tags:
      - Component Labels
  /api/v2/labels/{ownerType}/{ownerId}/{labelId}:
    delete:
      description: 'Use this method to delete an existing component label.


        Permissions required: Edit IQ Elements'
      operationId: deleteLabel
      parameters:
      - description: Select the ownerType for which the label will be deleted.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id for the selected ownerType.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the id for the label to be deleted.
        in: path
        name: labelId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Component label deleted successfully.
      tags:
      - Component Labels
  /api/v2/licenseLegalMetadata/application/{applicationId}:
    get:
      description: 'Use this REST API to retrieve the raw license legal data for components
        in an application.


        Permissions required: Review Legal Obligations For Components Licenses'
      operationId: getLicenseLegalApplicationReport
      parameters:
      - description: Enter the application id or public id.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseLegalApplicationReportDTO'
          description: 'The response contains a list of all components in the application
            and the corresponding license legal metadata. For each component, the
            response includes component data and license legal metadata.


            1. The component data includes:<ul><li>`packageURL` is the package URL
            or pURL of the component.</li><li>`hash` is the truncated hash value and
            can be used in other REST API calls. It should not be used as a checksum.</li><li>`componentIdentifier`
            includes the component format and its coordinates.</li><li>`displayName`
            is the display name of the component.</li><li>`licenseLegalData` contains
            the legal data.</li><li>`stageScans` is a list and each element contains
            `stageName` at which the application was scanned, the `scanId` of the
            application scan, and the `scanDate`.</li></ul>2. The `licenseLegalMetaData`
            is used as a dictionary for legal data and for each license contains the
            license id(s), name, license text, obligations, license threat group,
            and whether or not it is multi license.'
      tags:
      - License Legal Metadata Report
  /api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}:
    get:
      description: 'Use this method to retrieve the raw license legal data for components
        in an application based on the application scan at a specific stage.


        Permissions required: Review Legal Obligations For Components Licenses '
      operationId: getLicenseLegalApplicationReport_1
      parameters:
      - description: Enter the application id or public id.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the stageId.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseLegalApplicationReportDTO'
          description: 'The response contains a list of all components in the application.
            For each component, the response includes component data and license legal
            metadata.


            1. The component data includes:<ul><li>`packageURL` is the package URL
            or pURL of the component.</li><li>`hash` is the truncated hash value and
            can be used in other REST API calls. It should not be used as a checksum.</li><li>`componentIdentifier`
            includes the component format and its coordinates.</li><li>`displayName`
            is the display name of the component.</li><li>`licenseLegalData` contains
            the legal data.</li><li>`stageScans` is a list and each element contains
            `stageName` at which the application was scanned, the `scanId` of the
            application scan, and the `scanDate`.</li></ul>2. The `licenseLegalMetaData`
            is used as a dictionary for legal data and for each license contains the
            license id(s), name, license text, obligations, license threat group,
            and whether or not it is multi license.'
      tags:
      - License Legal Metadata Report
  /api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report:
    get:
      description: 'Use this method to retrieve the license legal data for components
        in an application at a specific stage, in HTML format.


        Permissions required: Review Legal Obligations For Components Licenses'
      operationId: getLicenseLegalApplicationHTMLReport
      parameters:
      - description: Enter the application id or public id.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the stageId.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            text/html:
              schema:
                type: string
          description: The response contains license legal data in HTML format.
      tags:
      - License Legal Metadata Report
    post:
      description: 'Use this method to retrieve and customize the license legal data
        for components in an application at a specific stage, in HTML format.


        Permissions required: Review Legal Obligations For Components Licenses'
      operationId: getLicenseLegalCustomApplicationHTMLReport
      parameters:
      - description: Enter the application id or public id.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the stageId.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            text/html:
              schema:
                type: string
          description: The response contains the customized license legal report in
            HTML format.
      tags:
      - License Legal Metadata Report
  /api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report/templateId/{templateId}:
    post:
      description: 'Use this method to generate a license legal report in the specified
        HTML template format.


        Permissions required: Review Legal Obligations For Components Licenses'
      operationId: getLicenseLegalCustomApplicationHTMLReport_1
      parameters:
      - description: Enter the application id or public id.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the stageId.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      - description: Enter the templateId for the HTML report format.
        in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The response contains the license legal report for the specified
            application in HTML format.
      tags:
      - License Legal Metadata Report
  /api/v2/licenseLegalMetadata/multiApplication/activeUserFilter/report/templateId/{templateId}:
    post:
      description: 'Use this method to generate license legal data in HTML format
        for applications ,on which the logged in user has permissions.


        Permission required: Review Legal Obligations For Components Licenses'
      operationId: getLicenseLegalMultiApplicationReportFromActiveUserFilter
      parameters:
      - description: Enter the templateId for the license legal data.
        in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            text/html:
              schema:
                type: string
          description: The response contains license legal data in HTML format based
            on the specified template.
      tags:
      - License Legal Metadata Report
  /api/v2/licenseLegalMetadata/multiApplication/report:
    post:
      description: 'Use this method to generate license legal data in HTML format.


        Permissions required: Review Legal Obligations For Components Licenses'
      operationId: getLicenseLegalMultiApplicationHTMLReport
      responses:
        '200':
          description: License legal data in HTML format is generated.
      tags:
      - License Legal Metadata Report
  /api/v2/licenseLegalMetadata/multiApplication/report/templateId/{templateId}:
    post:
      description: 'Use this method to generate license legal data for all applications
        in HTML format based on the given template.


        Permissions required: Review Legal Obligations For Components Licenses'
      operationId: getLicenseLegalCustomMultiApplicationHTMLReport_1
      parameters:
      - description: Enter the `templateId` for the HTML report.
        in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: The response contains license legal data in HTML format.
      tags:
      - License Legal Metadata Report
  /api/v2/licenseLegalMetadata/report-template:
    get:
      description: 'Use this method to retrieve templates for all reports.


        Permissions required: Review Legal Obligations For Components Licenses for
        the root organization'
      operationId: getAllAttributionReportTemplates
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AttributionReportTemplateDTO'
                type: array
          description: The response contains the stored template details for all reports.
            For each template:<ul><li>`id` is the template id.</li><li>`templateName`
            indicates the name of the stored template.</li><li>`documentTitle` is
            the title that is displayed at the top of the report.</li><li>`header`
            is the text that will be displayed above the `documentTitle`.</li><li>`footer`
            is the text that will be displayed at the bottom of the report.<li><li>`includeTableOfContents`
            is `true` if a table of contents containing links to the components and
            their licenses will be added to the report.<li>`includeAppendix` is `true`
            if standard license text will be grouped in the report appendix.</li><li>`includeStandardLicenseTexts`
            is `true` if the standard license text will be displayed for components
            with no license files.</li><li>`includeSonatypeSpecialLicenses` is `true`
            if Sonatype Special Licenses (e.g. Generic-Copyleft-Clause, Generic-Liberal-Clause,
            See-License-Clause, Identity-Clause etc.) will be included in the report.</li><li>`lastUpdatedAt`
            indicates the time the template was last updated.</li><li>`includeInnerSource`
            is `true` if InnerSource components will be included in the report.</li></ul>
      tags:
      - License Legal Metadata Template
    post:
      description: 'Use this method to create or update a template.


        Permissions required: Review Legal Obligations For Components Licenses for
        the root organization'
      operationId: saveAttributionReportTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributionReportTemplateDTO'
        description: Specify the details for the template as:<ul><li>`id` is the template
          id.</li><li>`templateName` indicates the name of the stored template.</li><li>`documentTitle`
          is the title that is displayed at the top of the report.</li><li>`header`
          is the text that will be displayed above the `documentTitle`.</li><li>`footer`
          is the text that will be displayed at the bottom of the report.<li><li>`includeTableOfContents`
          is `true` if a table of contents containing links to the components and
          their licenses will be added to the report.<li>`includeAppendix` is `true`
          if standard license text will be grouped in the report appendix.</li><li>`includeStandardLicenseTexts`
          is `true` if the standard license text will be displayed for components
          with no license files.</li><li>`includeSonatypeSpecialLicenses` is `true`
          if Sonatype Special Licenses (e.g. Generic-Copyleft-Clause, Generic-Liberal-Clause,
          See-License-Clause, Identity-Clause etc.) will be included in the report.</li><li>`includeInnerSource`
          is `true` if InnerSource components will be included in the report.</li></ul>
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributionReportTemplateDTO'
          description: The response contains the details of the template created or
            updated.
      tags:
      - License Legal Metadata Template
  /api/v2/licenseLegalMetadata/report-template/{id}:
    delete:
      description: 'Use this method to delete an existing template.


        Permissions required: Review Legal Obligations For Components Licenses for
        the root organization'
      operationId: deleteAttributionReportTemplate
      parameters:
      - description: Enter the template id for the template to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Template deleted successfully.
      tags:
      - License Legal Metadata Template
    get:
      description: 'Use this method to retrieve a template for license legal metadata.


        Permissions required: Review Legal Obligations For Components Licenses for
        the root organization.'
      operationId: getAttributionReportTemplateById
      parameters:
      - description: Enter the templateId for the report.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributionReportTemplateDTO'
          description: The response contains the stored template corresponding to
            the `id` provided:<ul><li>`id` is the template id.</li><li>`templateName`
            indicates the name of the stored template.</li><li>`documentTitle` is
            the title that is displayed at the top of the report.</li><li>`header`
            is the text that will be displayed above the `documentTitle`.</li><li>`footer`
            is the text that will be displayed at the bottom of the report.<li><li>`includeTableOfContents`
            is `true` if a table of contents containing links to the components and
            their licenses will be added to the report.<li>`includeAppendix` is `true`
            if standard license text will be grouped in the report appendix.</li><li>`includeStandardLicenseTexts`
            is `true` if the standard license text will be displayed for components
            with no license files.</li><li>`includeSonatypeSpecialLicenses` is `true`
            if Sonatype Special Licenses (e.g. Generic-Copyleft-Clause, Generic-Liberal-Clause,
            See-License-Clause, Identity-Clause etc.) will be included in the report.</li><li>`lastUpdatedAt`
            indicates the time the template was last updated.</li><li>`includeInnerSource`
            is `true` if InnerSource components will be included in the report.</li></ul>
      tags:
      - License Legal Metadata Template
  /api/v2/licenseLegalMetadata/{ownerType}/{ownerId}/component:
    get:
      description: 'Use this method to retrieve the raw license legal data for a component
        by specifying the component identifier or package URL or the component hash.


        Permissions required: Review Legal Obligations For Components Licenses'
      operationId: getLicenseLegalComponentReport
      parameters:
      - description: Enter the ownerType
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the ownerId corresponding to the ownerType.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the componentIdentifier consisting of format and coordinates.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the component hash.
        in: query
        name: hash
        schema:
          type: string
      - description: Enter the identification source if a third party scan is used.
        in: query
        name: identificationSource
        schema:
          type: string
      - description: Enter the scanId for the report where the component was identified
          (required if identified by third party scan).
        in: query
        name: scanId
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseLegalComponentReportDTO'
          description: 'The response contains the requested component data and the
            corresponding license legal metadata.


            1. The component data includes:<ul><li>`packageURL` is the package URL
            or pURL of the component.</li><li>`hash` is the truncated hash value and
            can be used in other REST API calls. It should not be used as a checksum.</li><li>`componentIdentifier`
            includes the component format and its coordinates.</li><li>`displayName`
            is the display name of the component.</li><li>`licenseLegalData` contains
            the legal data.</li><li>`stageScans` is a list and each element contains
            `stageName` at which the application was scanned, the `scanId` of the
            application scan, and the `scanDate`.</li></ul>2. The `licenseLegalMetaData`
            is used as a dictionary for legal data and for each license contains the
            license id(s), name, license text, obligations, license threat group,
            and whether or not it is multi license.'
      tags:
      - License Legal Metadata Report
  /api/v2/licenseOverrides/{ownerType}/{ownerId}:
    get:
      description: 'Use this method to retrieve the applied license overrides for
        a component.


        Permissions required: View IQ Elements'
      operationId: getAppliedLicenseOverrides
      parameters:
      - description: Select the `ownerType` for which you want to retrieve the applied
          license overrides.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id of the application, organization or the repository.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the componentIdentifier consisting of format and coordinates
          as a JSON e.g., `?componentIdentifier={"format":"maven","coordinates":"{...}}"}
        in: query
        name: componentIdentifier
        required: true
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAppliedLicenseOverridesDTO'
          description: The response contains the license overrides for the component.
      tags:
      - License Overrides
    post:
      description: 'Use this method to add or update a license override to a component
        for a given owner scope.


        Permissions required: Change Licenses'
      operationId: addLicenseOverride
      parameters:
      - description: Select the `ownerType` scope for which you want to add or update
          a license override
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id of the application, organization or the repository.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - in: query
        name: where
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiLicenseOverrideDTO'
        description: "Enter the license override details to add or update a license\
          \ override for a component.\nThe request body should contain the following\
          \ fields:\n - `ownerId`: Enter the id of the application, organization or\
          \ the repository.\n - `comment`: Enter a comment for the license override.\n\
          \ - `licenseIds`: Enter the license ids for the license override.\n - `componentIdentifier`:\
          \ Enter the componentIdentifier consisting of format and coordinates.\n\
          \ - `status`: Enter the status of the license override. The possible values\
          \ are `OPEN`, `ACKNOWLEDGED`, `OVERRIDDEN`, `SELECTED`, and `CONFIRMED`."
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseOverrideDTO'
          description: The response contains the same license override information
            that was added.
      tags:
      - License Overrides
  /api/v2/licenseOverrides/{ownerType}/{ownerId}/legalReviewer:
    get:
      description: 'Use this method to retrieve the applied license overrides for
        a given component and owner.


        Permissions required: Review Legal Obligations For Components Licenses'
      operationId: getAppliedLicenseOverridesForLegalReviewer
      parameters:
      - description: Select the `ownerType` for which you want to retrieve the applied
          license overrides.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id of the owner.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the component format and coordinates.
        in: query
        name: componentIdentifier
        required: true
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAppliedLicenseOverridesDTO'
          description: Successfully retrieved the applied license overrides.
      tags:
      - License Overrides
  /api/v2/licenseOverrides/{ownerType}/{ownerId}/{licenseOverrideId}:
    delete:
      description: 'Use this method to delete a license override for a component.


        Permissions required: Change Licenses'
      operationId: deleteLicenseOverride
      parameters:
      - description: Select the `ownerType` scope for which you want to delete license
          override
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id of the application, organization or the repository.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the id of the license override you want to delete.
        in: path
        name: licenseOverrideId
        required: true
        schema:
          type: string
      - in: query
        name: where
        schema:
          type: string
      responses:
        '204':
          description: The license override was deleted successfully.
      tags:
      - License Overrides
  /api/v2/malware-defense/evaluate:
    post:
      description: Evaluate malware for a list of components.<p>Use this endpoint
        to evaluate malware for a list of components up to a maximum of 100 components
        in a single request.A hash or packageUrl (or both) can be supplied for each
        component that are of the same format type.
      operationId: evaluateMalware
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiMalwareComponentEvaluationRequestList'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MalwareDefenseResponseList'
          description: Malware evaluation results for the components
      tags:
      - Firewall
  /api/v2/malware-defense/metrics:
    get:
      description: The response contains malware defense API metrics.<p>Use this endpoint
        to get the count of malicious components evaluated via malware defense API
        grouped by format.
      operationId: getMalwareDefenseMetrics
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int64
                  type: integer
                type: object
          description: Malware defense metrics grouped by format.
      tags:
      - Firewall
  /api/v2/organizations:
    get:
      description: 'Use this method to retrieve organizations with names matching
        those specified or all if not specified.


        Permissions required: View IQ Elements'
      operationId: getOrganizations
      parameters:
      - description: Enter the organization names.
        in: query
        name: organizationName
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiOrganizationListDTO'
          description: The response contains a list of organizations. For each organization
            the response contains organization id, organization name, parent organization
            id, and its associated tags with additional details.
      tags:
      - Organizations
    post:
      description: 'Use this method to add a new organization.


        Permissions required: Edit IQ Elements'
      operationId: addOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiOrganizationDTO'
        description: The request JSON should include the name of the organization
          (should be unique), name of the parent organization and tags containing
          additional organization details. If the parent organization is not specified,
          this organization will be created under the root organization. Tags represent
          identifying characteristics of an application. They are created at the organization
          level and then applied to applications under the organization. The tags
          can be used to decide which applications will be evaluated against a selected
          policy.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiOrganizationDTO'
          description: The response contains the assigned organization id and all
            other organization details specified.
      tags:
      - Organizations
  /api/v2/organizations/{organizationId}:
    delete:
      description: 'Use this method to delete an existing organization, by providing
        the organization id.


        Permissions required: Edit IQ Elements'
      operationId: deleteOrganization
      parameters:
      - description: Enter the organization id to be deleted.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The specified organization has been deleted.
      tags:
      - Organizations
    get:
      description: 'Use this method to retrieve the details of an organization by
        providing the organization id.


        Permissions required: View IQ Elements'
      operationId: getOrganization
      parameters:
      - description: Enter the organization id.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiOrganizationDTO'
          description: The response contains the details for the specified  organization
            including organization id, organization name, parent organization id,
            and its associated tags with additional details.
      tags:
      - Organizations
  /api/v2/organizations/{organizationId}/move/destination/{destinationId}:
    put:
      description: 'Use this method to change the parent organization.


        Permissions required: Edit IQ Elements'
      operationId: moveOrganization
      parameters:
      - description: Enter the id for the organization to be moved under the new parent.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: Enter the id for the new parent organization.
        in: path
        name: destinationId
        required: true
        schema:
          type: string
      - in: query
        name: failEarlyOnError
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveOrganizationResponseDTO'
          description: The organization has been successfully moved under the parent
            organization id provided.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveOrganizationResponseDTO'
          description: Encountered conflicts while inheriting policy elements of the
            new parent organization. The organization could not be moved under the
            new parent organization id provided.
      tags:
      - Organizations
  /api/v2/policies:
    get:
      description: 'Use this method to retrieve all existing policies.


        Permissions required: View IQ Elements'
      operationId: getPolicies
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyListDTO'
          description: The response contains a `policies` object which contains a
            list of:<ul><li>`id` is the policyId. It can be used in the GET method
            for endpoint /api/v2/policyViolations to retrieve policy violations for
            the policy, and other similar operations.</li><li>`name` is the name of
            the policy.</li><li>`ownerType` is the ownerType.</li><li>`ownerId` is
            the internal id associated with the ownerType.</li><li>`threatLevel` is
            the threat level that is set for this policy.</li><li>`policyType` indicates
            the type for the policy. Values can be `Security`, `License`, `Quality`
            or `Other`.</li>
      tags:
      - Policies
  /api/v2/policyViolations:
    get:
      description: 'Use this method to retrieve policy violation details for a policy/policies.
        You will need the policyId(s) to retrieve the policy violations details. policyId
        is available as the response field of the Policies REST API.


        Permissions required: View IQ Elements'
      operationId: getPolicyViolations
      parameters:
      - description: Enter the policyIds to obtain the corresponding violation details
        in: query
        name: p
        required: true
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - description: Enter the date (format YYYY-MM-DD) from which you want to retrieve
          the violation details
        in: query
        name: openTimeAfter
        schema:
          type: string
      - description: Enter the date (format YYYY-MM-DD) until which you want to retrieve
          the violation details
        in: query
        name: openTimeBefore
        schema:
          type: string
      - description: Set one or more policy violation type (active, legacy, waived)
          to include
        in: query
        name: type
        schema:
          items:
            default: ACTIVE
            enum:
            - ACTIVE
            - WAIVED
            - LEGACY
            type: string
          type: array
          uniqueItems: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationViolationListDTOV2'
          description: The response contains the details of the application that violates
            the policy/policies and violation details grouped under the policyIds
            provided. It contains:<ul><li>`openTime` indicates the date and time when
            the violation was first detected.</li><li>`waiveTime` indicates the date
            and time when the violation was waived.</li><li>`legacyTime` indicates
            the date and time when the violation was assigned as a legacy violation.</li><li>`reference`
            is the reference data that triggered the violation.</li></ul>
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/crossStage:
    get:
      description: 'A cross-stage policy violation represents an aggregate of all
        violations of a policy  occurring across multiple stages of an application.
        Cross-stage policy violations are helpful in performance analysis by determining
        the time taken to remediate a violation across all stages where it was detected.

        Use this method to retrieve all cross-stage violations, irrespective of the
        time they were detected.


        Permissions required: View IQ Elements'
      operationId: getCrossStagePolicyViolationByConstituentId
      parameters:
      - description: Enter the violationId. Use the GET method described for the endpoint
          /api/v2/policyViolations to obtain the policy violationId.
        in: query
        name: constituentId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCrossStageViolationDTOV2'
          description: The response contains violation details for all occurrences
            of the same policy violation, across multiple stages. stageData indicates
            the name of the stages where the violation occurred, the scanId/reportId
            when it was reported and the policy action triggered due to the violation.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/crossStage/{violationId}:
    get:
      description: 'A cross-stage policy violation represents an aggregate of all
        violations of the same policy, occurring at multiple stages for an application.
        Cross-stage policy violations are helpful in performance analysis by determining
        the time taken to remediate a violation across all stages where it was detected.

        Use this method to retrieve cross-stage policy violations.


        Permissions required: View IQ Elements'
      operationId: getCrossStagePolicyViolationById
      parameters:
      - description: 'Enter the policy `violationId`. Use the GET method described
          for the endpoint /api/v2/policyViolations to obtain the policy violationId. '
        in: path
        name: violationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCrossStageViolationDTOV2'
          description: The response contains violation details for all occurrences
            of the same policy violation across multiple stages. `stageData` indicates
            the name of the stages where the violationoccurred, and `reportId` where
            it was reported and the policy action triggered due to the violation.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/transitive/{ownerType}/{ownerId}/stages/{stageId}:
    get:
      description: 'Use this method to obtain all transitive policy violations for
        a given component in  a specific stage. Transitive policy violations are violations
        caused by transitive dependencies.


        Permissions required: View IQ Elements'
      operationId: getTransitivePolicyViolationsByOwnerStageComponent
      parameters:
      - description: Possible values are 'application' or 'organization'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Possible values are applicationId, organizationId
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Possible values are 'develop', 'source', 'build', 'stage-release',
          'release', and, 'operate'.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      - description: Enter the component identifier and the coordinates of the component
          for which you want to obtain the transitive violations. This is optional,
          not required if package URL or hash value is provided.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL of the component. This is optional, not
          required if component identifier or hash value is provided.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the hash value of the component. This is optional, not
          required if component identifier or package URL is provided.
        in: query
        name: hash
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentTransitivePolicyViolationsDTO'
          description: The response contains all transitive violations detected for
            the component specified. In addition to the policy violation details like
            the name/id of the policy violated, threat level threat category, etc.
            the response also indicates if the violation is due to an 'InnerSource'
            component.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/transitive/{ownerType}/{ownerId}/{scanId}:
    get:
      description: 'Use this method to retrieve transitive policy violations for a
        given component in a specific scan.


        Permissions required: View IQ Elements'
      operationId: getTransitivePolicyViolationsByAppScanComponent
      parameters:
      - description: Enter the scope for this violation. Possible values are 'application'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          pattern: application
          type: string
      - description: Enter the identifier for the scope specified above. E.g. applicationId
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the scanId/reportId corresponding to the scan.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Enter the component identifier and the coordinates of the component
          for which you want to retrieve the transitive policy violations. This is
          optional, not required if package URL or hash value is provided.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL for the component for which you want to
          retrieve the transitive policy violations in the specific scan.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the hash value for the component for which you want to
          retrieve the transitive policy violations in the specific scan.
        in: query
        name: hash
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentTransitivePolicyViolationsDTO'
          description: The response contains violation details for all transitive
            violations occurring in the scan specified. The response also indicates
            if the violation is due to an 'InnerSource' component.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/{violationId}/applicableAutoWaiver:
    get:
      description: 'Use this method to obtain the existing auto waiver applicable
        to a policy violationviolation.


        Permissions required: View IQ Elements'
      operationId: getApplicableAutoWaiver
      parameters:
      - description: 'Enter the policy violationId for which you want to obtain the
          applicable auto policy waiver '
        in: path
        name: violationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiAutoPolicyWaiverDTO'
          description: 'The response contains details for applicable auto waiver for
            the `violationId` specified. '
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/{violationId}/applicableWaiverRequests:
    get:
      description: 'Use this method to obtain all existing waiver requests that are
        applicable to a policy violation. A waiver request is considered as ''applicable''
        if it matches the following conditions:<ul><li>The policyId for the policy
        violation matches the policyId associated with the waiver request</li><li>The
        violated policy conditions match the policy conditions of the waiver request/li><li>The
        waiver request scope matches the violating component</li></ul>


        Permissions required: View IQ Elements'
      operationId: getApplicableWaiverRequests
      parameters:
      - description: Enter the policy violationId for which you want to obtain the
          applicable waiver requests.
        in: path
        name: violationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiverRequestsApplicableToViolationDTO'
          description: 'The response contains details for all applicable waiver requests
            for the `violationId` specified. It is grouped under ''activeWaiverRequests''
            and ''expiredWaiverRequests''. `scope` indicates the scope of the applicable
            waiver request. Possible values for the enum field `matcherStrategy` are
            EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS).


            `reference` shows the reference data that triggered the violation. `componentUpgradeAvailable`
            indicates if a non-violating version of the component is available to
            remediate the violation.'
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/{violationId}/applicableWaivers:
    get:
      description: 'Use this method to obtain all existing waivers that are applicable
        to a policy violation. A waiver is considered as ''applicable'' if it matches
        the following conditions:<ul><li>The policyId for the policy violation matches
        the policyId associated with the waiver</li><li>The violated policy conditions
        match the policy conditions of the waiver/li><li>The waiver scope matches
        the violating component</li></ul>


        Permissions required: View IQ Elements'
      operationId: getApplicableWaivers
      parameters:
      - description: Enter the policy violationId for which you want to obtain the
          applicable waivers.
        in: path
        name: violationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiversApplicableToViolationDTO'
          description: 'The response contains details for all applicable waivers for
            the `violationId` specified. It is grouped under ''activeWaivers'' and
            ''expiredWaivers''. `scope` indicates the scope of the applicable waiver.
            Possible values for the enum field `matcherStrategy` are EXACT_COMPONENT,
            ALL_COMPONENTS, ALL_VERSIONS).


            `reference` shows the reference data that triggered the violation. `componentUpgradeAvailable`
            indicates if a non-violating version of the component is available to
            remediate the violation.'
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/{violationId}/similarWaivers:
    get:
      description: 'Use this method to retrieve similar policy waivers for the given
        policy violation id.


        Permissions required: View IQ Elements'
      operationId: getSimilarWaivers
      parameters:
      - description: Policy violation id to find similar waivers for.
        in: path
        name: violationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiPolicyWaiverDTO'
                type: array
          description: Successfully retrieved similar policy waivers for the given
            policy violation id.
      tags:
      - Policy Violation Details
  /api/v2/policyWaiverReasons:
    get:
      description: 'Use this method to retrieve all policy waiver reasons.


        Permissions required: None'
      operationId: getPolicyWaiverReasons
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiPolicyWaiverReasonDTO'
                type: array
          description: Successfully retrieved all policy waiver reasons.
      tags:
      - Policy Waiver Reasons
  /api/v2/policyWaiverRequests/{ownerType}/{ownerId}/policyViolation/{policyViolationId}:
    post:
      description: 'Use this method to create a policy waiver request.


        Permissions required: View IQ Elements'
      operationId: addPolicyWaiverRequestByPolicyViolationId
      parameters:
      - description: The scope of the policy waiver request. Possible values are application,
          organization, repository, repository_manager, repository_container.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: The id for the ownerType provided above. E.g. applicationId if
          the ownerType is application.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: The policyViolationId for the policy violation on which you want
          to create a policy waiver request. Use the Policy Violation REST API or
          Reports REST API to obtain the policyViolationId.
        in: path
        name: policyViolationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPolicyWaiverRequestOptionsDTO'
        description: The request JSON can include the fields<ol><li>comment (optional,
          to indicate the reason of the waiver) default value is null</li><li>matcherStrategy
          (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS,
          ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable
          (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer
          (optional) to add a note to the reviewer</li></ol>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiverRequestDTO'
          description: The new policy waiver request.
      tags:
      - Policy Waiver Requests
  /api/v2/policyWaiverRequests/{ownerType}/{ownerId}/review/{policyWaiverRequestId}:
    post:
      description: 'Use this method to approve or reject a policy waiver request.


        Permissions required: Waive Policy Violations'
      operationId: reviewPolicyWaiverRequest
      parameters:
      - description: The scope of the policy waiver request. Possible values are application,
          organization, repository, repository_manager, repository_container.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: The id for the ownerType provided above. E.g. applicationId if
          the ownerType is application.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: The policyWaiverRequestId for the policy waiver request to be
          approved or rejected.
        in: path
        name: policyWaiverRequestId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPolicyWaiverRequestReviewDTO'
        description: The request JSON can include the fields<ol><li>status. Can be
          APPROVED or REJECTED</li><li>rejectionReason (optional). A text explaining
          the reason for the rejection., <li>comment (optional, to indicate the reason
          of the waiver) default value is null</li><li>matcherStrategy (enumeration,
          required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS.
          DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li></ol><li>expireWhenRemediationAvailable
          (default false) to expire the waiver when a remediation is available.</li>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiverRequestDTO'
          description: The updated policy waiver request.
      tags:
      - Policy Waiver Requests
  /api/v2/policyWaiverRequests/{ownerType}/{ownerId}/{policyWaiverRequestId}:
    get:
      description: 'Use this method to retrieve policy waiver request details for
        the policyWaiverRequestId specified.


        Permissions required: View IQ Elements'
      operationId: getPolicyWaiverRequest
      parameters:
      - description: 'The scope of the policy waiver request. Possible values are
          application,

          organization, repository, repository_manager, repository_container.'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: The id for the ownerType provided above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: The policyWaiverRequestId for which you want to retrieve the
          details.
        in: path
        name: policyWaiverRequestId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiverRequestDTO'
          description: The requested policy waiver request.
      tags:
      - Policy Waiver Requests
    put:
      description: 'Use this method to update a policy waiver request.


        Permissions required: View IQ Elements'
      operationId: updatePolicyWaiverRequest
      parameters:
      - description: The scope of the policy waiver request. Possible values are application,
          organization, repository, repository_manager, repository_container.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: The id for the ownerType provided above. E.g. applicationId if
          the ownerType is application.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: The id of the policy waiver request to be updated.
        in: path
        name: policyWaiverRequestId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPolicyWaiverRequestOptionsDTO'
        description: The request JSON can include the fields<ol><li>comment (optional,
          to indicate the reason of the waiver) default value is null</li><li>matcherStrategy
          (enumeration, required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS,
          ALL_VERSIONS. DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li><li>expireWhenRemediationAvailable
          (default false) to expire the waiver when a remediation is available.</li><li>noteToReviewer
          (optional) to add a note to the reviewer</li></ol>
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiverRequestDTO'
          description: The updated policy waiver request.
      tags:
      - Policy Waiver Requests
  /api/v2/policyWaivers/transitive/{ownerType}/{ownerId}/stages/{stageId}:
    post:
      description: 'Use this method to add a waiver for all transitive violations
        for a given component, detected in the latest scan at the stage specified.


        Permissions required: Waive Policy Violations'
      operationId: addWaiverToTransitivePolicyViolationsByOwnerStageComponent
      parameters:
      - description: Indicates the scope of the waiver that will be created.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
          E.g. applicationId for ownerType 'application' or organizationId for ownerType
          'organization'.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the stageId corresponding to the evaluation stage at which
          you want to create a waiver. Possible values are 'develop', 'source', 'build',
          'stage-release', 'release' and 'operate'.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      - description: Enter the component identifier and coordinates of the component
          for which you want to waive the transitive violations.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL of the component for which you want to
          waive the transitive violations.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: 'Enter the hash for the component for which you want to waive
          the transitive violations '
        in: query
        name: hash
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiWaiverOptionsDTO'
        description: <ol><li>comment (optional, to indicate the reason of the waiver)
          default value is null</li><li>applyToAllComponents (boolean, default 'false'),deprecated
          in favor of matcherStrategy. If matcherStrategy is not set, 'true' means
          this will apply the waiver to all components, 'false' means this will apply
          to a specific component.</li><li>matcherStrategy (enumeration, required)
          can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS.
          DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li></ol>
        required: true
      responses:
        '204':
          description: Waiver created successfully.
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/transitive/{ownerType}/{ownerId}/{scanId}:
    get:
      description: 'Use this method to retrieve all waivers on policy violations due
        to transitive dependencies for a specific component detected in a specific
        scan. Any one of the input parameters, i.e. componentIdentifier, packageUrl
        or hash is required. If more than one is provided, the system will pick them
        in the order specified here.


        Permissions required: View IQ Elements'
      operationId: getTransitivePolicyWaiversByAppScanComponent
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          the policy violations that are within the scope specified.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          pattern: application
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the scanId (reportId) of the scan for which you want to
          retrieve the waivers on transitive policy violations occurring due the dependencies
          of a component.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Enter the component identifier for the component for which you
          want to retrieve the waivers on transitive policy violations, for the specified
          scanId.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL for the component for which you want to
          retrieve the waivers on transitive policy violations, for the specified
          scanId.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the hash for the component for which you want to retrieve
          the waivers on transitive policy violations, for the specified scanId.
        in: query
        name: hash
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentPolicyWaiversDTO'
          description: The response contains a list of waivers on transitive policy
            violations for the dependencies of the component specified, for the given
            scanId.
      tags:
      - Policy Waivers
    post:
      description: 'Use this method to create a policy waiver on a transitive component
        detected during the specified scan. NOTE: Any one of the input parameters,
        i.e. component identifier, packageUrl or hash is required. If more than one
        is provided, the system will pick them in the order specified here.


        Permissions required: Waive Policy Violations'
      operationId: addWaiverToTransitivePolicyViolationsByAppScanComponent
      parameters:
      - description: Indicates the scope of the waiver that will be created.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          pattern: application
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the scanId (reportId) of the evaluation report that shows
          the transitive component.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Enter the component identifier of the transitive component on
          which you want to create a policy waiver.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL of the transitive component on which you
          want to create a policy waiver.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the hash of the transitive component on which you want
          to create a policy waiver.
        in: query
        name: hash
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiWaiverOptionsDTO'
        description: The request JSON can include the fields<ol><li>comment (optional,
          to indicate the reason of the waiver) default value is null</li><li>applyToAllComponents
          (boolean, default 'false'),deprecated in favor of matcherStrategy. If matcherStrategy
          is not set, 'true' means this will apply the waiver to all components, 'false'
          means this will apply to a specific component.</li><li>matcherStrategy (enumeration,
          required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS.
          DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li></ol>
      responses:
        '204':
          description: No content. Indicates that the waiver has been created successfully.
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/waiverRequests/{policyViolationId}:
    post:
      deprecated: true
      description: Deprecated since IQ Server 1.192. Triggers a 'Waiver Request' webhook
        event. Deprecated because the webhook event is now integrated into the policy
        waiver request process. Please use `api/v2/policyWaiverRequests{ownerType}/policyViolation/{policyViolationId}`
        instead. Scheduled for removal in December 2025.
      operationId: requestPolicyWaiver
      parameters:
      - description: Enter the policyViolationId for which you want to trigger the
          waiver request event.
        in: path
        name: policyViolationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRequestPolicyWaiverDTO'
        description: The request JSON should contain<ol><li>comment (optional, default
          null) to indicate the waiver request reason</li><li>policyViolationLink
          (link to the policy violation page in the Lifecycle UI)</li><li>addWaiverLink
          (link to the Add Waiver page in the Lifecycle UI)</li></ol>
      responses:
        '204':
          description: Waiver request webhook triggered successfully
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/{ownerType}/{ownerId}:
    get:
      description: 'Use this method to retrieve waiver details for all policy waivers
        for the scope specified. You can specify the scope by using the parameters
        ownerType and ownerId.


        Permissions required: View IQ Elements'
      operationId: getPolicyWaivers
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          waivers that are within the scope specified.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiPolicyWaiverDTO'
                type: array
          description: The response contains waiver details for the specified ownerType
            and the corresponding ownerId, grouped by the policyWaiverId. The response
            field 'matcherStrategy' indicates whether the waiver applies to a specific
            component, or all components that exist at that level of hierarchy (root
            org, org application), or all versions of the component (past, present,
            and future). The response fields associatedPackageUrl, displayName, and
            componentIdentifier are null for waivers on all components and unknown
            components.
      tags:
      - Policy Waivers
    post:
      description: 'Use this method to create policy waivers for multiple policy violations.


        Permissions required: Waive Policy Violations'
      operationId: addBulkPolicyWaivers
      parameters:
      - description: Indicates the scope of the waiver. Possible values are application,
          organization, repository, repository_manager, repository_container.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id for the ownerType provided above. E.g. applicationId
          if the ownerType is application.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBulkWaiversDTO'
        description: The request JSON should include:<ol><li>violationIds (required,
          list of policy violation IDs, maximum 1000)</li><li>apiWaiverOptionsDTO
          (required) containing:<ul><li>comment (optional, to indicate the reason
          of the waiver)</li><li>matcherStrategy (enumeration, required) can have
          values EXACT_COMPONENT or ALL_VERSIONS</li><li>expiryTime (optional) to
          set the datetime when the waiver expires</li><li>waiverReasonId (optional)
          waiver reason ID</li><li>expireWhenRemediationAvailable (optional boolean,
          default false) expire waiver when remediation is available, can only be
          applied to Exact Components.</li></ul></li></ol>
        required: true
      responses:
        '204':
          description: No content. Indicates that the waivers have been created successfully.
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/{ownerType}/{ownerId}/{policyViolationId}:
    post:
      description: 'Use this method to create a policy waiver.


        Permissions required: Waive Policy Violations'
      operationId: addPolicyWaiverByPolicyViolationId
      parameters:
      - description: Indicates the scope of the waiver. Possible values are application,
          organization, repository, repository_manager, repository_container.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id for the ownerType provided above. E.g. applicationId
          if the ownerType is application.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the policyViolationId for the policy on which you want
          to create a waiver. Use the Policy Violation REST API or Reports REST API
          to obtain the policyViolationId.
        in: path
        name: policyViolationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiWaiverOptionsDTO'
        description: The request JSON can include the fields<ol><li>comment (optional,
          to indicate the reason of the waiver) default value is null</li><li>applyToAllComponents
          (boolean, default 'false'),deprecated in favor of matcherStrategy. If matcherStrategy
          is not set, 'true' means this will apply the waiver to all components, 'false'
          means this will apply to a specific component.</li><li>matcherStrategy (enumeration,
          required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS.
          DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li></ol>
        required: true
      responses:
        '204':
          description: No content. Indicates that the waiver has been created successfully.
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/{ownerType}/{ownerId}/{policyWaiverId}:
    delete:
      description: 'Use this method to delete a waiver, specified by the policyWaiverId.


        Permissions required: Waive Policy Violations'
      operationId: deletePolicyWaiver
      parameters:
      - description: Enter the ownerType to specify the scope. A waiver corresponding
          to the policyWaiverId provided and within the scope specified will be deleted.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the policyWaiverId to be deleted.
        in: path
        name: policyWaiverId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Waiver has been deleted successfully.
      tags:
      - Policy Waivers
    get:
      description: 'Use this method to retrieve waiver details for the waiverId specified.


        Permissions required: View IQ Elements'
      operationId: getPolicyWaiver
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          the details for waivers within the scope.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the policyWaiverId for which you want to retrieve the waiver
          details.
        in: path
        name: policyWaiverId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiverDTO'
          description: The response contains waiver details corresponding to the policy
            waiverId specified.
      tags:
      - Policy Waivers
    put:
      description: 'Use this method to update an existing policy waiver.


        Permissions required: Waive Policy Violations'
      operationId: updatePolicyWaiver
      parameters:
      - description: Indicates the scope of the policy waiver. Possible values are
          application, organization, repository, repository_manager, and repository_container.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id for the `ownerType` provided above. E.g. `applicationId`
          if the `ownerType` is application.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the id for the policy waiver.
        in: path
        name: policyWaiverId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiWaiverOptionsDTO'
        description: Enter the policy waiver details to update. Note that updating
          `matcherStrategy` is currently unsupported.
        required: true
      responses:
        '204':
          description: The policy waiver was updated successfully.
      tags:
      - Policy Waivers
  /api/v2/product/license:
    delete:
      description: 'Use this method to uninstall a product license.


        Permissions required: Edit System Configuration and Users'
      operationId: uninstallLicense
      responses:
        '204':
          description: License uninstalled successfully
      tags:
      - Product License
    post:
      description: 'Use this method to install a product license


        Permissions required: Edit System Configuration and Users'
      operationId: installLicense
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: Your product license file
                  format: binary
                  type: string
              required:
              - file
              type: object
      responses:
        '200':
          description: License installed successfully
      tags:
      - Product License
  /api/v2/reports/applications:
    get:
      description: "Use this method to view all application reports for applications\
        \ to which  you have access. \n\nPermissions required: View IQ Elements "
      operationId: getAll_1
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationReportDTOV2'
                type: array
          description: 'The response JSON contains URLs to view the report data in
            html and pdf format, for each application to which you have access.


            The response field stage indicates the stage at which the policy evaluation
            was executed, such as ''develop'', ''build'' and ''release'' The response
            field latestReportHtmlUrl is a relative link to view the most recent report.
            Response fields reportPdfUrl and reportHtmlUrl are links to view the pdf
            version of the report.The response field reportDataUrl is a link to view
            the most recent report data. '
      tags:
      - Reports
  /api/v2/reports/applications/{applicationId}:
    get:
      description: "Use this method to retrieve the application reports for the specified\
        \ application Id. You can view application reports only for applications to\
        \ which you have access. \n\nPermissions required: View IQ Elements "
      operationId: getByApplicationId
      parameters:
      - description: 'Enter the internal application Id. You can use the Applications
          REST API to get the internal application Id. '
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationReportDTOV2'
                type: array
          description: "The response JSON contains the URLs to access the latest scan\
            \ report for the applicationId provided. \n\nThe response field `stage`\
            \ indicates the stage at which the policy evaluation was executed, such\
            \ as 'develop', 'build', 'release'.  The response field `latestReportHtmlUrl`\
            \ is a relative link to view the most recent report. Response fields `reportPdfURL`\
            \ and `reportHtmlURL` are links to view the pdf version of the report.\
            \ The response field `reportDataUrl` is a link to view the most recent\
            \ report data. "
      tags:
      - Reports
  /api/v2/reports/applications/{applicationId}/history:
    get:
      description: "Use this method to retrieve previous application scan reports\
        \ (100 max.) for the specified application. You can view application reports\
        \ only for applications to which you have access.  \n\nPermissions required:\
        \ View IQ Elements "
      operationId: getReportHistoryForApplication
      parameters:
      - description: 'Enter the internal application Id. You can use the Applications
          REST API to get the internal application Id. '
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: 'Enter the specific stage, for which you want retrieve the scan
          history, e.g. ''build'' '
        in: query
        name: stage
        schema:
          type: string
      - description: Enter the exact no. of most recent reports to retrieve.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportHistoryDTO'
          description: "The response contains evaluation details, embeddable link\
            \ and URLs to view the reports in pdf and html formats. \n\n<ul><li><code>stage</code>\
            \ indicates the stage at which policy evaluation was performed, such as\
            \ 'develop', 'build' and 'release'.</li><li><code>latestReportHtmlUrl</code>\
            \ is a relative link to view the most recent evaluation report.</li><li><code>reportPdfUrl</code>\
            \ and <code>reportHtmlUrl</code> are links to view the pdf version of\
            \ the report.</li><li><code>reportDataUrl</code> is a link to view the\
            \ most recent report data.</li><li><code>scanId</code> is the Id associated\
            \ with the evaluation report.</li><li><code>isReevaluation</code> indicates\
            \ whether this policy evaluation is a re-evaluation of an older policy\
            \ evaluation.</li><li><code>isForMonitoring</code> indicates whether this\
            \ policy evaluation was triggered by continuous monitoring.</li><li><code>commitHash</code>\
            \ is the hash string that identifies a specific commit in the source control\
            \ system.</li><li><code>scanTriggerType</code> indicates the type of scan\
            \ used for this evaluation, such as WEB_UI.</li><li><code>affectedComponentCount</code>\
            \ is the number of components identified in this evaluation.</li><li><code>criticalComponentCount</code>,\
            \ <code>severeComponentCount</code>, <code>moderateComponentCount</code>\
            \ indicate the number of components with critical, severe and moderate\
            \ policy violations respectively.</li><li><code>criticalPolicyViolationCount</code>,\
            \ <code>severePolicyViolationCount</code>, <code>moderatePolicyViolationCount</code>\
            \ indicate the number of critical, severe and moderate policy violations\
            \ respectively.</li><li><code>policyEvaluationResult</code> contains details\
            \ on the policy violation such as, coordinates of the violating component\
            \ and the specific policy constraints that are violated.</li></ul>"
        '400':
          description: Error in request. Check for missing or invalid parameter.
        '404':
          description: Scan report history could not be found.
      tags:
      - Reports
  /api/v2/reports/components/quarantined:
    get:
      description: "Use this method to retrieve all repository components that are\
        \ quarantined. The response contains violation details and the quarantine\
        \ Id of the component. Use the quarantine Id,  to release the component from\
        \ quarantine, using the Release from Quarantine REST API. \n\nPermissions\
        \ required: View IQ Elements and access to the specific repository."
      operationId: getComponentsInQuarantine
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentsInQuarantineDTO'
          description: 'The JSON response returns the component details and policy
            violation details that are triggering the quarantine. If a quarantined
            component does not show any policy violation, it implies that the policy
            violations have been waived, but the component has not been released from
            quarantine. '
      tags:
      - Reports
  /api/v2/reports/components/waivers:
    get:
      description: 'Use this method to retrieve existing policy waivers by components.
        For an up-to-date response, ensure that all application and repository reports
        are current and contain the most recent re-evaluation data.<p>You can specify
        the format/ecosystem of the component for a filtered result. <p>Permissions
        required: View IQ Elements and access to the specific applications and repositories '
      operationId: getComponentsWithWaivers
      parameters:
      - description: Enter the format/ecosystem of the component
        in: query
        name: format
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentWaiversDTO'
          description: The JSON response contains waivers grouped by application components
            and repository components. Waived violations for application components
            are listed per stage. Waived violations for repository components are
            listed in the Proxy stage. <p>The component hash is null if the waiver
            applies to all components or all versions of a component. It is truncated
            and meant to be used as an identifier to other REST API calls and not
            for use as checksum. <p>`isObsolete` indicates if a waived violation does
            not have a valid waiver information. This could happen when a waiver has
            been removed and the report has not been re-evaluated.<p>`matcherStrategy`
            can have values EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. <p>The
            response fields `associatedPackageUrl`, `componentIdentifier` and `displayName`
            are returned only if the waiver is of type ALL_VERSIONS OR EXACT_COMPONENTS
            and the component is not an unknown component .
      tags:
      - Reports
  /api/v2/reports/metrics:
    post:
      description: 'Use this method to retrieve metrics data such as policy evaluation
        metrics, violation and remediation metrics aggregated monthly or weekly.


        Permissions required: View IQ Elements'
      operationId: getMetrics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiMetricsReportingQueryDTOV2'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiMetricsReportingDTOV2'
                type: array
            text/csv: {}
          description: Select the media type JSON or csv for the preferred output
            format.
      tags:
      - Reports
  /api/v2/reports/waivers/stale:
    get:
      description: "Stale waivers pose a risk because they could be applied unintentionally.\
        \ Use this method to retrieve stale waivers to eliminate this risk for future\
        \ application evaluations. \n\nPermissions required: View IQ Elements. You\
        \ can view stale waivers only for applications/repositories  to which you\
        \ have access. "
      operationId: getStaleWaivers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStaleWaiversResponseDTO'
          description: 'The response contains waiverId of the stale waiver, policyId
            and policyName of the policy being waived, comment, waiver scope, time
            created, expiry time and the waiver creator details. The response field
            staleEvaluations contains a list of applications or repositories that
            have not been evaluated since the waiver was created. '
        '409':
          description: Found waivers for applications/repositories that have not been
            evaluated since IQ Server version 76. Re-evaluating the repository is
            recommended.
      tags:
      - Reports
  /api/v2/repositories/quarantine/{quarantineId}/release:
    post:
      description: 'Use this method to release a component from quarantine by providing
        the `quarantineId`.


        Use the GET method of the Reports REST API to retrieve the `quarantineId`
        for the quarantined component.


        Permissions required: Edit IQ Elements'
      operationId: releaseQuarantineWithoutReEval
      parameters:
      - description: Enter the component `quarantineId`.
        in: path
        name: quarantineId
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: Enter a waiver comment for releasing the component from quarantine.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentReleasedFromQuarantineDTO'
          description: The response contains:<ul><li>The quarantined component details
            for the component being released.</li><li>The quarantine and release times.</li><li>A
            list of policy violations that were waived to release the component from
            quarantine.</li><ul>
      tags:
      - Repositories
  /api/v2/repositories/{repositoryManagerInstanceId}/{repositoryPublicId}/components/quarantined/pathnames:
    post:
      description: 'Use this method to retrieve the pathnames of the repository components
        and the corresponding quarantine status.


        Permissions required: View IQ Elements'
      operationId: getQuarantinedByPath
      parameters:
      - description: Enter the repository manager instance ID.
        in: path
        name: repositoryManagerInstanceId
        required: true
        schema:
          type: string
      - description: Enter the repository public ID.
        in: path
        name: repositoryPublicId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: Specify the pathnames.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryPathResponseDTO'
          description: The response contains a list of repository component paths
            and their quarantine status.
      tags:
      - Repositories
  /api/v2/roleMemberships/{ownerType}:
    get:
      description: 'Use this method to retrieve all users and roles globally or for
        all repositories.


        Permissions required: Edit system configuration and users for a global context
        or view IQ elements for a non-global context'
      operationId: getRoleMembershipsGlobalOrRepositoryContainer
      parameters:
      - description: Enter the value for ownerType. Using `global` will return the
          users and groups who have been assigned the administrator role.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - repository_container
          - global
          pattern: global|repository_container
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRoleMemberMappingListDTO'
          description: The response contains all role Ids and the corresponding users/user
            groups assigned to them, for the ownerType specified. It also includes
            members who inherit a role based on the organization hierarchy.
      tags:
      - Role Memberships
  /api/v2/roleMemberships/{ownerType}/role/{roleId}/{memberType}/{memberName}:
    delete:
      description: 'Use this method to revoke roles globally or on all repositories.


        Permissions required: Edit system configuration and users for a global context
        or view IQ elements for a non-global context'
      operationId: revokeRoleMembershipGlobalOrRepositoryContainer
      parameters:
      - description: Enter the value for ownerType. Using `global` will revoke the
          administrator role.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - repository_container
          - global
          pattern: global|repository_container
          type: string
      - description: Enter the roleId for the role to be revoked.
        in: path
        name: roleId
        required: true
        schema:
          type: string
      - description: Enter the value for memberType, to specify a user or a user group.
        in: path
        name: memberType
        required: true
        schema:
          enum:
          - USER
          - GROUP
          pattern: user|group
          type: string
      - description: Enter the value for memberName. This can be a username or group
          name depending upon the value of memberType above.
        in: path
        name: memberName
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The specified role has been revoked from the user or user group.
      tags:
      - Role Memberships
    put:
      description: 'Use this method to grant a role to a user or user group globally
        or on all repositories.


        Permissions required: Edit system configuration and users for a global context
        or edit access control for a non-global context'
      operationId: grantRoleMembershipGlobalOrRepositoryContainer
      parameters:
      - description: Enter the value for the ownerType for which you want to grant
          the role.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - repository_container
          - global
          pattern: global|repository_container
          type: string
      - description: 'Enter the roleId for the role to be granted.


          Use the Roles REST API for roleIds and descriptions.'
        in: path
        name: roleId
        required: true
        schema:
          type: string
      - description: Enter the value for memberType, to specify a user or a user group.
        in: path
        name: memberType
        required: true
        schema:
          enum:
          - USER
          - GROUP
          pattern: user|group
          type: string
      - description: Enter the value for memberName. This can be a username or group
          name depending upon the value of memberType above.
        in: path
        name: memberName
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The specified role has been granted to the users or user groups
            on the given context.
      tags:
      - Role Memberships
  /api/v2/roleMemberships/{ownerType}/{internalOwnerId}:
    get:
      description: 'Use this method to retrieve the users, user groups and the corresponding
        role Ids.


        Permissions required: Edit system configuration and users for a global context
        or view IQ elements for a non-global context'
      operationId: getRoleMembershipsApplicationOrOrganization
      parameters:
      - description: Enter the ownerType for which you want to retrieve users and
          their role Ids.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRoleMemberMappingListDTO'
          description: The response contains the assigned role Ids, users and user
            groups for the application or organization requested. It also includes
            members who inherit a role based on the organization hierarchy.
      tags:
      - Role Memberships
  /api/v2/roleMemberships/{ownerType}/{internalOwnerId}/role/{roleId}/{memberType}/{memberName}:
    delete:
      description: 'Use this method to revoke a role from a user or user group, on
        a specific application or organization.


        Permissions required: Edit access control'
      operationId: revokeRoleMembershipApplicationOrOrganization
      parameters:
      - description: Enter the value for the ownerType for which you want to revoke
          the role. Using `global` will revoke the administrator role.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internalId associated with the ownerType specified
          above.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the roleId for the role to be revoked.
        in: path
        name: roleId
        required: true
        schema:
          type: string
      - description: Enter the value for memberType, to specify a user or a user group.
        in: path
        name: memberType
        required: true
        schema:
          enum:
          - USER
          - GROUP
          pattern: user|group
          type: string
      - description: Enter the value for memberName. This can be a username or group
          name depending upon the value of memberType above.
        in: path
        name: memberName
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The specified role has been revoked from the user or user group
      tags:
      - Role Memberships
    put:
      description: 'Use this method to grant a role to a user or user group for the
        specified application or organization.


        Permissions required: Edit access control'
      operationId: grantRoleMembershipApplicationOrOrganization
      parameters:
      - description: Enter the value for the ownerType for which you want to grant
          the role.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the value for the internalId associated with the ownerType
          specified above.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: 'Enter the roleId for the role to be granted.


          Use the Roles REST API for roleIds and descriptions.'
        in: path
        name: roleId
        required: true
        schema:
          type: string
      - description: Enter the value for memberType, to specify a user or a user group.
        in: path
        name: memberType
        required: true
        schema:
          enum:
          - USER
          - GROUP
          pattern: user|group
          type: string
      - description: Enter the value for memberName. This can be a username or group
          name depending upon the value of memberType above.
        in: path
        name: memberName
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The specified roleId has been has been granted to the user
            or user group for the requested context.
      tags:
      - Role Memberships
  /api/v2/roles:
    get:
      description: 'Use this method to view the role IDs, role names and descriptions.


        Permissions required: View All Roles'
      operationId: getRoles
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRoleListDTO'
          description: The response contains the role IDs, role names and descriptions.
      tags:
      - Roles
  /api/v2/sbom/applications/{applicationId}:
    get:
      description: Gets a paginated list of SBOMs for an application
      operationId: getSbomMetadataSummaryForApplication
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - deprecated: true
        description: Deprecated, use sortBy and asc instead. Sort results by import
          date. Allowed values [asc|desc]. default = asc
        in: query
        name: sortByDate
        schema:
          default: asc
          type: string
      - description: Number of items to return by page. default = 10
        in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - description: Current page number. default = 1
        in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - description: Criteria to sort the results. default = IMPORT_DATE, when used
          sortByDate is ignored
        in: query
        name: sortBy
        schema:
          default: IMPORT_DATE
          enum:
          - IMPORT_DATE
          - RELEASE_STATUS
          - VULNERABILITY
          type: string
      - description: Order mode ASC=true or DESC=false. default = true
        in: query
        name: asc
        schema:
          default: true
          type: boolean
      responses:
        '200':
          content:
            application/json: {}
          description: list of the sboms
      summary: Gets a paginated list of SBOMs for an application
      tags:
      - SBOM
  /api/v2/sbom/applications/{applicationId}/status/{importRequestId}:
    get:
      description: Gets status of a sbom import.
      operationId: getImportStatus
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: The id of the import request
        in: path
        name: importRequestId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json: {}
          description: Sbom import completed successfully.
        '404':
          description: Sbom import still in progress.
      summary: Get sbom import status
      tags:
      - SBOM
  /api/v2/sbom/applications/{applicationId}/versions:
    get:
      description: Gets a list of active sbom versions by application id
      operationId: getActiveSbomVersionListByApplication
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json: {}
          description: list of the active sbom versions by application id
      summary: Gets a list of active sbom versions by application id
      tags:
      - SBOM
  /api/v2/sbom/applications/{applicationId}/versions/{version}:
    delete:
      description: Deletes a specific sbom version including it's original contents
        and updates
      operationId: deleteSbomVersion
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: URL Encoded version value of the sbom to be deleted
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Delete successful
        '404':
          description: Supplied sbom version not found
      summary: Delete sbom version
      tags:
      - SBOM
    get:
      description: Downloads a specific sbom version in its original or current form
      operationId: getSbomVersion
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: URL Encoded version value of the sbom
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The state of the sbom version. Allowed values [original|current].
          default = current
        in: query
        name: state
        schema:
          default: current
          type: string
      - description: Target specification of the sbom. Allowed values [cyclonedx1.6|cyclonedx1.5|spdx2.2|spdx2.3].
          default = cyclonedx1.6
        in: query
        name: specification
        schema:
          default: cyclonedx1.6
          type: string
      - description: Output format(json/xml) of the sbom. Changing the output format
          only applicable when downloading the current form of the SBOM. The original
          sbom will always return in the original form that it was ingested. When
          requesting `current` form and if this header value is not present the sbom
          will be returned in its original ingested format. Allowed values {'application/json'|'application/xml'}.
          default = null
        in: header
        name: Accept
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: SBOM content in JSON format
                type: string
            application/xml:
              schema:
                description: SBOM content in XML format
                type: string
          description: Content of the sbom
        '404':
          description: Supplied sbom version not found
      summary: Gets a sbom version
      tags:
      - SBOM
  /api/v2/sbom/applications/{applicationId}/versions/{version}/components:
    get:
      description: Lists the components in a specific sbom version with data about
        vulnerabilities and licenses
      operationId: getSbomComponents
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: URL Encoded version value of the sbom to query its components
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: If provided, filter components by the given threat level on their
          vulnerabilities
        in: query
        name: vulnerabilityThreatLevels
        schema:
          items:
            enum:
            - NONE
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
            type: string
          type: array
          uniqueItems: true
      - description: If provided, filter components by the given dependency types
        in: query
        name: dependencyTypes
        schema:
          items:
            enum:
            - DIRECT
            - TRANSITIVE
            - UNSPECIFIED
            type: string
          type: array
          uniqueItems: true
      - description: If provided, filter components by the given search criteria
        in: query
        name: filter
        schema:
          type: string
      - description: Criteria to sort the results. default = VULNERABILITIES
        in: query
        name: sortBy
        schema:
          default: VULNERABILITIES
          enum:
          - TYPE
          - PERCENTAGE_ANNOTATED
          - RELEASE_STATUS_PERCENTAGE
          - VULNERABILITIES
          - DISPLAY_NAME
          type: string
      - description: Order mode ASC=true or DESC=false. default = false
        in: query
        name: asc
        schema:
          default: false
          type: boolean
      - description: Current page number. default = 1
        in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - description: Number of items to return by page. default = 50
        in: query
        name: pageSize
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json: {}
          description: List of components in the sbom
      summary: Gets the components found in a specific sbom version
      tags:
      - SBOM
  /api/v2/sbom/applications/{applicationId}/versions/{version}/vulnerability/{refId}:
    get:
      description: 'Use this method to retrieve details for a vulnerability belongs
        to a specific sbom version '
      operationId: getVulnerabilityDetails
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: The version for a specific SBOM where the vulnerability is present
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The vulnerability id of a vulnerability
        in: path
        name: refId
        required: true
        schema:
          type: string
      - description: (One of packageUrl or componentHash is required) Enter the packageUrl
          of the component with the vulnerability
        in: query
        name: packageUrl
        schema:
          type: string
      - description: (One of packageUrl or componentHash is required) Enter the componentHash
          of the component with the vulnerability
        in: query
        name: componentHash
        schema:
          type: string
      responses:
        '200':
          content:
            application/json: {}
          description: The response contains vulnerability details corresponding to
            the vulnerability
        '404':
          description: Target vulnerability not found
      tags:
      - SBOM
  /api/v2/sbom/applications/{applicationId}/versions/{version}/vulnerability/{refId}/analysis:
    delete:
      description: Deletes a Vulnerability analysis for a given component.
      operationId: deleteVulnerabilityAnalysis
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: The version for a specific SBOM where the vulnerability is present
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The vulnerability id of a vulnerability
        in: path
        name: refId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/componentLocator'
        description: Hash or packageUrl to identify the component
        required: true
      responses:
        '204':
          description: Vulnerability analysis deleted
        '404':
          description: Vulnerability analysis not found
      summary: Deletes a Vulnerability analysis for a given component.
      tags:
      - SBOM
    put:
      description: Updates a vulnerability analysis annotation for a specific SBOM
        vulnerability
      operationId: saveVulnerabilityAnalysis
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: The version for a specific SBOM where the vulnerability is present
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The vulnerability id of a vulnerability
        in: path
        name: refId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sbomVulnerabilityAnalysisRequest'
        description: Vulnerability analysis details with component information
        required: true
      responses:
        '200':
          content:
            application/json: {}
          description: Vulnerability analysis annotation updated successfully
        '404':
          description: Target vulnerability not found
      summary: Updates a vulnerability analysis annotation for a specific SBOM vulnerability
      tags:
      - SBOM
  /api/v2/sbom/import:
    post:
      description: Imports a new sbom version to an existing application
      operationId: importSbom
      parameters:
      - description: Enable importing as a binary file.
        in: query
        name: enableBinaryImport
        schema:
          default: false
          type: boolean
      - description: Skip the SBOM validation if an error occurs.
        in: query
        name: ignoreValidationError
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                applicationId:
                  description: The internal id of the application.
                  type: string
                applicationVersion:
                  description: The SBOM version.
                  type: string
                file:
                  description: Your SBOM.
                  format: binary
                  type: string
              required:
              - applicationId
              - file
              type: object
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiThirdPartyScanTicketDTO'
          description: Import successful. URL to check the status of the import returned
        '400':
          description: Invalid/Unsupported data provided for sbom import
      summary: Import a new sbom version
      tags:
      - SBOM
  /api/v2/scan/applications/{applicationId}/sources/{source}:
    post:
      description: 'Use this method to perform an analysis of an SBOM.


        Permissions required: Evaluate Applications'
      operationId: scanComponents
      parameters:
      - description: Enter the application internal id. Use the Applications REST
          API to retrieve theapplication internal id.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Specify the specification name of the SBOM to be evaluated. Allowed
          values are `cyclonedx` and `spdx`
        in: path
        name: source
        required: true
        schema:
          type: string
      - description: Enter the stageId to run the evaluation for. The policy actions
          will be determined by the stage selected. Allowed values are `develop`,
          `build`, `stage-release`, `release` and `operate`
        in: query
        name: stageId
        schema:
          default: build
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/xml:
            schema:
              type: string
        description: 'Select the request header content-type from the dropdown, depending
          on whether the SBOM is in XML or JSON format.


          Embed the contents of the SBOM here or enter the file path for the SBOM.
          A component in the SBOM can be identified by: <ol><li>packageUrl</li><li>Component
          hash</li><li>Component name and version</li></ol>


          Any SPE and SWID tags for the component will be preserved in the evaluation
          report.'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiThirdPartyScanTicketDTO'
          description: The response contains a `statusUrl` containing the applicationId
            and statusId that can be used to check the progress of the SBOM evaluation.
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiThirdPartyScanTicketDTO'
          description: The response contains a `statusUrl` containing the applicationId
            and statusId that can be used to check the progress of the SBOM evaluation.
      tags:
      - Third-Party Analysis
  /api/v2/scan/applications/{applicationId}/status/{scanRequestId}:
    get:
      description: 'SBOM evaluation is an asynchronous operation. Use this method
        to check on the status of the SBOM evaluation.


        Permissions required: Evaluate Applications'
      operationId: getScanStatus
      parameters:
      - description: Enter the application internal id for the SBOM to be evaluated.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the statusId from the statusUrl generated as a response
          to the POST request to perform the evaluation.
        in: path
        name: scanRequestId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiThirdPartyScanResultDTO'
          description: 'The response contains summarized results of the SBOM evaluation
            and the URLs for detailed evaluation reports in HTML, pdf and raw formats.


            `policyAction` indicates the policy actions determined by the `stageId`
            selected while submitting the evaluation using the POST method.'
        '404':
          description: Evaluation report is not ready.
      tags:
      - Third-Party Analysis
  /api/v2/search/advanced:
    get:
      description: 'Use this method to perform an Advanced Search. '
      operationId: searchIndex
      parameters:
      - description: Enter your search query here
        in: query
        name: query
        schema:
          type: string
      - description: Enter the no. of results that should be visible per page
        in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - description: Enter the page no. for the page containing results
        in: query
        name: page
        schema:
          format: int32
          type: integer
      - description: Set to `true` to retrieve results that include components with
          no violations
        in: query
        name: allComponents
        schema:
          default: false
          type: boolean
      - in: query
        name: mode
        schema:
          enum:
          - sbomManager
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultDTO'
          description: "Response JSON containing the search query sent in the API\
            \ call, and other response fields as follows: \n1. searchQuery: search\
            \ query sent in the request \n2. page: page number of search results requested\
            \ \n3. pageSize: requested number of results per page \n4. totalNumberOfHits:\
            \ total number of results returned \n5. isExactTotalNumberOfHits \n  \
            \  * `true` indicates that the search results in the JSON is the same\
            \ no. of search results that logically      match the search query. \n\
            \    * `false` indicates that the search results in the JSON are lower\
            \ bound because fetching all results is     too expensive to compute.\
            \ \n6. groupingByDTOS: array of search results grouped on a field name\
            \ \n7. groupIdentifier: field name that the search results have been grouped\
            \ by \n8. groupBy: field value that the search results have been grouped\
            \ by \n9. additionalInfo: shared information between groups, e.g. info\
            \ if grouped by a security vulnerability \n10. searchResultItemDTOS: array\
            \ of search results with each element containing an itemType, field names\
            \ and values \n11. resultIndex: indicating the relevance of the search\
            \ result w.r.t. the query"
        '409':
          description: Search index does not exist or is unreadable.
      tags:
      - Advanced Search
  /api/v2/search/advanced/export/csv:
    get:
      description: Use this method to generate a csv file containing your search results.
        The default delimiter in the generated file is comma. Use the advancedSearchCSVExportDelimiter
        property of the Configuration REST API to change the delimiter in the generated
        file.
      operationId: getExportResults
      parameters:
      - description: A well-formed search query.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: Enter the no. of results that should be visible per page, unset
          gives all results
        in: query
        name: pageSize
        schema:
          format: int32
          type: integer
      - description: Enter the page no. for the page containing results
        in: query
        name: page
        schema:
          format: int32
          type: integer
      - description: Set to `true` to retrieve results that include components with
          no violations.
        in: query
        name: allComponents
        schema:
          default: false
          type: boolean
      - in: query
        name: mode
        schema:
          enum:
          - sbomManager
          type: string
      responses:
        '200':
          description: Downloadable csv file generated successfully.
        '409':
          description: Search index does not exist or is unreadable.
      tags:
      - Advanced Search
  /api/v2/search/advanced/index:
    post:
      description: 'Use this method to create or rebuild the index for Advanced Search.
        This is a resource intensive operation. Avoid creating indexes during peak
        usage hours.


        Permissions required: Edit System Configuration and Users'
      operationId: createSearchIndexAsync
      responses:
        '204':
          description: Index created successfully.
      tags:
      - Advanced Search
  /api/v2/search/component:
    get:
      description: 'Use this method to retrieve the component details from the application
        evaluation reports by specifying the component search parameters, format and
        evaluation stage. You can specify the component search parameters in any one
        of the 3 ways:<ul><li>SHA1 hash of the component</li><li>Component identifier
        object containing the coordinates of the component and its format</li><li>packageUrl
        string</li></ul>Use of wildcards when searching using the GAVEC(coordinates)
        is supported.


        Permissions required: View IQ Elements'
      operationId: searchComponent
      parameters:
      - description: Specify the evaluation report stage.
        in: query
        name: stageId
        required: true
        schema:
          type: string
      - description: Enter the component hash.
        in: query
        name: hash
        schema:
          type: string
      - description: Specify the componentIdentifier object containing the format
          and coordinates.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the packageUrl.
        in: query
        name: packageUrl
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSearchResultsDTOV2'
          description: 'The response contains (a) criteria (the search criteria in
            the request), and (b) results (list of applications with the component
            specified).


            Each result includes applicationId and application name containing the
            component, the relative and absoluteURLs of the report, component metadata,
            threat level, and dependency data indicating if the component is a direct/transitive/InnerSource
            dependency.'
      tags:
      - Component Search
  /api/v2/securityOverrides:
    get:
      description: 'Use this method to retrieve security vulnerabilities that have
        been overridden.


        Permissions required: View IQ Elements'
      operationId: getSecurityVulnerabilityOverrides
      parameters:
      - description: Enter the CVE ID or Sonatype Vulnerability Identifier.
        in: query
        name: refId
        schema:
          type: string
      - description: Enter the component packageUrl e.g. `pkg:format/Group/ArtifactCoord@VersionCoord`
        in: query
        name: componentPurl
        schema:
          type: string
      - description: Enter the ownerId (e.g. applicationId) containing the vulnerability.
        in: query
        name: ownerId
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSecurityVulnerabilityOverrideResponseDTOV2'
          description: The response contains security overrides and affected components.
      tags:
      - Security Vulnerability Overrides
  /api/v2/solutions/licensed:
    get:
      description: 'Retrieves a list of licensed solutions. The base URL must be set
        to get results unless relative URLs are allowed.


        Permissions required: None '
      operationId: getLicensedSolutions
      parameters:
      - description: Whether or not relative URLs should be allowed.
        in: query
        name: allowRelativeUrls
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiLicensedSolutionDTO'
                type: array
          description: Successfully retrieved the list of licensed solutions.
      tags:
      - Solutions
  /api/v2/sourceControl/automaticRoleAssignment/userMappings/{organizationId}:
    delete:
      description: 'Use this method to delete existing SCM user mappings for an organization.


        Permissions required: Edit IQ Elements'
      operationId: deleteUserMappings
      parameters:
      - description: Enter the organizationId.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: User mappings deleted successfully.
      tags:
      - Source Control
    post:
      description: 'Use this method to apply user mappings from SCM (GitHub) to Lifecycle.
        The user mappings will be inherited by all child organizations and applications
        in the organization hierarchy. If a user mapping for an organization already
        exists, it will be replaced with new mappings provided here.


        Permissions required: Edit IQ Elements'
      operationId: addUserMappings
      parameters:
      - description: Enter the organizationId. Use `ROOT_ORGANIZATION_ID` for the
          root organization
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SCMUserMappingsDTO'
        description: <ul><li>Specify the `role` in lowercase, without whitespaces.</li><li>`mappings`
          is an array of objects consisting of `from` and `to` fields.</li><li>Allowed
          values for the `from` field are `SCM_USERNAME`, `SCM_EMAIL`, `SCM_FULLNAME`,
          `GITLOG_EMAIL`, `GITLOG_FULLNAME`.</li><li>Allowed values for `to` field
          are `IQ_USERNAME`, `IQ_EMAIL`, `IQ_FULLNAME`.</li><li>Any combination of
          `from` and `to` fields can be used.</li></ul>
      responses:
        '204':
          description: User mappings applied successfully.<ul><li>When multiple user
            mappings are specified in the body, and the first mapping fails,  the
            next user mapping will be attempted.</li><li>If duplicate user mappings
            are specified, an error message will be displayed</li></ul>
      tags:
      - Source Control
  /api/v2/sourceControl/automaticRoleAssignment/userMappings/{ownerType}/{internalOwnerId}:
    get:
      description: 'Use this method to retrieve SCM user mappings for an organization
        or application.


        Permissions required: View IQ Elements'
      operationId: getUserMappingsByOwner
      parameters:
      - description: Enter the value for ownerType.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the value for internal ownerId.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCMUserMappingsResponseDTO'
          description: The response contains:<ul><li>`ownerInternalId` indicates the
            owner id for which the user mappings were created.</li><li>`inherited`
            is always `true` if the ownerType is application</li><li>`userMapping`
            is an object containing `role` and `mappings`.<ul><li> `role` indicates
            the role assigned to users during automatic role assignment.</li><li>`mappings`
            contain all existing user mappings from the SCM sytem to IQ.</li></ul></ul>
      tags:
      - Source Control
  /api/v2/sourceControl/automaticRoleAssignment/{publicId}:
    post:
      description: 'Use this method to automatically grant the supplied role to all
        contributors of a repository on a given application.


        Prerequisites for automatic role assignment are:<ol><li>SCM configuration
        for the application and authentication token should exist.</li><li>The contributors
        to the repository should match a user in IQ based on the supplied mappings.</li><li>Either
        user mapping strategies have been configured for your organization, or they
        are provided in the request</li></ol>


        Permissions required: Edit access control on the application.'
      operationId: automaticRoleAssignment
      parameters:
      - description: Enter the public applicationId for automatic role assignment.
        in: path
        name: publicId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SCMUserMappingsDTO'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SCMUserMatchingResultDTO'
          description: 'The ''developer'' role has automatically been assigned to
            all contributors of the repository, who matched IQ Server users via the
            provided matching strategies.


            The response contains all usernames that were successfully granted the
            role provided on the given application as well as an indication of which
            matching strategy was the first to match a user.'
      tags:
      - Source Control
  /api/v2/sourceControl/{ownerType}/{internalOwnerId}:
    delete:
      description: 'Use this method to delete a SCM setting for the specified ownerType/ownerId.


        Permissions required: Edit IQ Elements'
      operationId: deleteSourceControl
      parameters:
      - description: Enter the value for ownerType.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the value for internal ownerId.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: The SCM setting for the specified ownerType/ownerId has been
            successfully deleted.
      tags:
      - Source Control
    get:
      description: 'Use this method to retrieve the source control configuration settings
        for an organization or an application.


        Permissions required: View IQ Elements'
      operationId: getSourceControl_1
      parameters:
      - description: Enter the value for ownerType.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the value for internal ownerId. Use ROOT_ORGANIZATION_ID
          for the root organization
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceControlDTO'
          description: 'The response contains source control configuration settings
            for the specified ownerId.


            <ul><li><code>id</code> is the owner internal ID.</li><li><code>repositoryUrl</code>
            indicates the http(s) and ssh urls for the application specified in the
            ownerId.</li><li><code>username</code> is retrieved if available on the
            SCM system, e.g. for Bitbucket Server and Cloud.</li><li><code>provider</code>
            indicates the name of the SCM system.</li><li><code>baseBranch</code>
            indicates the name of the last selected branch.</li><li><code>enablePullRequests</code>
            has been deprecated in version 124.</li><li><code>remediationPullRequestsEnabled</code>
            indicates if the Automated Pull Requests feature is enabled.</li><li><code>enableStatusChecks</code>
            has been deprecated in version 124.</li><li><code>statusChecksEnabled</code>
            is an internal field.</li><li><code>pullRequestCommentingEnabled</code>
            indicates if the Pull Request Commenting feature is enabled.</li><li><code>sourceControlEvaluationsEnabled</code>
            indicates if the source control evaluations are enabled for the continuous
            risk profile feature.</li><li><code>sourceControlScanTarget</code> indicates
            the path inside the repository.</li><li><code>sshEnabled</code> indicates
            if ssh is enabled.</li><li><code>commitStatusEnabled</code> indicates
            if interaction with the commit statuses on the SCM system is enabled.</li></ul>'
      tags:
      - Source Control
    post:
      description: 'Use this method to create a source control configuration setting.


        Permissions required: Edit IQ Elements'
      operationId: addSourceControl
      parameters:
      - description: Enter the value for ownerType.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the value for internal ownerId. Use ROOT_ORGANIZATION_ID
          for root organization.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSourceControlDTO'
        description: Specify the SCM settings for the ownerId specified above in the
          request JSON.<ul><li><code>id</code> is the internal owner ID.</li><li><code>repositoryUrl</code>
          is the http(s) and ssh urls for the application specified in the ownerId.</li><li><code>username</code>
          is optional, can be provided for Bitbucket Server and Cloud.</li><li><code>token</code>
          is optional,if inherited. If provided, this value will override the value
          inherited from the root organization, organization or application level.<li><code>provider</code>
          is the name of of the SCM system. Allowed values are <code>azure</code>,
          <code>github</code>, <code>gitlab</code>, and <code>bitbucket</code>.</li><li><code>baseBranch</code>
          is required for the root organization. Organizations and applications inherit
          from the root unless overridden.</li><li><code>enablePullRequests</code>
          has been deprecated in version 124.</li><li><code>remediationPullRequestsEnabled</code>
          is optional. Set it to `true` to enable the Automated Pull Requests.</li><li><code>enableStatusChecks</code>
          has been deprecated in version 124.</li><li><code>statusChecksEnabled</code>
          is an internal field.</li><li><code>pullRequestCommentingEnabled</code>
          is optional. Set it to `true` to enable the  Pull Request Commenting feature.</li><li><code>sourceControlEvaluationsEnabled</code>
          is set to `true` to enable source control evaluations for the continuous
          risk profile feature.</li><li><code>sourceControlScanTarget</code> is the
          path inside the repository.</li><li><code>sshEnabled</code> is set to `true`
          to enable ssh.</li><li><code>commitStatusEnabled</code> is set to `true`
          if interaction with the commit statuses on the SCM is enabled.</li></ul>
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceControlDTO'
          description: The Source Control Management (SCM) settings have been created
            successfully.
      tags:
      - Source Control
    put:
      description: 'Use this method to update an existing SCM setting.


        Permissions required: Edit IQ Elements'
      operationId: updateSourceControl
      parameters:
      - description: Enter the value for ownerType.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the internal ownerId. Use ROOT_ORGANIZATION_ID for the
          root organization.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSourceControlDTO'
        description: Specify the SCM settings for the ownerId specified above in the
          request JSON.<ul><li><code>id</code> is the internal owner ID.</li><li><code>repositoryUrl</code>
          is the http(s) and ssh urls for the application specified in the ownerId.</li><li><code>username</code>
          is optional, can be provided for Bitbucket Server and Cloud.</li><li><code>token</code>
          is optional if inherited. If provided, this value will override the value
          inherited from the root organization, organization or application level.<li><code>provider</code>
          is the name of of the SCM system. Allowed values are <code>azure</code>,
          <code>github</code>, <code>gitlab</code>, and <code>bitbucket</code>.</li><li><code>baseBranch</code>
          is required for the root organization. Organizations and applications inherit
          from the root unless overridden.</li><li><code>enablePullRequests</code>
          has been deprecated in version 124.</li><li><code>remediationPullRequestsEnabled</code>
          is optional. Set it to `true` to enable the Automated Pull Requests.</li><li><code>enableStatusChecks</code>
          has been deprecated in version 124.</li><li><code>statusChecksEnabled</code>
          is an internal field.</li><li><code>pullRequestCommentingEnabled</code>
          is optional. Set it to `true` to enable the  Pull Request Commenting feature.</li><li><code>sourceControlEvaluationsEnabled</code>
          is set to `true` to enable source control evaluations for the continuous
          risk profile feature.</li><li><code>sourceControlScanTarget</code> is the
          path inside the repository.</li><li><code>sshEnabled</code> is set to `true`
          to enable ssh.</li><li><code>commitStatusEnabled</code> is set to `true`
          if interaction with the commit statuses on the SCM is enabled.</li></ul>
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceControlDTO'
          description: The SCM settings have been updated successfully. The JSON returned
            shows the updated values.
      tags:
      - Source Control
  /api/v2/sourceControlMetrics/{ownerType}/{internalOwnerId}:
    get:
      description: 'Use this method to view the source control pull request metrics.


        Permissions required: View IQ Elements'
      operationId: getSourceControl
      parameters:
      - description: Select the ownerType for the pull requests.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - description: Enter the ownerId corresponding to the ownerType.
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPullRequestResults'
          description: 'The response contains `results` which is a list of elements,
            each including: <ul><li>`startTime` indicates the start time of the pull
            request.</li><li>`title` indicates the title of the pull request.</li><li>`exceptionThrown`
            indicates if the pull request caused an exception.</li><li>`successful`
            indicates if the pull request was successful.</li><li>`totalTime` indicates
            the total time taken to complete the pull request.</li><li>`reasoning`
            indicates the summary of the outcome of the pull request.</li></ul>'
      tags:
      - Source Control Metrics
  /api/v2/spdx/{applicationId}/reports/{scanId}:
    get:
      description: 'Use this method to generate SBOM(s) based on a specific application
        scan.


        Permissions required: View IQ Elemets'
      operationId: getByScanId
      parameters:
      - description: Enter the applicationId for the application you want to generate
          the SBOM(s).
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the scanId of the application scan.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Enter the format for the SBOM(s) to be generated.
        in: query
        name: format
        schema:
          default: json
          type: string
      - description: Set to `true` to generate an equivalent CycloneDx SBOM. Both
          SBOMs will be combined as a tar.gz archive.
        in: query
        name: generateCycloneDx
        schema:
          default: false
          type: boolean
      - description: Enter the desired SPDX version, possible values are 2.2|2.3
        in: query
        name: spdxVersion
        schema:
          default: '2.3'
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: SBOM in JSON format
                type: string
            application/octet-stream:
              schema:
                description: SBOM archive (tar.gz)
                format: binary
                type: string
            application/xml:
              schema:
                description: SBOM in XML format
                type: string
          description: The requested SBOM(s).
      tags:
      - SPDX
  /api/v2/spdx/{applicationId}/stages/{stageId}:
    get:
      description: 'Use this method to generate SBOM(s) based on the latest application
        evaluation report at the specified stage.


        Permissions required: View IQ Elements'
      operationId: getLatestForStage
      parameters:
      - description: Enter the applicationId for the application you want to generate
          the SBOM(s).
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Specify the stageId for the application evaluation. Allowed values
          are `develop`, `build`, `stage-release`, `release` and `operate`.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      - description: Enter the format for the SBOM(s) to be generated.
        in: query
        name: format
        schema:
          default: json
          type: string
      - description: Set to `true` to generate an equivalent CycloneDx SBOM. Both
          SBOMs will be combined as a tar.gz archive.
        in: query
        name: generateCycloneDx
        schema:
          default: false
          type: boolean
      - description: Enter the desired SPDX version, possible values are 2.2|2.3
        in: query
        name: spdxVersion
        schema:
          default: '2.3'
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: SBOM in JSON format
                type: string
            application/octet-stream:
              schema:
                description: SBOM archive (tar.gz)
                format: binary
                type: string
            application/xml:
              schema:
                description: SBOM in XML format
                type: string
          description: The requested SBOM(s).
      tags:
      - SPDX
  /api/v2/userTokens:
    get:
      description: 'Use this method to retrieve user tokens created within a date
        range, in the supported IQ Server realms.


        Permissions required: Edit System Configuration and Users.'
      operationId: getUserTokensByCreatedBetweenAndRealmId
      parameters:
      - description: Enter the start date for the date range in `yyyy-mm-dd` format.
        in: query
        name: createdAfter
        schema:
          type: string
      - description: Enter the end date for the date range in `yyyy-mm-dd` format.
        in: query
        name: createdBefore
        schema:
          type: string
      - description: Enter the `realmId`. Possible values are `Internal`, `SAML` ,
          `OAUTH2`, and `Crowd`.
        in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiUserTokenDTO'
                type: array
          description: The response contains a list of user tokens, each containing
            a `userCode`, `username` and the name of the IQ server `realm`.
      tags:
      - User Tokens
  /api/v2/userTokens/currentUser:
    delete:
      description: 'Use this method to delete an existing user token for the currently
        logged in user.


        Permissions required: None'
      operationId: deleteCurrentUserToken
      responses:
        '204':
          description: User token deleted successfully.
      tags:
      - User Tokens
    post:
      description: 'Use this method to generate a user token for the currently logged
        in user.


        Permissions required: None'
      operationId: createUserToken
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserTokenDTO'
          description: The response contains the generated user token consisting of
            `userCode`, `username` `passCode`, and the IQ Server `realm`.
      tags:
      - User Tokens
  /api/v2/userTokens/currentUser/hasToken:
    get:
      description: 'Use this method to check if a user token has been issued to the
        logged in user.


        Permissions required: None '
      operationId: getUserTokenExistsForCurrentUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserTokenExistsDTO'
          description: The response contains a `userTokenExists` field.
      tags:
      - User Tokens
  /api/v2/userTokens/purge:
    delete:
      description: 'Use this method to delete all existing LDAP user tokens.


        Permissions required: Edit System Configuration and Users'
      operationId: purgeUserTokens
      responses:
        '204':
          description: User tokens purged successfully.
      tags:
      - User Tokens
  /api/v2/userTokens/userCode/{userCode}:
    delete:
      description: 'Use this method to delete an existing user token by specifying
        the userCode.


        Permissions required: Edit System Configuration and Users'
      operationId: deleteUserTokenByUserCode
      parameters:
      - description: Enter the `userCode` to be deleted.
        in: path
        name: userCode
        required: true
        schema:
          type: string
      responses:
        '204':
          description: User token deleted successfully.
      tags:
      - User Tokens
  /api/v2/userTokens/{username}:
    get:
      description: 'Use this method to retrieve a user token by specifying a username
        and realmId.


        Permissions required: Edit System Configuration and Users'
      operationId: getUserTokenByUsernameAndRealmId
      parameters:
      - description: Enter the username.
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: Enter the realmId. Possible values are `Internal`, `SAML` , `OAUTH2`
          , and `Crowd`.
        in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserTokenDTO'
          description: The response contains the `userCode`, `username` and the name
            of the IQ server `realm`.
      tags:
      - User Tokens
  /api/v2/users:
    get:
      description: 'Use this method to retrieve user details for all users.


        Permissions required: Edit System Configuration and Users'
      operationId: getAll_2
      parameters:
      - description: Enter the `realm`. Allowed values are `Internal`,`OAUTH2`, and
          `SAML`.
        in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserListDTO'
          description: The response contains user details. Passwords are excluded
            for security.
      tags:
      - Users
    post:
      description: 'Use this method to create a new user.


        Permissions required: Edit System Configuration and Users'
      operationId: add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUserDTO'
        description: Specify the user details for the new user to be created. All
          fields except `realm` are required.
      responses:
        '204':
          description: User created successfully.
      tags:
      - Users
  /api/v2/users/{username}:
    delete:
      description: 'Use this method to delete an existing user.


        Permissions required: Edit System Configuration and Users'
      operationId: delete_1
      parameters:
      - description: Enter the username to be deleted.
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: Enter the `realm`. Allowed values are `Internal`,`OAUTH2`, and
          `SAML`.
        in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        '204':
          description: User deleted successfully.
      tags:
      - Users
    get:
      description: 'Use this method to retrieve user details for the specified user.


        Permissions required: Edit System Configuration and Users'
      operationId: get_1
      parameters:
      - description: Enter the username.
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: Enter the `realm`. Allowed values are `Internal`,`OAUTH2`, and
          `SAML`.
        in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserDTO'
          description: The response contains details for the specified user.
      tags:
      - Users
    put:
      description: 'Use this method to update user details for an existing internal
        user, by specifying the username.


        Permissions required: Edit System Configuration and Users'
      operationId: update
      parameters:
      - description: Enter the username.
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUserDTO'
        description: Specify the user details to be updated. Any unspecified field
          will remain unchanged. Username, password, and realm cannot be updated.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserDTO'
          description: User details updated successfully.
      tags:
      - Users
  /api/v2/vulnerabilities:
    post:
      description: 'Use this method to retrieve bulk details for vulnerabilies using
        authenticated or non-authenticated requests. A non-authenticated request will
        retrieve limited details for the vulnerability.


        Permissions required: View IQ Elements'
      operationId: getSecurityVulnerabilityDetails
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: Enter the vulnerability identifiers (CVE ID or Sonatype Vulnerability
          Identifier) as query parameter
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkSecurityVulnerabilityDataDTO'
          description: The response contains a list of vulnerability details corresponding
            to the vulnerabilitity or component identifiers.<ul><li>`vulnIds` is a
            list of related vulnerability identifiers.</li><li>`vulnerabilityLink`
            is the link to the CVE or Sonatype Vulnerability Identifier description
            page.</li><li>`source` indicates the source from where the vulnerability
            details are obtained from.</li><li>`mainSeverity` is the official severity
            scores and vector strings assigned to the vulnerability.</li><li>`severityScores`
            are all other known severity scores not mentioned in the `mainSeverity`.</li><li>`weakness`
            indicates the source of the CWE, CWEId and the URI for the description
            of the CWE.</li><li>`categories` indicates the categories of the vulnerabilities.</li><li>`description`
            is the detailed description of the vulnerability. </li><li>`explanationMarkdown`
            is the text in markdown format for the explanation of the vulnerability.</li><li>`componentExplanationMarkdown`
            is the text in markdown format that is used to populate the vulnerability
            details in the UI.</li><li>`recommendationMarkdown` is the text in markdown
            format for a non-vulnerable component recommendationin the the UI.</li><li>`componentRecommendationMarkdown`
            is the text in markdown format for the recommended component.</li><li>`rootCauses`indicates
            the paths where the vulnerability is located, as well as the impacted
            version ranges of the vulnerable component.</li><li>`advisories`is a list
            of links to the published advisories.</li><li>`vulnerableVersionRanges`
            contains a list of the component version ranges that are vulnerable. Version
            ranges can be inclusive, denoted by square brackets [ ] or exclusive,
            denoted by ( )</li><li>`researchType` indicates if the vulnerability details
            were researched on FAST TRACK or DEEP DIVE basis<li>`isAdvancedVulnerabilityDetection`
            indicates if this vulnerability has been detected in entire files and
            embedded dependencies, typically beyond the pubic feeds, using our proprietary
            detection systems.</li><li>`customData` field contains the vulnerability
            attributes that are customized by the users, if found under the requested
            scope</li> <li>`detectionType` indicates the type of vulnerability detection
            system used to obtain the vulnerability data. Possible values are PRIMARY,
            SECONDARY, AST, UNSHADER, OTHER or null. <ul><li>PRIMARY means the vulnerability
            data has been investigated by the security researcher to explicitly implicate
            components referenced in the feed or is a result of independent research.</li>
            <li>SECONDARY means the component has been implicated by our automated
            systems because it shares vulnerable code with components that were implicated
            by the PRIMARY systems.</li><li>AST means that the vulnerability is discovered
            as part of Application Security Testing and includes common issues such
            as code injection, authentication flaws and data leakage.</li><li>UNSHADER
            means the vulnerability is discovered by the Shaded Vulnerability Algorithm.</li>
            </ul></li></ul>
      tags:
      - Vulnerability Details
  /api/v2/vulnerabilities/{refId}:
    get:
      description: 'Use this method to retrieve details for a vulnerability using
        authenticated or non-authenticated requests. A non-authenticated request will
        retrieve limited details for the vulnerability.


        Permissions required: View IQ Elements'
      operationId: getSecurityVulnerabilityDetails_1
      parameters:
      - description: Enter the vulnerability identifier (CVE ID or Sonatype Vulnerability
          Identifier)
        in: path
        name: refId
        required: true
        schema:
          type: string
      - description: Enter the component identifier.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the name of the component identification source (third-party)
          for this vulnerability. The response will retrieve vulnerability data from
          this third-party data source.
        in: query
        name: identificationSource
        schema:
          type: string
      - description: Enter the scanId where the vulnerability was detected. The response
          will retrieve vulnerability data from the third-party data source and not
          HDS.
        in: query
        name: scanId
        schema:
          type: string
      - description: Enter the value for ownerType where this vulnerability was detected.
          The response will retrieve the vulnerability data from the third-party data
          source and not HDS.
        in: query
        name: ownerType
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      - description: Enter the ownerId where this vulnerability was detected. The
          response will retrieve data from the third-party data source and not HDS.
        in: query
        name: ownerId
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityVulnerabilityDataDTO'
          description: The response contains vulnerability details corresponding to
            the vulnerability or component identifier.<ul><li>`vulnIds` is a list
            of related vulnerability identifiers.</li><li>`vulnerabilityLink` is the
            link to the CVE or Sonatype Vulnerability Identifier description page.</li><li>`source`
            indicates the source from where the vulnerability details are obtained
            from.</li><li>`mainSeverity` is the official severity scores and vector
            strings assigned to the vulnerability.</li><li>`severityScores` are all
            other known severity scores not mentioned in the `mainSeverity`.</li><li>`weakness`
            indicates the source of the CWE, CWEId and the URI for the description
            of the CWE.</li><li>`categories` indicates the categories of the vulnerabilities.</li><li>`description`
            is the detailed description of the vulnerability. </li><li>`explanationMarkdown`
            is the text in markdown format for the explanation of the vulnerability.</li><li>`componentExplanationMarkdown`
            is the text in markdown format that is used to populate the vulnerability
            details in the UI.</li><li>`recommendationMarkdown` is the text in markdown
            format for a non-vulnerable component recommendationin the the UI.</li><li>`componentRecommendationMarkdown`
            is the text in markdown format for the recommended component.</li><li>`rootCauses`indicates
            the paths where the vulnerability is located, as well as the impacted
            version ranges of the vulnerable component.</li><li>`advisories`is a list
            of links to the published advisories.</li><li>`vulnerableVersionRanges`
            contains a list of the component version ranges that are vulnerable. Version
            ranges can be inclusive, denoted by square brackets [ ] or exclusive,
            denoted by ( )</li><li>`researchType` indicates if the vulnerability details
            were researched on FAST TRACK or DEEP DIVE basis<li>`isAdvancedVulnerabilityDetection`
            indicates if this vulnerability has been detected in entire files and
            embedded dependencies, typically beyond the pubic feeds, using our proprietary
            detection systems.</li><li>`customData` field contains the vulnerability
            attributes that are customized by the users, if found under the requested
            scope</li> <li>`detectionType` indicates the type of vulnerability detection
            system used to obtain the vulnerability data. Possible values are PRIMARY,
            SECONDARY, AST, UNSHADER, OTHER or null. <ul><li>PRIMARY means the vulnerability
            data has been investigated by the security researcher to explicitly implicate
            components referenced in the feed or is a result of independent research.</li>
            <li>SECONDARY means the component has been implicated by our automated
            systems because it shares vulnerable code with components that were implicated
            by the PRIMARY systems.</li><li>AST means that the vulnerability is discovered
            as part of Application Security Testing and includes common issues such
            as code injection, authentication flaws and data leakage.</li><li>UNSHADER
            means the vulnerability is discovered by the Shaded Vulnerability Algorithm.</li>
            </ul></li></ul>
      tags:
      - Vulnerability Details
  /api/v2/{ownerType}/{internalOwnerId}/configuration/publicSource/cpe:
    get:
      description: 'This method allows to retrieve the applicable cpe matching configuration
        of a given organization or application.<p>Permissions Required: View IQ Elements'
      operationId: getCpeMatchingConfiguration
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Applicable cpe matching configuration for given ownerId
      tags:
      - CPE Matching Configuration
    put:
      description: 'Use this method to apply a given cpe matching configuration to
        an organization or application.<p>Permissions Required: Edit IQ Elements'
      operationId: updateCpeMatchingConfiguration
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CpeMatchingConfigurationRequest'
      responses:
        '200':
          content:
            application/json: {}
          description: An object containing the cpe configuration applied to the given
            ownerId
      tags:
      - CPE Matching Configuration
security:
- BasicAuth: []
tags:
- description: Use the Advanced Search REST API to perform searches on Lifecycle application
    scan reports.
  name: Advanced Search
- description: 'Use the Application Categories REST API to manage the application
    categories or tags assigned to the applications in an organization. '
  name: Application Categories
- description: Use this REST API to retrieve the data from an application composition
    report, that is generated after an evaluation.
  name: Application Report Data
- description: 'Use this REST API to manage applications.


    In addition to the primary functions of create, update and delete, you can also
    move applications from one organization to other.'
  name: Applications
- description: Use this REST API to access the IQ Server audit logs.
  name: Audit Logs
- description: Use this REST API to create and delete auto policy waiver exclusions.
  name: Auto Policy Waiver Exclusions
- description: Use this REST API to create, modify and retrieve auto policy waivers.
  name: Auto Policy Waivers
- description: 'Use this REST API to manage components that are developed in-house
    and are not open-source.


    Claiming the component stores the identity information for the component hash
    and avoids triggering the Component-Unknown policy.


    Components will have a match state as `Exact` and Identification Source as `Manual`,

    for subsequent scans or evaluations.'
  name: Claim Components
- description: 'Use this REST API to manage component labels for applications, organizations
    and repositories.


    Component Labels can be used as attributes of a component at the time of creating
    policies. A policy violation can be triggered based on the component label.'
  name: Component Labels
- description: Use this REST API to search for components in application evaluation
    reports.
  name: Component Search
- description: Use this REST API to retrieve a component's security vulnerability
    data, license data, age and popularity.
  name: Components
- description: 'Use this REST API to access the composite source control management
    configuration (SCM) for an application or organization.


    Composite source control configuration is defined as the configuration that is
    inherited from the parent organization or is directly assigned.'
  name: Composite Source Control
- description: 'Use this REST API to validate the composite source control management
    (SCM) configuration.


    Composite source control configuration is defined as the configuration that is
    inherited from the parent or is directly assigned.'
  name: Composite Source Control Validator
- description: Use this REST API to manage the configuration of an existing Atlassian
    Crowd Server that is being used to authenticate users for IQ Server.
  name: Config Crowd
- description: 'Use this REST API to manage Jira configurations to receive notifications
    from Lifecycle.


    It is supported for Jira Cloud, Jira Server, and Jira Data Center.'
  name: Config Jira
- description: Use this REST API to manage the configuration of an SMTP server, to
    receive email notifications.
  name: Config Mail
- description: Use this REST API to manage the configuration of IQ Server with an
    existing HTTP proxy server.
  name: Config Proxy Server
- description: Use this REST API to manage the configuration of a reverse proxy server.
  name: Config Reverse Proxy Authentication
- description: Use this REST API to manage the SAML configuration for IQ Server.
  name: Config SAML
- description: Use this REST API to manage the configuration of IQ Server with your
    Source Control Management (SCM) system (e.g. GitHub).
  name: Config Source Control
- description: Use this REST API to manage the configuration of a Zscaler service.
  name: Config Zscaler
- description: 'Use this REST API to configure the IQ Server system properties.


    We strongly recommend using this REST API instead of config.yml for versions 142
    and higher.'
  name: Configuration
- description: Use this REST API to manage the configuration of Firewall for JFrog
    Artifactory.
  name: Configure Artifactory Connection
- description: Use the CPE Matching Configuration REST API to add/set/remove cpe matching
    configuration to organizations and applications
  name: CPE Matching Configuration
- description: Use the CycloneDX REST API to generate CycloneDX SBOMs in XML or JSON
    formats, containing coordinates and licenses for components found in a scan report.
  name: CycloneDX
- description: Set policies for automatic purging of obsolete application and Success
    Metrics reports. <p>Note that IQ Server has a preset limit of purging 5000 reports
    in one execution of its report purging job.
  name: Data Retention Policies
- description: Use this REST API to export Sonatype Developer component priorities
    data, including security reachability data.
  name: Developer Priorities
- description: This REST API returns the OpenAPI documentation for the specified IQ
    Server REST API.
  name: Endpoints
- description: Use this REST API to enable/disable the IQ Server features.
  name: Feature Configuration
- description: Use this REST API for managing and monitoring firewall features, including
    metrics, repository management, quarantine operations, and namespace confusion
    prevention.
  name: Firewall
- description: Use this REST API to retrieve license legal metadata in raw or HTML
    format.
  name: License Legal Metadata Report
- description: Use this REST API to manage and customize templates for the license
    legal metadata generated in HTML format.
  name: License Legal Metadata Template
- description: Use this REST API to manage license overrides for components in your
    applicationsorganizations and repositories.
  name: License Overrides
- description: Use this REST API to create new organizations, retrieve, edit or delete
    existing organizations.
  name: Organizations
- description: Use this REST API to retrieve details on all existing policies in your
    instance of Lifecycle.
  name: Policies
- description: "Use this REST API to perform an application policy evaluation. Policy\
    \ evaluations are executed asynchronously.<p>This is a 2-step process that involves:\
    \ \n1. Requesting a policy evaluation (POST) \n2. Checking the status and response\
    \ of the evaluation request (GET)"
  name: Policy Evaluation
- description: 'Use this REST API to obtain the violation details, violation details
    across stages (cross stage), violations occurring due to transitive dependencies
    and all waivers applicable to a violation.


    Cross-stage policy violations are helpful in performance analysis like MTTR metrics.'
  name: Policy Violation Details
- description: Use this rest API to fetch available policy waiver reasons
  name: Policy Waiver Reasons
- description: Use this REST API to manage policy waiver requests.
  name: Policy Waiver Requests
- description: Use this REST API to create and retrieve policy waivers.
  name: Policy Waivers
- description: Use this REST API to manage a product license.
  name: Product License
- description: 'Use this REST API to view application scan reports, generate a list
    of stale waivers, view existing policy waivers on components, view quarantined
    components and retrieve additional metrics data. '
  name: Reports
- description: Use this REST API to manage quarantined components.
  name: Repositories
- description: 'Use this REST API to manage authorizations for users or user groups.


    You can view existing role assignments and grant or revoke user authorization
    on organizations, applications and repositories.'
  name: Role Memberships
- description: 'Roles provide sets of permissions that grant access to the functionality
    in the user interface,through integrations, and when using REST APIs.


    Permissions are granted by assigning users or groups to the system roles or at
    the various levels in the organizational hierarchy: root organization, repository
    managers, and applications and organizations.


    Use this REST API to retrieve role IDs, role names and descriptions.'
  name: Roles
- name: SBOM
- description: Use this REST API to retrieve security vulnerabilities that have been
    overridden.
  name: Security Vulnerability Overrides
- name: Solutions
- description: Use this REST API to:<ul><li>Create, update and delete source control
    management (SCM) configuration for the root organization, sub-organizations and
    applications.</li><li>Automatically assign the developer role to all contributors
    of the associated repository, who are registered IQ users.</li></ul>
  name: Source Control
- description: Use this REST API to view the response times of a source control evaluation.
  name: Source Control Metrics
- description: Use this REST API to generate SPDX SBOMs in XML or JSON formats.
  name: SPDX
- description: Use this REST API to scan SBOMs for your applications.
  name: Third-Party Analysis
- description: Use this REST API to manage user tokens.
  name: User Tokens
- description: Use this REST API to manage users.
  name: Users
- description: Use this REST API to retrieve vulnerability details.
  name: Vulnerability Details
